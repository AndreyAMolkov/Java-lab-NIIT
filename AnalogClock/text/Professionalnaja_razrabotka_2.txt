Professional 
Software 
Development 

Shorter Schedules 
Higher Quality Products 
More Successful Projects 
Enhanced Careers 

Steve McConnell 



ПРОФЕССИОНАЛЬНАЯ 
РАЗРАБОТКА ПРОГРАММНОГО 
ОБЕСПЕЧЕНИЯ 

Сокращение сроков 
Повышение качества продукта 
Больше удачных проектов 
Расширение возможностей 

успешной карьеры 

Стив Макконнелл 


Санкт Петербург–Москва 
2007 


Серия «Профессионально» 
Стив Макконнелл 

Профессиональная разработка 
программного обеспечения 

Перевод В. Агапова 

Главный редактор А. Галунов 
Зав. редакцией Н. Макарова 
Научные редакторы А. Сапегин, О. Цилюрик 
Редактор В. Овчинников 
Художник В. Гренда 
Корректор О. Макарова 
Верстка Д. Орлова 
Макконнелл С. 

Профессиональная разработка программного обеспечения. – Пер. с англ. – СПб.: 
Символ &Плюс, 2006. – 240 с., ил. 
ISBN 5&93286 085&5 

Стив Макконнелл, автор бестселлера «Совершенный код», других книг и много 
численных статей о разработке ПО, убедительно показывает, что разработка ПО 
может быть стабильно успешной, если сделать совершеннее саму профессию раз& 
работчика ПО. Он не только показывает, почему и как отрасль пришла к своему 
современному состоянию, и описывает шаги, которые должен предпринять каж& 
дый, кто хочет подняться на новый уровень в создании ПО. Он также говорит 
о корпоративных методиках, призванных увеличить количество профессиональ 
но выполненных проектов, и о лицензировании организаций и академических 
учебных программ как о средстве повышения профессионализма и отдельных 
разработчиков, и в индустрии ПО в целом. 

ISBN 593286 0855 
ISBN 0321 19367 9 (англ) 

© Издательство Символ Плюс, 2006 
Authorized translation of the English edition © 2004 Pearson Education, Inc. This transla 

tion is published and sold by permission of Pearson Education, Inc., the owner of all rights 
to publish and sell the same. 
Все права на данное издание защищены Законодательством РФ, включая право на полное или частичное 

воспроизведение в любой форме. Все товарные знаки или зарегистрированные товарные знаки, упомина 
емые в настоящем издании, являются собственностью соответствующих фирм. 

Издательство «Символ& Плюс». 199034, Санкт Петербург, 16 линия, 7, 
тел. (812) 324 5353, edit@symbol.ru. Лицензия ЛП N 000054 от 25.12.98. 
Налоговая льгота – общероссийский классификатор продукции 
ОК 005 &93, том 2; 953000 – книги и брошюры. 
Подписано в печать 31.08.2006. Формат 70х90 1/16 . Печать офсетная. 
Объем 15 печ. л. Тираж 3000 экз. Заказ N 
Отпечатано с готовых диапозитивов в ГУП «Типография «Наука» 
199034, Санкт& Петербург, 9 линия, 12. 


На высокую башню можно подняться только 
по винтовой лестнице. 

ФРЕНСИС БЭКОН 

К успеху придет только тот, кто способен преодолевать 
неудачи не теряя энтузиазма. 

УИНСТОН ЧЕРЧИЛЛЬ 


О

Об авторе 

Стив Макконнелл – первое лицо Construx Software, где он возглавляет ра 
боты по инженерии ПО и ведет занятия в рамках программы профессио# 
нального развития фирмы. Стив пишет книги и статьи. Он автор «Code 
Complete» (1993 г.)1, «Rapid Development» (1996 г.) и «Software Project Survi# 
val Guide» (1998 г.). Его книги были дважды удостоены премии Джолта (Jolt 
Excellence Award) журнала Software Development в номинации «Книга года 
в области разработки ПО». В 1998 г. читатели этого журнала назвали Стива 
Макконнелла одним из трех самых влиятельных людей в отрасли ПО наря 
ду с Биллом Гейтсом и Линусом Торвальдом. В 1998–2002 г.г. Макконнелл 
являлся главным редактором журнала IEEE Software. Он вице#председатель 
Комитета профессиональных методик в Компьютерном обществе IEEE 
и входит в комитет экспертов проекта SWEBOK (Software Engineering Body 
of Knowledge, область знаний инженерии ПО). 

Степень бакалавра Макконнелл получил в Колледже Уитмана, а степень 
магистра инженерии ПО – в Университете Сиэттла. Живет в Белльвю, штат 
Вашингтон. 

Если у вас есть замечания или вопросы по этой книге, пишите Стиву 
Макконнеллу на stevemcc@construx.com или свяжитесь с ним через его сайт 
www.stevemcconnell.com. 

Стив Макконнелл «Совершенный код». – Пер. с англ. – СПб.: Питер, 2006. 


О

Оглавление 

Об авторе . . . . . . ..... . . . . . ..... . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . . .6 
Благодарности . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 
Введение . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 

Часть I Смоляная яма программного обеспечения. . . . . . ..... . . 21 

Глава 1 Динозавры в смоляной яме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 
Глава 2 Ложное золото . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 
Перемещение каменных глыб . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 
Каменные глыбы и программное обеспечение. . . . . . . . . . . . . . . . . 30 
Сначала напишем, потом исправим ошибки. . . . . . . . . . . . . . . . . . . . 31 
Ориентир – качество . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34 
Иногда «ложное золото» оказывается серебром . . . . . . . . . . . . . . . 36 
Программное обеспечение – это не пластилин. . . . . . . . . . . . . . . . 38 
К каким выводам приводит существование 
«ложного золота» . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 
Глава 3 «Культ карго» в разработке ПО. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 
Самозванцы от ПО . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 
«Культ карго» в разработке ПО. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 
Суть спора . . . . . ..... . . . . . ..... . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . 44 

Глава 4 Разработка ПО – это не компьютерная наука. . . . . . . . . 46 
«Есть» и «должно быть» . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 
Инженерия и наука. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 
Что стоит за модным словечком?. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 
Правильные вопросы. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 


Оглавление 

Глава 5 

Глава 6 

Часть II 

Глава 7 

Глава 8 

Глава 9 
Глава 10 

Глава 11 

Объем знаний... . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . . . 53 
Суть и случайность . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 
Формирование устойчивого ядра . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 
Область знаний инженерии ПО . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 
Ставим зарубку . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62 

Новый органон . . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . . . 63 
Формирование профессии . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 
В поисках профессии инженерии ПО. . . . . . . . . . . . . . . . . . . . . . . . . . . . 66 
Проход через Геркулесовы столпы. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 

Индивидуальный профессионализм. . . ... . . . ... . . . ... . . .73 

«Предпочтение отдается сиротам» . . . . ..... . . . . . .... . . . . . 75 
Характеристики типа личности по Майерс #Бриггс. . . . . . . . . . . . 76 
Результаты теста MBTI разработчиков ПО. . . . . . . . . . . . . . . . . . . . . . . 77 
Личные качества великих изобретателей. . . . . . . . . . . . . . . . . . . . . . . . 78 
Полная и абсолютная отдача . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 
Демография ПО. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 
Образование. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 
Перспективы занятости . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 
Герои и узурпаторы программирования. . . . . . . . . . . . . . . . . . . . . . . . . 86 
Культ личности .. . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . . . 87 

Формирование сознательного отношения к ПО ... . . . . . 89 
Нет удовлетворения . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 
Возлюби тех, с кемработаешь ... . . . . . ..... . . . . . ..... . . . . . .... . . . . . 92 
Насколько выопытны? .. . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . . . 92 

Формирование сообщества .. . . . . . ..... . . . . . ..... . . . . . .... . . . . . 94 
Архитекторы и строители.. . . . . . ..... . . . . . ..... . . . . . .... . . . . . 98 
Стратификация профессии . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . . . 98 
Специализация функций. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .100 
Специализации в коллективе. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .103 
Время покажет ... . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . .104 

Программист пишущий . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . .105 


Оглавление 

Часть III Организационный профессионализм . . . . . . . . . . . . . . . . . . 109 

Глава 12 Золотая лихорадка ПО . . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... .111 
Золотая лихорадка в ПО . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .112 
Разработка после «лихорадки». . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .113 
Смысл и бессмыслица экономики золотой лихорадки . . . . . .115 
Расширение и сжатие. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .116 
Назад к «золотой лихорадке» . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .117 

Глава 13 Необходимость совершенствования методик 
разработки ПО. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .118 
Состояние на практике. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .119 
Выигрыш от совершенствования практических 
методик разработки ПО. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120 
Показатели ROI для отдельных методик . . . . . . . . . . . . . . . . . . . . . . . .122 
Что дает анализ бюджетирования ПО . . . . . . . . . . . . . . . . . . . . . . . . . . .122 
Косвенный выигрыш от улучшения практических 
методик . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .124 
Взгляд на лучших . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .124 
Суть вызова – организационная. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .125 
Последний великий рубеж . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126 
Десять трудных вопросов . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .127 

Глава 14 Птолемеево мышление . . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... .128 
Обзор подхода SW CMM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129 
Движение вверх. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130 
Все риски,с которыми можно справиться . . . . . ..... . . . . . ..... .132 
Кто применяет SW#CMM? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .133 
Бездушная разработка ПО . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .134 
Серьезная самоотдача . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .135 
Рейтинг организаций. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .136 
Форма и содержание . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .137 

Глава 15 Количественное выражение факторов, 

связанных с персоналом . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139 

Факторы персонала . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .139 

Слабосильные программисты . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .141 

Физические условия . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .142 

Мотивация . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .142 


Оглавление 

Глава 16 

Часть IV 

Глава 17 

Глава 18 

Глава 19 

Опытность персонала ... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . 144 
Что в итоге . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144 

Программа профессионального развития 
фирмы Construx. . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . 145 
Области знанийв Construx . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . .146 
Уровни способностей ... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . 147 
Ступени лестницы профессионального развития . . . . . . . . . . . .149 
Развитие карьеры на основе продвижения по лестнице . . . . 151 
Требования СКА для различных уровней способностей. . . . 153 
Выводы, сделанные по результатам лестницы 
профессионального развития ... . . . . . ..... . . . . . ..... . . . . . .... . . . 157 
Преимущества лестницы профессионального развития . . . .160 
Использование лестницы профессионального 
развития в других компаниях . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161 

Индустриальный профессионализм . . . . . . . . . . . . . . . . . . . 163 

Построение профессии . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . .165 
Необходимость инженерии . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .165 
Искусство иинженерия . . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . .167 
Инженерные дисциплины достигают зрелости . . . . . . . . . . . . . . .169 
Наука для разработки ПО . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . 171 
Зов инженерии. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173 

Школа жизни ... . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . 174 
Подготовка профессиональных инженеров . . . . . . . . . . . . . . . . . . .176 
Первые шаги. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .178 
Аттестация . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .180 
Конструирующие программисты 
илипрограммирующие инженеры? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 
Полировка жетона. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .183 
Некоторые перспективы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .184 

Кому нужны дипломы?. . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . .185 
Сертификация ... . . . . ..... . . . . . ..... . . . . . ..... . . . . . ..... . . . . . .... . . . .185 
Лицензирование. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .186 
Возможно ли лицензирование инженеров ПО . . . . . . . . . . . . . . . .189 
Правильна ли сама идея лицензирования? . . . ..... . . . . . .... . . . 191 
Раскрутка лицензирования . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .194 


Оглавление 

Ваша ставка . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .195 
Как заслужить диплом . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .197 
Три пути. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198 
Вонючие дипломы или стальное колечко? . . . . . . . . . . . . . . . . . . . . . 200 

Глава 20 Кодекс профессионала . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .201 
Кодекс для кодировщиков . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202 
Преимущества этического кодекса поведения . . . . . . . . . . . . . . . . 205 
Достижение совершеннолетия . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 

Глава 21 Алхимия . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208 
Зачем передавать технологиипрактикам . . . . . . ..... . . . . . ..... . 208 
Распространение инноваций . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .210 
Пропасть . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .211 
Несколько жестких вопросов . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .212 
В чем риск? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .213 
Опыт работы представителей на местах по программе 
расширения консультационной деятельности 
в сельском хозяйстве США. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216 
Принижающая роль прогресса . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218 

Библиография . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220 
Алфавитный указатель. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229 


Б

Благодарности 

Хотел бы поблагодарить многих специалистов, приславших свои замеча 
ния по ключевым разделам книги, среди которых Дон Багерт (Don Bagert), 
Джон Бентли (Jon Bentley), Стивен Блэк (Steven Black), Роберт Бернс (Ro# 
bert C. Burns) из компании «Boeing», Тревор Берридж (Trevor Burridge), Ау 
густо Коппола (Augusto Coppola), Алан Корвин (Alan B. Corwin) из «Process 
Builder», Райан Флеминг (Ryan Fleming), Пэт Форман (Pat Forman), Роберт 
Гласс (Robert L. Glass) из «Computing Trends», Дэвид Гудман (David Good 
man), Оуейн Гриффитс (Owain E. Griffiths), Брейди Хонсингер (Bradey 
Honsinger), Ларри Хьюз (Larry M. Hughes) из компании «Sprint», Роберт Ли 
(Robert E. Lee), Эйвонелл Ловхог (Avonelle Lovhaug), Марк Лутц (Mark Lutz), 
Стив Мэттингли (Steve Mattingly), Грант Мак#Лахлин (Grant McLaughlin), 
Брайан Мак Лин (Brian P.McLean), Хэнк Мьюрет (Hank Meuret), Х. Фернан# 
до Наведа (J. Fernando Naveda), Энтон Пэнг (Anthon Pang), Дэвид Парнас 
(David L. Parnas), Мэтт Пелоквин (Matt Peloquin), Том Рид (Tom Reed), Кейти 
Роуд (Kathy Rhode), Стив Ринн (Steve Rinn), У. Пол Роджерс (Wm. Paul Rog# 
ers), Джей Силвермен (Jay Silverman), Андре Синтцофф (Andrй Sintzoff), 
Тим Старри (Tim Starry), Стив Токи (Steve Tockey), Леонард Трипп ( Leonard L. 
Tripp), Том Вентцер (Tom Ventser) из группы «DMR Consulting Group», Карл 
Вигерс (Karl Wiegers) и Грег Уилсон (Greg Wilson). 

Мои благодарности также многочисленным рецензентам, высказав# 
шимся по отдельным конкретным вопросам. 

Особо хочу поблагодарить великолепный коллектив по подготовке 
книги издательства Addison# Wesley: Майка Хендриксона (Mike Hendrick# 
son), Ребекку Гринберг (Rebecca Greenberg), Эйми Флейшер (Amy Fleis 
cher), Кэрин Хансен (Karin Hansen) и Дженис Оуенс (Janis Owens). Рабо# 


Благодарности 

тать с каждым из них одно удовольствие, и книга стала значительно лучше 
в результате их труда. 

Я также высоко ценю опыт сотрудничества при подготовке первого из# 
дания этой книги – «After the Gold Rush». Хотел бы напомнить об огромной 
работе редактора проекта Виктории Тульман (Victoria Thulman) и других 
сотрудников издательства: Бена Райана (Ben Ryan), Роба Нанса (Rob Nan# 
ce), Черил Пеннер (Cheryl Penner) и Полы Горелик (Paula Gorelick). 


В

Введение 

Кажется, что это просто… пока не попробуешь. 

ИЗ ЖУРНАЛА IEEE SOFTWARE1 

Я сидел в самолете, стоявшем на взлетной полосе, когда прозвучало объяв# 
ление капитана: «У нас неполадки в системе кондиционирования самоле 
та. Эта система поддерживает уровень кислорода на борту, поэтому она 
должна заработать раньше, чем мы взлетим. Перезапуск кондиционеров 
не удался, поэтому мы сейчас выключим и снова включим электропита 
ние. Знаете, все эти новые самолеты управляются компьютерами, 
поэтому они не слишком надежны». 

Пилот выключил и снова включил питание – по сути «перезагрузил» 
самолет, и рейс продолжился без происшествий. Нечего и говорить, что 
по окончании воздушного путешествия я с большой радостью вышел из 
самолета. 

Лучшие времена и худшие 

учшие разработчики ПО ведут свои проекты так, чтобы обеспечить Лдостижение целевых показателей качества. Они точно планируют 
сроки сдачи ПО на месяцы и годы вперед. Проекты разработки ПО уклады 
ваются в выделенный бюджет, и производительность таких разработчиков 
постоянно растет. Моральный дух их персонала высок, и клиенты очень 
довольны. 

Из книжного обзора, посвященного [137]. 


Введение 15 


• Телекоммуникационной компании понадобилось изменить около 
3 тысяч строк в базовом ПО объемом примерно в 1000000 строк. 
Изменения были внесены столь тщательно, что через год работы не 
обнаружилось ни одной ошибки. Время, которое потребовалось для 
внесения изменений, включая анализ требований, планирование, 
реализацию и тестирование, составило 9 часов [110]. 
• Группа разработчиков ПО для ВВС США взялась реализовать некий 
проект за год с бюджетом $2 000 000, хотя другие вполне достойные 
разработчики предлагали срок до 2 лет при бюджете до $100 000 000. 
Когда же эта группа сдала ПО на месяц раньше срока, менеджер про 
екта заявил, что успех достигнут за счет методик, известных уже не 
сколько лет, но редко применяемых на практике [49], [131]. 
• Авиастроительная компания разрабатывает ПО для клиентов по фик 
сированной цене, при этом только 3% ее проектов превышают смет# 
ную стоимость; 97% из 100 укладываются в бюджет.1 
• Организация, твердо следующая политике достижения исключи# 
тельного качества ПО, в течение 9 лет добивалась ежегодного сни# 
жения на 39% количества дефектов, обнаруживаемых после выпуска 
версий; итоговое снижение составило 99% [56]. 
Вместе с огромными успехами, примеры которых приведены выше, от 
расль ПО приносит в экономику миллиарды долларов как за счет прямых 
продаж самого ПО, так и в результате повышения эффективности и произ# 
водительности, а также создания продуктов и услуг, которые возможны 
только при использовании соответствующего ПО. 

Методики, необходимые для создания качественного программного 
продукта, известны уже 10, а то и 20 лет. Тем не менее, несмотря на впечат 
ляющие достижения, отрасль ПО не использует весь свой потенциал. Меж 
ду передовыми разработчиками и общей массой существует огромный 
разрыв, а многие широко применяемые методики сильно устарели и не 
обеспечиваются достаточными ресурсами. Эффективность среднего про 
екта ПО оставляет желать лучшего, о чем свидетельствуют многие хорошо 
известные провалы. 

• Налоговая служба США провалила программу модернизации ПО 
стоимостью $8 000 000 000, что обошлось в $50 000 000 000 несоб# 
ранных доходов в год [3]. 
Из разговора с автором. 


16 
Введение 

• Улучшенная АСУ Федерального управления авиации (FAA) превыси# 
ла выделенный бюджет примерно на $3 000 000 000 [17], [53], [48]. 
• Неполадки в системе обработки багажа привели к задержке откры# 
тия международного аэропорта в Денвере более чем на год. Потери 
оцениваются в $1100000 в день [48], [53]. 
• Ракета «Ариан#5» взорвалась при первом пуске из #за ошибки в ПО [99]. 
• Бомбардировщик «Б #2» также не взлетел с первого раза из# за про# 
блем с ПО [44]. 
• Управляемые компьютером паромы в г. Сиэттл (штат Вашингтон) 
около полутора десятка раз врезались в доки, нанеся ущерб на сумму 
свыше $7 000 000. Власти штата рекомендовали выделить более 
$3 000 000 на перевод паромов обратно на ручное управление [98]. 
Подобным ошибкам подвержены и другие проекты. Около четверти 
из них терпят полную неудачу с самого начала [132], [66]. Очень часто к мо 
менту сворачивания проекта выявляется двукратный перерасход бюджета. 
Примерно половина всех проектов либо затягивается, либо превышает 
сметную стоимость, либо обеспечивает меньше функциональных возмож 
ностей, чем предусматривалось [132]. 

Для предприятий такие свернутые проекты означают упущенные воз# 
можности: если бы закрытие проекта обходилось в 10% выделенных 
средств, а не в 200%, нетрудно представить, чего можно было бы добиться, 
просто перенаправив эти ресурсы в проекты, которые были завершены. 

На национальном уровне отмененные проекты представляют собой чу 
довищную и бесполезную трату сил и ресурсов. Грубые подсчеты показы# 
вают, что свернутые проекты ПО обходятся экономике приблизительно 
в $40 000 000 000.1 

1 Этот грубый расчет основан на статистике занятости, представленной в табл. 7.2 
«Структура занятости работников сферы ПО» по должностям ученых компьютер# 
но #информационной отрасли, проводящих исследования; программистов ком# 
пьютерщиков; инженеров прикладного ПО; инженеров системного ПО и анали# 
тиков компьютерных систем. Другие должности в этом анализе не учитывались. 
Итоговые расходы экономики США на разработку ПО рассчитывались путем 
умножения средних совокупных расходов на оплату труда ($95 000) на 1 741 000 
работников этих должностей. Четверть итоговой суммы в $160 000 000 000 
25% – это доля, затраченная на отмененные проекты. В этом анализе может не 
учитываться влияние отмененных проектов, поскольку риск отмены увеличива 
ется с ростом объема проекта, поэтому отмененные проекты могут оказаться 
более дорогостоящими по сравнению со средними расчетами. 


Введение 17 


Но и успешные проекты могут представлять угрозу безопасности и об# 
щественному благополучию. Руководителю проекта в Lotus звонил хирург, 
который использовал электронную таблицу для анализа состояния паци 
ента во время операции на открытом сердце [142]. В журнале «Ньюсвик» 
публиковались фотографии военных, планирующих военные операции 
при помощи Microsoft Excel на своих переносных компьютерах; группа 
технической поддержки Excel принимала телефонные звонки с поля боя 
во время активных военных действий. 

Цель данной книги 

роцесс разработки ПО можно сделать прогнозируемым, контроли Пруемым, экономичным и управляемым. Обычно разработка ПО ве# 
дется иначе, однако есть все возможности делать именно так. Эта книга по 
священа зарождающейся профессии – инженерии ПО (т. е. технологии 
разработки ПО) и практической профессиональной методологии, которая 
обеспечивает экономичное создание высококачественного программно 
го обеспечения. 

В книге обсуждаются следующие вопросы: 

• Что такое инженерия разработки ПО? 
• Как инженерия ПО связана с компьютерной наукой, т. е. с наукой 
о вычислительных системах? 
• Почему обычного программирования недостаточно? 
• Зачем нужна профессия инженерии разработки ПО? 
• Почему инженерия является наилучшей моделью профессиональ 
ной разработки ПО? 
• В чем отличия эффективных методик, используемых в различных 
проектах (или различных компаниях), и какие принципы практиче# 
ски одинаковы? 
• Что могут предпринять организации, чтобы поддержать профес# 
сиональный подход к разработке ПО? 
• Что нужно сделать индивидуальным разработчикам ПО, чтобы стать 
профессионалами? 
• Что могут предпринять представители отрасли разработки ПО в це# 
лом, чтобы создать настоящую профессию «инженерия ПО»? 

18 
Введение 

Структура книги 

М
М
атериал книги постепенно переходит от рассмотрения программи# 
рования как ремесла в его сегодняшнем состоянии к изучению тех 
нологии ПО как профессии, которая может сформироваться в будущем. 

Часть I «Смоляная яма программного обеспечения» содержит рассказ 
о том, как отрасль эволюционировала к своему нынешнему состоянию. 
Этот процесс определялся многими факторами, понимать которые необ 
ходимо, для того чтобы ускорять, а не замедлять наступление перемен, 
призванных сделать успешные проекты ПО повседневной реальностью. 

Часть II «Индивидуальный профессионализм» рассматривает шаги, ко 
торые специалист может сделать самостоятельно для достижения высоко 
го профессионального уровня в разработке ПО. 

Проекты ПО настолько сложны, что многие ключевые факторы невоз# 
можно обсудить на уровне индивидуального разработчика. В части III «Ор# 
ганизационный профессионализм» представлены организационные мето 
дики, необходимые для поддержания более высокого профессионализма 
в программных проектах. Часть IV «Индустриальный профессионализм» 
рассматривает меры, которые должны быть предприняты в масштабе от 
расли, чтобы обеспечить профессиональный подход на индивидуальном 
и организационном уровнях. 

У этой книги есть партнерский сайт, www.construx.com/profession, на ко 
тором размещены материалы, связанные с этой книгой, включая списки 
профессиональной литературы для чтения, планы самообучения, описа 
ние существующих инициатив по сертификации и лицензированию, а так# 
же ссылки на многие другие полезные сайты. 

Что я узнал с 1999 г. 

К 
К 
нига «Профессиональная разработка программного обеспечения» 
представляет собой обновленный и значительно расширенный вари 
ант моей книги, вышедшей в 1999 г. [86]. С 1999 г. я усвоил несколько поло 
жений, которые нашли отражение в моей новой книге. 

• Вопрос лицензирования разработчиков ПО оказался более спор 
ным, чем я ожидал. Я по прежнему считаю, что лицензирование не 
большого количества инженеров# программистов – это важная часть 
защиты жизнедеятельности людей и их безопасности. Я старался 
разъяснить, что лицензирование представляет собой всего лишь 

Введение 19 


одну из множества инициатив, направленных на повышение про 
фессионализма разработчиков ПО, и не самая важная. 

• Образовательную подготовку инженеров#программистов не обяза# 
тельно жестко увязывать с лицензированием. Программы подготов 
ки на младших и выпускных курсах могут быть направлены на фор# 
мирование инженерного склада мышления у разработчиков ПО, 
но при этом не обязательно на их подготовку к получению лицен# 
зии профессионального инженера. Если лицензию в конечном ито# 
ге получат менее 5% разработчиков ПО, что кажется вполне вероят# 
ным, то ориентация большинства программ подготовки и обучения 
на получение обучающимися лицензии представляется неразумной. 
• Мир не рухнул первого января 2000 г., когда считалась актуальной 
угроза масштабных сбоев в работе компьютерных систем (я не ду 
мал, что проблемы, связанные с наступлением 2000 г., будут ката# 
строфическими). Мрачные прогнозы не подтвердились. Более того, 
сама проблема Y2K была в определенном смысле вызвана успешной 
технологией разработки ПО. Она не возникла бы, если бы столь 
многие системы ПО не просуществовали значительно дольше, чем 
предполагалось. 
• Современные разработки ПО действительно во многом впечатляют, 
поэтому любые рассуждения о профессионализации отрасли долж 
ны учитывать ее успехи. Необходима чрезвычайная осторожность, 
чтобы в попытках усилить слабые стороны процесса не отказаться 
от проверенных и успешных методик. 
Кому адресована эта книга 

ем, для кого разработка ПО служит источником средств к сущестF Т вованию, эта книга даст представление о шагах, которые следует пред 
принять, чтобы стать настоящим профессионалом в этой области. 

Менеджеры проектов разработки ПО найдут здесь свод отличитель 
ных особенностей, по которым хорошо управляемые проекты ПО можно 
отличить от проектов, управляемых плохо, а также обзор методов, кото 
рые могут сделать проекты более успешными. 

Руководителям организацийFразработчиков ПО эта книга укажет пре# 
имущества и выгоды системного подхода к разработке ПО, а также дейст# 
вия, необходимые для их реализации. 


20 
Введение 

Студенты, которые хотели бы работать в области создания ПО, по 
знакомятся здесь с основами технологии ПО и получат представление 
о карьере в этой отрасли. 

На пути к профессиональной разработке ПО 

сследователи, специализирующиеся в этой области, давно указывали, Ичто производительность компаний, конкурирующих в одной отрас 
ли, может отличаться более чем в десять раз [91]. Последние исследования 
показали, что разница может достигать и 600 раз [145]. Самые эффектив 
ные компании действительно процветают. 

Выгоды формирования настоящей профессии разработчика ПО весьма 
убедительны. Согласно традиционным воззрениям, наибольший риск пред 
ставляют перемены. Если же говорить о программном обеспечении, то наи# 
больший риск представляет как раз их отсутствие и погружение в болото 
порочных, экстравагантных технологий разработки ПО вместо принятия 
методов, давно уже доказавших свою практическую эффективность. 

Как реализовать такой переход? Это и есть главная тема книги. 

– Белльвю, штат Вашингтон. 
День Поминовения, 2003 г. 

Смоляная яма 
программного 
обеспечения 
ЧАСТЬ ПЕРВАЯ 
Смоляная яма 
программного 
обеспечения 
ЧАСТЬ ПЕРВАЯ 

ГЛАВА ПЕРВАЯ

D

Динозавры 
в смоляной яме 

Тот, кто не хочет прибегать к новым средствам, 
должен ожидать новых бед. 

ФРЕНСИС БЭКОН 

Фредерик Брукс еще в 1975 г. сравнил разработку крупных систем про# 
граммного обеспечения с борьбой динозавров, мамонтов и саблезубых 
тигров с засасывающей липкой смолой в яме [21], предсказав на долгие го 
ды вперед сохранение подобной ситуации в проектировании и разработ 
ке ПО, когда одну ногу можно освободить, только завязнув другой ногой. 

Проблемы, которые Брукс выявил почти тридцать лет назад, уже тогда 
не были новы, так что у разработчиков ПО было более четверти века, что 
бы поработать над ними. Так далеко ли удалось продвинуться с тех пор? 

Многие проблемы, буквально преследующие почти любой проект раз# 
работки ПО, практически не изменились. К примеру, вопрос сроков выпол# 
нения остается типичным и для проектов сегодняшних дней. По некото# 
рым оценкам примерно 75% средних и свыше 90% крупных проектов ПО 
сталкиваются с проблемами жестких сроков.1 При этом сверхурочные пе# 
реработки программистов являются скорее правилом, чем исключением.2 
Хорошо известно, что современные зарождающиеся предприятия, рабо# 
тающие в области ПО, ожидают от своих сотрудников значительной 
сверхурочной работы, а рассказы о программистах, засыпающих ночью 

1 Данные о статистике напряженности в связи со сроками выполнения взяты из ра 

боты [64]. Данные о типичном соблюдении сроков сдачи проектов ПО имеются 

в работах [64], [66], [132]. 
2 Этот вопрос подробно обсуждается в книге автора [83]. 


24 
ГЛАВА 1 

за своими дисплеями, можно услышать почти всюду [18]. Однако еще в се 
редине 60 #х годов XX века в одном из исследований утверждалось, что 
«многие программисты, не укладываясь в сжатые сроки, просиживают но 
чи на рабочих местах» [22]. В 1975 г. Фредерик Брукс указывал, что «из за 
нарушения сроков исполнения срывается куда больше проектов, чем в си 
лу всех остальных причин вместе взятых» [19]. Так что превышение сроков 
исполнения проектов наблюдается уже более тридцати лет, а если учесть, 
что люди нетерпеливы по природе, то и значительно дольше. 

Размах сегодняшних проектов ПО кажется беспрецедентным, что, разу# 
меется, наталкивает их создателей на мысль, что никто и никогда не стал 
кивался с проблемами подобного масштаба. Тем не менее даже у гигант 
ских проектов, вроде Windows NT, были предшественники. Объемы совре# 
менных крупных проектов разработки ПО действительно впечатляют, 
причем каждый разработчик естественно полагает, что он первый берется 
за столь масштабный проект. Однако, как я уже сказал, прецеденты сущест# 
вовали и ранее. Например, первоначальный проект Windows NT потребо 
вал около полутора тысяч человеко #лет трудозатрат,1 однако разработка 
OS/360 фирмы IBM, завершенная в 1966 г., оказалась в три раза более тру 
доемкой.2 

Данные последних исследований показывают, что наиболее часто 
встречающиеся причины неудач проектов по разработке ПО связаны 
с проблемами их соответствия заданным техническим условиям, которые 
выстраивают неверную систему. Эти требования слишком размыты, чтобы 
их можно было точно реализовать, а некоторые из них меняются настоль 
ко часто, что вносят полнейшую неразбериху в системный проект [24], 
[132]. Но все же проблемы с соответствием требованиям также далеко не 
новы. Еще в 1969 г. Роберт Фрош (Robert Frosch) заметил, что система «мо# 
жет удовлетворять букве технических условий, но тем не менее не являться 
целиком и полностью удовлетворительной» [47]. 

Большинство разработчиков ломают голову, пытаясь поспеть за стре 
мительными изменениями, которые происходят благодаря развитию Ин 
тернета. Как угнаться за новыми языками, меняющимися стандартами 
и предложениями новых программных продуктов? Для тех, кто работает 

1 

Это примерная сумма. Оценка основана на опубликованных данных о стоимос 
ти разработки Windows NT ($150 000 000) и совокупных расходах на оплату тру# 
да в $100 000 на человека в год [146]. 

2 

Трудозатраты составили примерно 5000 человеко месяцев [19]. 


Динозавры в смоляной яме 

в сфере программирования уже пару десятков лет, нынешняя ситуация ка 
жется очень похожей на ту, что была в середине 80 #х годов прошлого века, 
когда пришествие персональных компьютеров IBM полностью изменило 
использование вычислительных машин в компаниях. 

Во времена разработки языка программирования FORTRAN в 1954– 
1958 гг. предполагалось, что он устранит сложность программирования 
компьютеров: ученые и инженеры просто вводили бы свои формулы в 
компьютер, а тот транслировал бы их в машинный код; отсюда и название 
FORTRAN – FORmula TRANslation (ТРАНслятор ФОРмул). Но, разумеется, 
FORTRAN не исключил программирование, а лишь сократил его объем на 
машинном языке. Время от времени появляются многообещающие заявле# 
ния о возможности автоматизации программирования [118]. Компьютеры 
станут настолько «умными», что нужда в программистах и вовсе отпадет. 
Однако эта пластинка уже была заезжена более 35 лет назад, когда Джин 
Билински подметил, что «описание бизнесмена, бодро общающегося со 
своим всемогущим компьютером на обычном языке, регулярно появляет 
ся в прессе» [22]. Реальность же заключается в том, что подробное до мело 
чей описание проблемы – задача весьма трудная, и эта сторона програм 
мирования никуда не уйдет. Новые инструменты полезны, но они не заме 
няют ясность мышления. Я написал об этом в 1996 г. в своей книге «Rapid 
Development» [83], однако Роберт Фрош уже утверждал то же самое в изда# 
нии IEEE Spectrum 30 лет назад. 

Если говорить о разработке ПО в эпоху Интернета., то он дает возмож 
ность его создателям легко распространять обновленные версии своих 
программ. Пользователи могут загружать обновления программ в элект# 
ронном виде без необходимости копирования их на компакт#диски CD 
или DVD – доставка быстро и недорого. В свою очередь, это увеличивает 
давление на разработчиков, чтобы те чаще выпускали обновления про 
грамм в ответ на требования пользователей. Интернет#разработчики ут# 
верждают, что пользователи просто хотят скорее получить ПО, нежели об 
рести его безукоризненную версию. У интернет разработчиков в ходу по 
говорка: «Лучше быть первым, чем правым». 

Насколько действительно беспрецедентна эта ситуация? Некоторые 
интернет# разработчики считают, что такая динамичность уникальна имен 
но для веб проектов, но ветеранам отрасли программирования известно: 
низкая стоимость распространения ПО, легкость внесения исправлений, 
невысокие потери в случае неудач – все это сильно смахивает на произ# 


26 
ГЛАВА 1 

водственную среду разработки ПО своими силами для компьютеров кол# 
лективного пользования. 

Эти тенденции, сложившиеся за 25 лет истории разработки ПО, явля# 
ются источником и радости, и понимания того факта, что некоторые про# 
блемы существуют уже четверть века и достаточно распространены. Мы 
действительно увязли в этой смоляной яме слишком давно, но повод для 
оптимизма все же есть: достаточно долго имея дело с одними и теми же 
проблемами, мы можем понять их сущность, и, как я намерен показать 
в этой книге, похоже, что мы находимся на пути их решения. 


ГЛАВА ВТОРАЯ

Л

Ложное золото 

Надежда хороша на завтрак, но не годится на ужин. 

ФРЕНСИС БЭКОН 

Проблемы с ПО сохраняются частично в силу завораживающей притяга# 
тельности нескольких неэффективных практических подходов. Во вре# 
мена Калифорнийской «золотой лихорадки» в конце 40# х – начале 50 х го 
дов XIX века некоторых золотоискателей обманывало «ложное золото» – 
пирит железа, который блестит и сияет, как настоящее золото. Однако, 
в отличие от настоящего, «ложное» золото – вещество хрупкое, слоистое, 
ломкое и почти ничего не стоит. Опытным золотодобытчикам хорошо из# 
вестно, что настоящее золото мягкое, пластичное и не крошится под дав 
лением. Уже 50 лет разработчики ПО поддаются соблазну своего «ложного 
золота». Негодные практические методы имеют соблазнительную привле# 
кательность, но оказываются «ложным золотом», и, как и пирит железа, 
они хрупкие, ломкие и практически ничего не стоят. 

Перемещение каменных глыб 

аглянем еще дальше в историю, на много веков, задолго до Калифор# Знийской «золотой лихорадки», и предположим, что вы строите одну 
из древних пирамид. Перед вами стоит задача: переместить огромную ка 
менную глыбу на 10 км от реки на место строительства, как показано 
на рис. 2.1. У вас есть 20 человек и 100 дней, чтобы переместить этот камень. 

Вам разрешено пользоваться любым методом, чтобы камень оказался 
на нужном месте. Нужно каждый день передвигать камень на 100 метров 


28 
ГЛАВА 2 

к строящейся пирамиде, в противном случае придется изобрести что# ни 
будь, сокращающее срок, необходимый для преодоления оставшегося рас# 
стояния. 


Рис. 2.1. На проект разработки ПО можно смотреть как на перемещение 
тяжелой каменной глыбы. Нужно либо передвигать камень каждый день ближе 
к конечному пункту, либо попытаться придумать нечто, позволяющее сокраF 
тить на один день срок, необходимый для преодоления оставшегося расстояния 

Некоторые бригады «передвижников» сразу бы взялись толкать камень, 
прилагая грубую силу. Этот способ мог бы быть эффективным в случае не# 
большого камня. Но если крупная каменная глыба покоится на песчаной 
поверхности пустыни, ее вряд ли удастся передвигать таким способом бо 
лее#менее быстро, если она вообще поддастся усилиям рабочих. Если глы 
ба перемещается на десять метров в день, то можно считать удовлетвори# 
тельным результатом, что она вообще приближается к конечному пункту, 
но при этом каждый день бригада отстает на 90 метров. «Продвижение» 
не всегда означает достаточный прогресс. 

Бригада рабочих посообразительней не стала бы сразу приниматься 
за толкание глыбы. Лишь очень небольшие камни поддаются воздействию 
грубой силы. Если камень крупный, надо потратить некоторое время на пла# 
нирование перемещения и только потом прикладывать мускульные усилия. 
Подумав над задачей, такие рабочие могли бы спилить несколько деревьев 
и использовать их как катки (рис. 2.2). На это ушло бы день#два, но очень 
возможно, что приспособление ускорило бы передвижение глыбы. 

Но если деревьев рядом нет и надо потратить несколько дней, чтобы 
поискать их вдоль реки? Вероятно, прогулка вдоль реки – штука достаточ 


Ложное золото 

но полезная, поскольку бригада, намеревающаяся применить грубую силу, 
сможет передвигать глыбу лишь на малую часть того расстояния, которое 
требуется преодолевать каждый день. 


Рис. 2.2. Передвигая каменную глыбу или создавая компьютерное ПО, рассудиF 
тельные работники спланируют работу, чтобы она шла споро и эффективно 

Рассуждая аналогичным образом, можно также предположить, что со 
образительная бригада решит каким то образом подготовить путь, по ко 
торому она будет перемещать глыбу. Эти рабочие не будут катить груз 
по песку, а проложат дорогу, что будет особенно полезно, если надо пере# 
местить не одну, а несколько глыб. 

По #настоящему изобретательная бригада, начав с катков и подготовки 
дороги, в конечном итоге сообразит, что если в качестве катков использу# 
ется лишь минимальное количество деревьев, то приходится слишком 
часто останавливаться, чтобы перенести вперед задний каток, освобож 
дающийся при продвижении глыбы. Если запастись несколькими лишни 
ми катками и выделить рабочих для их переноски, то бригада сможет луч# 
ше поддерживать скорость движения. 

Они также могут понять, что количество рабочих, которые могут раз# 
меститься у основания глыбы, чтобы толкать ее, ограничено. Поэтому 
можно тянуть глыбу при помощи лямок, одновременно толкая ее, как по 
казано на рис. 2.3. Поскольку усилие распределяется на большее количест# 
во рабочих, нагрузка на каждого из них уменьшается, и быстрый шаг на са# 
мом деле оказывается более приемлемым, чем медленный. 


30 
ГЛАВА 2 


Рис. 2.3. Творческие коллективы постоянно ищут пути повышения 
эффективности работы 

Каменные глыбы и программное обеспечение 

аким образом связаны каменные глыбы и ПО? Перемещение камен К ной глыбы сродни написанию исходного кода программы. Если на 
завершение проекта ПО отведено 100 дней, то надо либо писать одну со 
тую программы ежедневно, либо предпринять что#то, что позволит уско 
рить написание оставшейся части программы. Поскольку написание про 
грамм значительно менее осязаемо, чем перемещение каменной глыбы, 
продвижение в начале проекта разработки ПО оценить труднее. Для про 
ектов ПО характерен «синдром последней минуты»: программисты слабо 
чувствуют срочность работы в начале проекта, без толку теряя целые дни, 
и вынуждены отчаянно торопиться в конце. Представив себе написание 
исходной программы как перемещение каменной глыбы, нетрудно по 
нять, что нельзя успешно выполнить проект за счет отчаянного финишно 
го рывка. Каждый день менеджер проекта должен спрашивать: «Приблизи# 
лась ли сегодня глыба на один день к конечному пункту? Если нет, то со 
кратился ли объем работ на один день?» 

Еще один аспект, в котором усматривается связь между передвижением 
глыбы и разработкой ПО, состоит в том, что в конечном итоге, сколько бы 
вы ни планировали работу, вы должны передвигать глыбу, то есть писать 
программу. Написание исходного кода во всех проектах, за исключением 


Ложное золото 

совсем крошечных, предусматривает проработку множества деталей, и этот 
факт легко недооценить. 

Сначала напишем, потом исправим ошибки 

з всех ошибок, допускаемых при разработке ПО, самая распростра Иненная – это, безусловно, недостаточное внимание, уделяемое изго 
товлению катков и подготовке дороги. Почти 75% коллективов разработ 
чиков начинают работу, налетая на глыбу и пытаясь подвинуть ее при по 
мощи грубой силы.1 Такой подход – сразу хвататься за написание про 
грамм, не позаботившись о планировании и проектировании – получил 
наименование «напишем и исправим». Иногда к этому подходу прибегают 
из #за того, что у программистов руки чешутся немедленно начать про# 
граммировать. Иногда же дело в том, что руководству или заказчикам не 
терпится увидеть реальные проявления прогресса. Разработка по принци 
пу «напишем и исправим» неэффективна во всех проектах, за исключени 
ем самых мелких. 

Этот подход, как и попытка передвинуть глыбу грубой силой, нехорош 
тем, что быстрый старт не обязательно переходит в быстрое продвижение 
к финишу. Коллективы, практикующие более сложные подходы, формиру# 
ют структуру, позволяющую проекту выйти на высокий уровень произво# 
дительности и эффективно завершить его. Подкладывая катки под глыбу, 
расчищая дорогу и подготавливая четкое целенаправленное приложение 
усилий работников, можно создать такую структуру. Подход по принципу 
«напишем и исправим» подразумевает быстрое начало движения глыбы, 
но не обеспечивает ее достаточное перемещение каждый день, а приложе# 
ние грубой силы не дает приемлемого результата. Обычно это приводит 
к сотням и тысячам ошибок уже на ранних этапах проекта. По результатам 
некоторых исследований, от 40 до 80% бюджета типичного проекта ПО 
расходуется на исправление дефектов, которые появились в нем ранее 
[13], [44], [63], [91], [140]. 

На рис. 2.4 показано, как постепенно снижается производительность 
в проекте, реализуемом по принципу «напишем и исправим». В начале 

Этот средний процент основывается на количестве проектов ПО в соответствии 
с моделью зрелости процессов создания ПО (Capability Maturity Model for Soft 
ware – SW #CMM) уровня 1. В главе 14 эти статистические данные обсуждаются 
более подробно. 


32 
ГЛАВА 2 

проекта прилагаются небольшие усилия (или вообще не прилагаются) 
в части планирования и управления процессом. Небольшую часть состав 
ляют непроизводительные затраты («пробуксовка»), но основное время 
посвящено программированию. По мере продвижения проекта к концу 
исправление дефектов становится все более существенной частью. 

100% 
Суета (незапланированные 
переделки и другие бесполезные работы) 

Процент 
затраченных 
усилий 

Планирование 
и управление процессом 
0% 

Видимое продвижение 
(написание программ) 
Время 


Здесь завершаются Неудачные проекты 
удачные проекты застревают в этой зоне 

Рис. 2.4. При использовании подхода «напишем и исправим» удачные проекты 
завершаются, когда от них еще можно получить небольшие «порции» производиF 
тельной работы. Неудачные проекты застревают в области, где все 100% 
усилий направлены на переработку, планирование и управление процессом. 
Источник: [84] 

Согласно рис. 2.4 удачные проекты, выполняемые по принципу «напи 
шем и исправим» доводятся до конца, но процесс выдачи небольших пор# 
ций программы продолжается. Неудачные проекты застревают на стадии, 
когда 100% усилий уходят на планирование, управление процессом и бес 
полезную переделку, а программирование не продвигается. Если усилия по 
планированию не были предприняты заранее, то написанные программы 
рассыпаются вдребезги. Некоторые из таких проектов еще можно спасти, 
если подтолкнуть коллектив разработчиков достаточно далеко (влево по 
диаграмме), чтобы удалось выдать приемлемый продукт. Остальные про 
екты в конечном итоге сворачиваются. 

Эта печальная картина вовсе не преувеличение. В нескольких исследо 
ваниях утверждается, что около 25% всех проектов разработки ПО в ко# 
нечном итоге просто отменяются [62], [64], [132]. На момент сворачивания 


Ложное золото 

такой проект наверняка превысил выделенный бюджет, а его участники 
погрязли в бесконечном отыскивании ошибок, тестировании и передел# 
ках. Причины закрытия проекта в том, что проблемы с качеством кажутся 
непреодолимыми [64]. 

Ирония этой ситуации заключается в том, что при проведении этих не# 
удачных проектов в конечном итоге приходится затрачивать столько же 
усилий на планирование процесса и управление им, сколько и в удачных 
проектах. Приходится организовывать процесс отслеживания дефектов, 
чтобы исправить все обнаруженные ошибки. По мере приближения даты 
сдачи ПО проводится более тщательная оценка. К концу проекта коллек 
тив разработчиков может проводить переоценки чуть ли не каждую неделю 
или даже каждый день. Определенные усилия и время тратятся на то, чтобы 
убедить заказчиков и заинтересованные стороны в том, что ПО в конце 
концов будет сдано. Не исключается отслеживание дефектов и внедрение 
стандартов отладки участков программы до их окончательной интеграции 
с уже отлаженными фрагментами. Но поскольку такая практика часто реа# 
лизуется на поздних стадиях проекта, ее преимущества удается использо 
вать лишь в небольшой части всей работы. 

Тем не менее методы, применяемые в неудачных проектах, отличаются 
от тех, что были бы выбраны при более эффективной организации на ран# 
них стадиях проекта. А многие практические меры, предпринимаемые 
в первом случае, оказываются ненужными, если управление проектом с са 
мого начала организовано более разумно. 

Как показывает рис. 2.5, самые продвинутые фирмы – те, что произво 
дят самые надежные программные продукты при наименьшей стоимости 
и в кратчайшие сроки – тратят относительно небольшую часть бюджета 
на стадии непосредственного создания ПО. Те, кто демонстрирует наи 
меньшую изобретательность, тратят почти весь свой бюджет на програм# 
мирование и исправление ошибок в программах. Поэтому совокупные 
бюджеты таких коллективов значительно выше, поскольку не закладыва# 
ется основа для эффективной работы. (В главе 14 мы вернемся к этому 
вопросу.) 

Разработка по принципу «напишем и исправим» продолжает приме# 
няться, потому что такой подход привлекателен по двум причинам. Во# 
первых, это позволяет коллективу разработчиков немедленно увидеть про 
движение: можно начать с передвижения глыбы на 10 метров в первый 
день, пока более разумный коллектив пилит деревья для катков, ровняет 
дорогу для надежного движения и еще не сделал никаких видимых дости 


34 
ГЛАВА 2 

Относительный 
объем усилий 

Типичный проект 
(патологический) 
Продвинутый проект 
(доброкачественный) 


Анализ Архитектура Детальное Создание ПО Тестирование 
требований проектирование и отладка 

Рис. 2.5. Развитые методики разработки ПО предусматривают больше усилий 
на ранних стадиях проекта с целью избавиться от избыточных работ на более 

поздних стадиях1 

жений в перемещении глыбы. Если менеджеры и заказчики не слишком 
разбираются в сложностях динамики успешного проекта, то подход «на 
пишем и исправим» выглядит очень привлекательным. Второй аспект при 
влекательности этого подхода состоит в том, что не требуется никакого 
обучения. В отрасли, где средний уровень подготовленности в проектиро# 
вании ПО достаточно невысок, этот метод принимался как самый распро 
страненный по умолчанию. 

Принцип «напишем и исправим» – одна из форм «ложного золота» 
в ПО. На первый взгляд он кажется заманчивым, но опытные разработчики 
ПО понимают его бесперспективность. 

1 

Характеристика «развитого проекта» основана на работах, выполненных Лабо 
раторией проектирования ПО НАСА. Описание «типичного проекта» составлено 
на основе данных о проектах, собранных автором во время его работы в качестве 
консультанта, и соотносятся с данными из работы [66] и из других источников. 


Ложное золото 

Ориентир – качество 

ожно предположить, что сроки выполнения проекта ПО удастся со Мкратить, если тратить меньше времени на тестирование или техниче# 
ские экспертизы. Приверженцы принципа «напишем и исправим» в созда 
нии ПО утверждают: «Накладные расходы бесполезны». Отраслевой опыт 
свидетельствует об обратном. Попытка разменять качество на расходы или 
сроки реально приводит к увеличению расходов и удлинению сроков. 

Это область только критически 

Объем 
усилий 
проекта 


важных или критических 
по применению проектов 
Это область наиболее 
эффективных проектов 
Это область средней организации 
разработки ПО (около 85%) 
Около 95% 100% 
Процент дефектов, устраняемых до выпуска ПО 

Рис. 2.6. До определенного момента проекты, в которых добиваются наименьF 
шего числа дефектов, также могут уложиться в самые короткие сроки. В больF 
шинстве проектов можно сократить сроки, устраняя дефекты на более ранних 
стадиях работы. Данные взяты из [67] 

Как показано на рис. 2.6, проекты, в которых примерно 95% дефектов 
удается устранить до выпуска ПО, оказываются наиболее продуктивными 
и меньше всего времени при их реализации тратится на исправление соб 
ственных ошибок. В таких проектах следует приложить больше усилий 
для повышения качества. Там, где такие показатели не достигаются, можно 
повысить эффективность за счет устранения большего количества дефек# 
тов на ранней стадии разработки. В эту категорию в настоящее время по 
падают примерно 75% проектов ПО. Для них попытка обменять качество 
на снижение расходов и сокращение сроков является еще одним примером 
«ложного золота». Это также можно рассматривать как пример уже извест 
ной динамики развития проектов ПО. Фирма IBM еще лет 25 назад обнару 


36 
ГЛАВА 2 

жила, что в проектах, концентрирующих свои усилия на минимизации 
сроков, часто превышаются и сроки, и расходы. А там, где усилия фокуси 
руются на минимизации количества дефектов, достигаются кратчайшие 
сроки и наивысшая производительность работ [63]. 

Иногда «ложное золото» оказывается серебром 

ехнологии и методологии, которые увязываются с утверждениями Т о сногсшибательной производительности, часто называют «серебря 
ными пулями», поскольку предполагается, что они сразят низкую произво 
дительность, как серебряная пуля бьет наповал оборотней [20]. Десятиле 
тиями отрасль ПО бомбардировали заявлениями, что технология «фикс» 
кардинально ускоряет процесс разработки. В 60 х годах прошлого века 
это было программирование в диалоговом режиме, затем в 70 х годах его 
сменили языки программирования третьего поколения, а в 80 е годы по 
добные обещания давали проповедники искусственного интеллекта и ин 
струментария CASE. В 90 #е годы объектно #ориентированное программи 
рование преподносилось как очередная панацея. А в начале XXI века на эту 
роль была выдвинута интернет# разработка ПО. 

Предположим, что попытки «передвинуть каменную глыбу» начинают# 
ся с применения силы. Через несколько дней руководитель группы начина 
ет понимать, что дело идет слишком медленно и выполнить задачи проекта 
не удастся. К счастью, ему приходилось слышать о чудесном животном, 
именуемом «слон». Слоны достигают веса, в 100 раз превосходящего вес 
взрослого человека, и обладают огромной силой. Руководитель группы 
снаряжает экспедицию, поставив перед ней задачу отловить слона. После 
трехнедельного сафари экспедиция приводит слона. Могучее животное за 
прягают в лямку, чтобы оно тянуло глыбу, и щелкают хлыстом. Работники, 
затаив дыхание, следят, насколько быстро слон сможет тащить глыбу. Мо 
жет быть, удастся доставить глыбу к месту строительства даже раньше за 
планированного срока! Под их напряженными взглядами слон начинает 
тянуть глыбу вперед намного быстрее, чем это когда либо удавалось лю# 
дям. Но внезапно слон встает на дыбы, рвет упряжь и, раздавив двух работ 
ников, убегает со скоростью 40 км/час, только его и видели (рис. 2.7). Люди 
в отчаянии. Им приходит в голову, что, наверное, надо было научиться 
управлять слоном, прежде чем начинать реальную работу с его участием. 
Тем временем на поиски слона затрачено более 20% выделенного на про 
ект времени, два их товарища погибли, а приблизиться к цели не удалось. 


Ложное золото 


Рис. 2.7. Инновации типа «серебряной пули» часто не оправдывают ожиданий 

Это и есть суть синдрома «волшебной серебряной пули». 

Аналогия со слоном точнее, чем может показаться. В работе [53] Роберт 
Л. Гласс (Robert L. Glass) описал 16 проблемных проектов разработки ПО. 
От четырех из описанных им проектов ожидался прорыв в достижении ус 
пеха, поскольку применялись инновационные технологии типа «серебря 
ной пули». Вместо ошеломляющего успеха последовал провал, причем 
именно из за этих инноваций. 

Особый тип «серебряной пули» получается в результате небрежной 
реализации методик повышения эффективности организационных про# 
цессов. В некоторых фирмах организационные инновации пытаются вне# 
дрить с помощью слов# заклинаний, таких как комплексное управление ка 
чеством (Total Quality management – TQM), технология развертывания 
функций качества (Quality Function Deployment – QFD), модель зрелости 
процессов создания ПО (Capability Maturity Model for Software – SW #CMM), 
«нулевой дефект», «шесть сигма», «непрерывное совершенствование», «ста# 
тистический контроль процессов». Все эти методики полезны при надле 
жащем применении и практическом внедрении по сути, а не просто по 
форме. Если же им отвести роль заклинаний, все они станут никчемными. 
В некоторых фирмах за год успевают пройти полный цикл их примене# 
ния, как будто ритуальные заклинания и повторение магических слов, сви# 
детельствующие об увлечении менеджментом, могут повысить качество и 


38 
ГЛАВА 2 

производительность. Фирмам, где придерживаются такой практики, в аду 
низкой производительности отведено особое место. После нескольких 
лет управления посредством заклинаний сотрудники относятся презри 
тельно к любым организационным инновациям в целом, что усложняет 
отказ от разработки по принципу «напишем и исправим». 

Правильно выбранные инновационные методы в подходящем проекте, 
сопровождаемые соответствующим обучением и внедряемые с учетом 
реалистичных ожиданий, могут дать огромные выгоды, если им придается 
статус долгосрочной стратегии. Но последние нововведения не обладают 
волшебными свойствами, и их не так легко внедрить. Если от таких ново 
введений ждут мгновенной выгоды, то они становятся «ложным золотом». 

Программное обеспечение – это не пластилин 

ще один вид «ложного золота» – это убеждение, что ПО представляет Есобой «мягкий» объект, в отличие от оборудования, которое изменить 
трудно. Изначально ПО было названо «мягким» (software), потому что его 
было легко изменить. Для очень небольших программ на заре программи# 
рования это, возможно, так и было. Но по мере усложнения систем ПО 
представление о программах как о легко изменяемом объекте стало одним 
из самых пагубных заблуждений в их разработке. 

Согласно некоторым исследованиям, изменение технических требова 
ний (попытка воспользоваться предполагаемой «мягкостью» ПО) – это са 
мый распространенный или один из самых распространенных источни# 
ков превышения бюджета и сроков [64], [79], [132], [138] и один из важней# 
ших факторов отмены проектов. В некоторых случаях изменения в резуль 
тате «ползучести» требований могут настолько «раскачать» продукт, что 
его невозможно завершить вообще [64]. 

Приведем простой пример, доказывающий, что ПО не так легко изме 
нить, как представляется многим. Пусть требуется спроектировать систе# 
му, которая первоначально будет распечатывать набор из пяти отчетов, 
а в конечном итоге должна выдавать 10 отчетов. Есть несколько аспектов 
гибкости («мягкости»), которые должны быть приняты во внимание: 

• Число десять – это абсолютный предел количества выдаваемых от 
четов? 
• Будут ли последующие отчеты аналогичны первым пяти? 
• Всегда ли будут распечатываться все отчеты? 
• Всегда ли отчеты будут распечатываться в одном и том же порядке? 

Ложное золото 

• До какой степени пользователь сможет настраивать для себя отчеты? 
• Сможет ли пользователь формировать свои собственные отчеты? 
• Можно ли будет настраивать и задавать отчеты по ходу работы? 
• Будут ли отчеты переводиться на другие языки? 
Как бы тщательно ни разрабатывалось ПО, всегда будет существовать 
точка, где ПО уже нельзя будет легко изменить. В рассматриваемом случае 
системы отчетов любое из следующих требований может оказаться жест# 
ким: 

• Задание более десяти отчетов. 
• Задание нового отчета, отличного от начального набора из пяти от 
четов. 
• Распечатка подмножества отчетов. 
• Распечатка отчетов в задаваемом пользователем порядке. 
• Возможность для пользователя настраивать отчеты. 
• Возможность для пользователя формировать полностью собствен# 
ный отчет. 
• Перевод отчетов на другой язык, основанный на латинском алфавите. 
• Перевод отчетов на другой язык, основанный на нелатинском алфа# 
вите, или язык с порядком чтения справа налево. 
Этот пример любопытен тем, что автор мог бы задать множество во 
просов о «гибкости» этих отчетов, не зная ровным счетом ничего конкрет# 
ного о них или даже о системе, в которой они будут распечатываться. Зная 
просто о существовании «неких отчетов», можно поднять много общих 
вопросов о различной степени гибкости системы. 

Было бы соблазнительно утверждать, что разработчики должны всегда 
предусматривать максимальную гибкость своего ПО, но гибкость может 
меняться почти бесконечно и обходится в немалые суммы. Если пользова 
телю надо, чтобы пять отформатированных отчетов всегда печатались 
вместе, в одном порядке и на одном языке, то разработчику не следует кон 
струировать развитое программное средство (утилиту) для создания на 
страиваемых отчетов. Такой продукт может легко оказаться в 100–1000 раз 
дороже, чем обеспечение основных простых функциональных возможно 
стей, реально необходимых пользователю. Пользователь же (или клиент, 
менеджер) должен оказать помощь разработчикам ПО при определении 
требуемой адаптируемости. 

За гибкость надо платить в данный конкретный момент. Ее ограниче# 
ние сэкономит средства именно в данный момент, но если ее понадобится 


40 
ГЛАВА 2 

обеспечить в будущем, то она обойдется дороже в разы. Трудность инже 
нерного решения заключается в соотнесении известных на данный мо 
мент требований и возможных будущих потребностей и определении сте# 
пени гибкости или жесткости при создании продукта. 

К каким выводам приводит 
существование «ложного золота» 

заключение приведем несколько «мягких» утверждений, которые мож# Вно было бы назвать самоочевидными (или же которые становятся 
очевидными при ближайшем рассмотрении): 

• Для успеха проекта ПО нельзя начинать написание исходной про 
граммы на слишком ранней стадии. 
• Нельзя жертвовать контролем количества дефектов ради стоимости 
или сроков проекта, если только речь не идет о критически важных 
системах. Держите количество дефектов в центре внимания; стои 
мость и сроки приложатся. 
• Магические спасительные средства типа «волшебной серебряной 
пули» вредны для проекта, хотя практика показывает, что их постав 
щики будут утверждать обратное. 
• Небрежная модификация технологии является особенно губитель 
ной «серебряной пулей», поскольку подрывает дальнейшие попытки 
усовершенствовать процесс разработки. 
• Несмотря на представление о ПО как о гибком предмете, оно тако# 
вым не является, если только не было изначально разработано гиб# 
ким, а создание гибкого ПО стоит дорого. 
Чтобы извлечь эти уроки, у мира программного обеспечения было 
50 лет. Наиболее успешные личности и организации восприняли их очень 
серьезно. Научиться постоянно сопротивляться соблазну «ложного золо# 
та» – это один из первых шагов, которые должна сделать отрасль ПО на пу 
ти к формированию настоящей профессии разработчика ПО. 


ГЛАВА ТРЕТЬЯ

К

«Культ карго» 
вразработке ПО 

У народностей, населяющих регионы южных морей, бытует 
«культ карго». В войну к ним прилетали самолеты с массой 
полезных вещей. Теперь люди хотят, чтобы так было опять. 
Поэтому они устраивают некое подобие взлетно1посадочной 
полосы, вдоль нее разжигают костры, строят будку, в которой 
сидит человек, изображающий диспетчера (с деревяшками 
вместо наушников и бамбуковыми палочками1антеннами), 
и ждут приземления самолета. Они все делают как нужно. 
По форме все правильно. Все выглядит так, как было раньше. 
Вот только самолеты не приземляются. Я называю такие вещи 
наукой «культа карго»: соблюдаются все внешние признаки 
и рецепты научного исследования, но нет чего1то очень важного, 
потому что самолеты так и не приземляются. 

РИЧАРД ФЕЙНМАН, 
лауреат Нобелевской премии по физике [61] 

Полезно различать два разных стиля разработки ПО, а именно: стиль, ори 
ентированный на процесс, и стиль, ориентированный на энтузиазм (геро 
изм) личности. Первый направлен на достижение результата посредством 
тщательного планирования детально прописанных процессов, эффектив 
ного использования выделенного времени и продуманного внедрения 
лучших методов разработки ПО. Этот подход ведет к успеху, поскольку его 
применение заставляет фирму совершенствовать свои методы. Даже если 
первые попытки не слишком эффективны, постоянное внимание к про# 
цессу разработки означает, что каждая последующая попытка будет успеш# 
нее предыдущей. 

Второй стиль разработки известен под несколькими названиями. Орга 
низации, отдающие предпочтение этому стилю разработки ПО, отличают 


42 
ГЛАВА 3 

ся тем, что привлекают лучших в своей области разработчиков, требуют 
от них полной отдачи и концентрации на проекте, обеспечивая им почти 
полную автономию и мотивируя их в наивысшей степени, а потом смотрят, 
чтобы они работали по 10, 12 или 16 часов в день, пока проект не будет за# 
вершен. Сила личностно# ориентированного стиля заключается в его ог 
ромных мотивационных возможностях, поскольку самые разные опросы 
и исследования постоянно показывают, что индивидуальная мотивация на 
много опережает все остальные факторы по вкладу в производительность 
[11]. Разработчики добровольно принимают личные обязательства и часто 
идут на огромные жертвы ради успеха проектов, в которых они заняты. 

Самозванцы от ПО 

П
П
ри разумном применении каждый из этих двух подходов к разработке 
ПО может привести к созданию высококачественного программного 
продукта в кратчайшие сроки и с наименьшими затратами. Но у каждого 
из них есть патологические двойники, не сравнимые с ними по результа 
тивности, но которые бывает трудно отличить от оригинала. 

Главная черта самозванцев#двойников первого стиля заключается в без# 
думном копировании процесса ради самого процесса. Эти организации 
пытаются быть похожими на такие процессно ориентированные структу 
ры, как Лаборатория NASA по разработке ПО или бывшее подразделение 
Федеральных систем фирмы IBM. В этих структурах вырабатывается мно 
го документов, и часто проводятся совещания. Отсюда делается вывод, что 
если плодить эквивалентное количество документов и проводить сравни# 
мое число совещаний, то можно добиваться аналогичных успехов. А если 
выдавать еще больше документации и созывать еще больше совещаний, 
то можно и превзойти их успех. Отсутствует понимание, что не докумен 
тация и совещания обеспечивают успех, что все это просто побочные эф# 
фекты нескольких чрезвычайно эффективных процедур. Организации, 
в которых получили распространение такие заблуждения, мы называем 
бюрократическими – в них форма процесса разработки ПО превалирует 
над содержанием. Подобное извращенное понимание процессов снижает 
мотивацию, а с ней и производительность разработчиков. Да и работать 
в таких организациях не слишком# то приятно. 

Фирмы, в которых приживается «героический» стиль, главным образом 
сконцентрированы на том, чтобы стимулировать сотрудников работать 
как можно больше времени. Наблюдая за практикой фирмы Microsoft, они 


«Культ карго» в разработке ПО 

видят, что вырабатывается очень мало документации, сотрудникам пред 
лагаются возможности покупки акций фирмы, а взамен требуется много 
отрабатывать сверхурочно. Отсюда делается вывод, что если тоже мини# 
мизировать объем документации, предлагать различные возможности 
и требовать огромных переработок, то успех придет сам собой. И чем 
меньше документации и больше переработки, тем лучше. Однако упуска 
ется из виду тот факт, что Microsoft и другие «ориентированные на геро 
изм» фирмы не требуют работать сверхурочно. Они берут на работу про 
граммистов, которые обожают создавать программы. Эти компании объ 
единяют таких людей в команды с им подобными, обеспечивая щедрую 
организационную поддержку и вознаграждения. После этого они дают им 
полную свободу. Естественный результат – разработчики и менеджеры 
добровольно предпочитают работать допоздна. Следствие (продолжи# 
тельность работы) при этом подменяется причиной (высокой мотивиро 
ванностью). Организацию труда в таких фирмах можно назвать потогонF 
ной, потому что упор делается не на продуктивный труд, а на интенсив 
ный, который к тому же характеризуются хаотичностью и неэффективно 
стью. Ну и работать в таких фирмах тоже не очень приятно. 

«Культ карго» в разработке ПО 

а первый взгляд эти два типа самозванцев противоположны друг другу. НПервые страшно бюрократизированы, вторые олицетворяют собой 
хаос. Однако есть одна общая ключевая черта, которая на самом деле важ 
нее, чем все их различия. Ни те, ни другие не могут быть эффективны, по 
тому что ни те, ни другие не понимают, что же действительно делает про# 
ект успешным. Они стараются имитировать действия, чтобы быть похожи 
ми на эффективные фирмы, исповедующие тот же стиль. Но поскольку 
они не понимают причин эффективности методов, то втыкают бамбуко 
вые палочки в уши и надеются на удачное приземление самолета. Многие 
проекты в таких фирмах проваливаются, потому что это просто две раз 
личные вариации «культа карго» в разработке ПО, похожие в своем непо 
нимании причин успеха. 

«Культ карго» в разработке ПО легко узнаваем. Инженеры #программи 
сты, приверженцы этого культа, оправдывают свои методы работы слова# 
ми «мы всегда так работаем» или «стандарты работы нашей компании тре# 
буют, чтобы мы работали так», даже если конкретные приемы просто бес# 
смысленны. Они отказываются признать наличие компромиссов обоих 


44 
ГЛАВА 3 

стилей, имеющих как недостатки, так и достоинства. Столкнувшись с но 
выми более удачными методиками, программисты «культа карго» предпо 
читают укрыться в своих «деревянных будках» – знакомых и удобных, но 
не обязательно эффективных, привычных методах. Старинная мудрость 
гласит, что если одно и то же дело делать одним и тем же способом, 
то ожидать различных результатов не приходится. (А вы, друзья, как ни са 
дитесь…©) Это тоже проявление «культа карго» в сфере ПО. 

Суть спора 

натоки программирования часто спорят, что лучше: приверженность Зпроцессу или ориентация на «личный энтузиазм». Но это ложная аль# 
тернатива. Оба стиля хороши и могут сосуществовать.1 Там, где обычно 
работают, ориентируясь на процесс, в отдельных проектах может потре# 
боваться максимальная самоотдача, а там, где принят стиль «героический», 
можно увидеть примеры искусного применения методики, ориентирован 
ной на процесс. 

Разница между двумя подходами фактически сводится к стилевым 
и личностным особенностям. Мне приходилось сталкиваться в ряде про# 
ектов и с тем и с другим подходами, и в каждом из них я находил для себя 
определенные преимущества. Некоторым программистам нравится мето# 
дично работать по 8 часов в день 5 дней в неделю, что более характерно 
для компаний, где ориентируются на процесс. Для других характерна це 
леустремленность, и они получают удовольствие от почти непрерывной 
работы. В среднем атмосфера проектов, ориентированных на энтузиазм, 
более приподнятая, но и процессно# ориентированный проект может 
вдохновлять не меньше, если есть четко поставленная цель. Фирмы, в кото# 
рых придерживаются процессно ориентированного стиля, видимо, чаще 
вырождаются в своих патологических двойников, чем их «героические» 

1 Так, для известной методологии IBM Rational Unified Process (RUP) были разрабо 
таны «каркасы» (frameworks), описания процессов разработки, начиная от «экс 
тремального программирования» – представителя «гибких (личностно# ориен 
тированных) технологий» – до процессно# ориентированных. При этом, осно 
вываясь на опыте успешных проектов разработки ПО, первые рекомендуются 
для небольших проектов, а последние – для крупных проектов с большой про 
ектной командой. (См. Якобсон А. (Jacobson Ivar), Буч Г. (Grady Booch), Рамбо Дж. 
(Rumbaugh James) «Унифицированный процесс разработки программного 
обеспечения» (Addison# Wesley, 1999). – Пер с англ. – СПб.: Питер, 2002). 


«Культ карго» в разработке ПО 

собратья, но любой из двух стилей эффективен, если проект четко сплани 
рован и реализуется подготовленными людьми. 

Наличие патологических двойников у обоих стилей также не добавляет 
ясности в спор о том, какой из них лучше. У каждого стиля есть проекты 
удачные и проекты, завершившиеся провалом. Приверженцам процессно 
ориентированного стиля это позволяет указывать на успешные проекты, 
выполненные благодаря ему, и на неудачные проекты, в которых большее 
значение придавалось энтузиазму работников. То же самое, с точностью 
до наоборот, делают и приверженцы второго стиля. 

Суть вопроса, которая осталась в стороне спора о преимуществах двух 
стилей, настолько очевидна, что, возможно, осталась незамеченной, как 
пропавшее письмо в известном рассказе Эдгара По. Вопрос не в стиле раз# 
работки ПО, а в компетентности. Реальная разница не в том, какой стиль 
выбран, а в том, каким уровнем образования, квалификации и понимания 
обладают участники проекта. Вместо того чтобы спорить о достоинствах 
стилей, надо искать пути повышения среднего уровня разработчиков 
и компетентности менеджеров. Это увеличит шансы на успех проекта не# 
зависимо от того, какой избран стиль. 


ГЛАВА ЧЕТВЕРТАЯ

Р

Разработка ПО – 
это не компьютерная наука 

Ученый создает, чтобы научиться; 
инженер учится, чтобы создавать. 

ФРЕД БРУКС 

Один из моих любимых вопросов во время собеседований с претендента 
ми на должность программиста следующий: «Как бы вы описали ваш под 
ход к программированию?» Я приводил в качестве примера плотника, по 
жарника, архитектора, художника, писателя, ученого, изыскателя и архео# 
лога и предлагал дать кандидатам их собственный ответ. Некоторые из них 
пытались предугадать, что я хотел услышать от них; обычно они отвечали, 
что видят себя учеными. «Крутые» программисты отвечали, что ощущают 
себя членами ударной группы или отряда десантников. Мне больше всего 
понравился такой ответ: «При проектировании ПО я архитектор. Когда 
я конструирую интерфейс пользователя, я художник. Когда я пишу ПО, 
я ремесленник. А когда я тестирую программу, я ужасная сволочь». 

Мне нравится задавать этот вопрос, потому что он ставит на повестку 
дня фундаментальный вопрос: как лучше всего рассматривать разработку 
ПО? Это наука? Искусство? Ремесло? Или же нечто абсолютно иное? 

«Есть» и «должно быть» 

С
С
пор о том, что такое разработка ПО – наука или искусство, идет уже 

давно. Тридцать лет назад Дональд Кнут (Donald Knuth) взялся за напи 


Разработка ПО – это не компьютерная наука 

сание семитомного «Искусства программирования». Первые три тома со 
держали 2200 страниц, так что можно предположить, что во всех семи то 
мах могло бы быть более 5 тысяч страниц. Если это искусство программи# 
рования, то не уверен, что мне когда#нибудь захочется взглянуть на науку. 

Те, кто считает программирование искусством, указывают на эстетиче 
ские аспекты разработки ПО и утверждают, что наука не допускает такого 
воображения и творческой свободы, а те, кто считает программирование 
наукой, указывают на огромное количество ошибок в программах, утвер# 
ждая, что столь низкая надежность недопустима, и черт с ней с творческой 
свободой. Обе эти точки зрения грешат неполнотой и ставят во главу угла 
неверный тезис. Разработка ПО – это искусство, наука, ремесло, археология, 
тушение пожаров, социология и еще много других видов деятельности че 
ловека, взятые вместе. В некоторых областях это любительство, в других – 
профессионализм. Это столько же различных вещей одновременно, сколь# 
ко существует программистов. Но правильно поставленный вопрос состо# 
ит не в том, что такое есть разработка ПО на данный момент, а скорее в том, 
чем должна быть профессиональная разработка ПО. С моей точки зрения, 
ответ на этот вопрос ясен: профессиональная разработка ПО должна быть 
инженерией. Такова ли она сегодня? Нет. А должна быть? Несомненно. 

Инженерия и наука 

ишь около 40% разработчиков ПО имеют диплом специалиста по вы Лчислительным системам (computering science)1, и практически никто 
из них не имеет диплома по разработке ПО, поэтому не стоит удивляться 
путанице между первой и второй формулировками. Различие между на 
укой и инженерией в программном обеспечении такое же, как и в других 
областях знаний.2 И ученые, и инженеры познают истину. Ученые прове# 
ряют гипотезы и расширяют знания в своей предметной области. Инжене 
ры отыскивают полезные знания и учатся применять полученные знания 
для решения практических задач. Ученые должны быть в курсе новейших 
исследований. Инженерам должны быть известны методы, надежность и 
эффективность которых уже подтверждена. В занятиях наукой позволи 
тельна узкая специализация. Инженер должен понимать и учитывать все 

1 Именно так называется степень выпускника зарубежных университетов. – ПриF 

меч. науч. ред. 
2 Большей частью этих размышлений я обязан Дэвиду Л. Парнасу (David L. Parnas), 

особенно его работе [108]. 


48 
ГЛАВА 4 

факторы, влияющие на разрабатываемое изделие. За учеными не нужен 
надзор, потому что об их работе судят главным образом другие ученые. 
Инженерам необходимы нормативы, поскольку результаты их работы ис# 
пользуют обычные люди. Научное образование готовит выпускников к про# 
должению учебы. Инженерное образование готовит студентов к практиче# 
ской работе сразу после завершения учебы. 

Университеты выдают дипломы по специальности «вычислительные 
системы», и обычно считается, что студенты, получившие эту специаль 
ность, найдут работу как разработчики ПО и сразу начнут решать задачи 
реального мира. Лишь небольшая часть студентов, получивших специаль 
ность «вычислительные системы», продолжает обучение или идет в науч# 
но исследовательские организации, где развиваются знания о программ# 
ном обеспечении или компьютерах. 

Таким образом, эти выпускники оказываются на «нейтральной техно 
логической территории». Их именуют учеными, но они выполняют функ 
ции, которые традиционно входили в обязанности инженеров, и при этом 
не имеют инженерной подготовки. Такой же результат можно получить, 
поручив ученому физику конструировать бытовую электротехнику. Фи 
зик, возможно, глубже понимает научные принципы электричества, чем 
инженер#электрик. Но его опыт создания аппаратуры сводится к изготов# 
лению прототипов, используемых в лаборатории для расширения науч# 
ных знаний. У него нет опыта или просто даже необходимой подготовки 
для создания надежного экономичного оборудования, которое решает 
практические задачи в условиях реального мира. Можно рассчитывать, 
что оборудование, сконструированное кандидатом наук, физиком, будет 
работать, но у него не будет той надежности, которая делает прибор прак# 
тичным или безопасным за пределами лаборатории. В его оборудовании 
материалы могут использоваться допустимым лишь для единственного 
прототипа образом, что чрезвычайно расточительно при изготовлении 
крупных партий изделия. 

В области ПО ситуации, подобные приведенному выше примеру с физи# 
ком, исчисляются буквально тысячами каждый год. Когда сотрудники, име# 
ющие специальность ученого по вычислительным системам, приступают 
к разработке производственных систем, они часто проектируют и создают 
ПО, которое либо слишком слабо для производственных целей, либо не# 
безопасно. Они глубоко и узко сосредоточены на мелких задачах и игно 
рируют более важные факторы. Они могут потратить два дня на шлифовку 
вручную какого нибудь алгоритма сортировки, вместо того чтобы за два 


Разработка ПО – это не компьютерная наука 

часа позаимствовать его из библиотеки стандартных подпрограмм или 
найти в подходящей книжке. Типичному выпускнику по специальности 
вычислительных систем нужно несколько лет практической деятельности, 
чтобы набрать достаточное количество практических знаний для созда# 
ния минимально приемлемого производственного ПО без надзора спе# 
циалиста. Не имея формального образования, некоторые разработчики 
ПО, посвящают данной области всю жизнь, так и не обретя этих знаний. 

Недостаток профессионализма – это беда не только разработчиков ПО: 
вся сфера ПО стала жертвой собственного успеха. Рынок труда в области 
ПО растет быстрее, чем образовательная инфраструктура, необходимая 
для поддержания его роста, поэтому больше половины специалистов, за 
нимающих должности разработчиков ПО, получили образование по дру# 
гим специальностям. Работодатели не могут требовать от этих «обращен# 
ных в ПО» сотрудников, чтобы они получали необходимое инженерное 
образование в свободное от работы время. Но если бы работодатели и мог 
ли это сделать, то все равно большинство курсов переподготовки посвя# 
щены науке в области вычислительных систем, а не разработке ПО. Обра 
зовательная инфраструктура отстает от нужд отрасли. 

Что стоит за модным словечком? 

Н
Н
екоторые эксперты считают, что «инженерия ПО» (software engineer 
ing) – это лишь очередное модное словосочетание, аналогичное по 
значению программированию компьютеров. Очевидно, что термин «ин 
женерия ПО» употребляется неверно, но имеет все же вполне конкретное 
значение. 

Толковые словари определяют слово «инженерия» как применение на# 
учных и математических принципов в практических целях. Именно это 
и пытается делать большинство программистов. Они берут научно разра# 
ботанные и математически определенные алгоритмы, методы функцио 
нального конструирования, методики обеспечения качества и другие ме# 
тодики и разрабатывают программные продукты. Как указывает Дэвид 
Парнас (David Parnas), профессия инженера давно получила законный 
статус, поэтому потребители знают, кто имеет квалификацию, позволяю 
щую создавать технические продукты [107]. Потребители программного 
обеспечения заслуживают того же отношения. 

Существует, однако, мнение, что, считая разработку ПО инженерной 
профессией, мы должны применять формальные методы – создавать про 


50 
ГЛАВА 4 

граммы как строгие математические доказательства. Опыт и здравый 
смысл подсказывают, что одного этого более чем достаточно для гибели 
многих проектов. Приверженцы другого взгляда возражают, что коммер# 
ческое ПО слишком сильно зависит от условий рынка, чтобы разработчи# 
ки могли позволить себе роскошь тщательного продолжительного инже 
нерного конструирования. 

Такие возражения основаны на узком и неверном понимании смысла 
инженерии. Ведь инженерия – это применение научных принципов в пракF 
тических целях. Если инженерия непрактична, то это плохая инженерия. 
Попытка применить формальные методы ко всем проектам создания ПО 
так же порочна, как и разработка всего и вся по принципу «напишем и ис 
правим». 

Подход к созданию ПО как к предмету инженерии делает понятнее те# 
зис о том, что проекты ПО дифференцируются в зависимости от их целей. 
Материалы для проектируемого здания подбираются такие, чтобы они со 
ответствовали его назначению. Большой ангар# укрытие для хранения 
сельскохозяйственного инвентаря и механизмов можно построить из лис 
тов тонкого железа без теплоизоляции. Строить из них жилой дом вряд ли 
разумно. Но, хотя дом прочнее и теплее, нельзя утверждать, что укрытие 
хуже дома: оно спроектировано в соответствии с предполагаемым назна 
чением. Если бы укрытие для инвентаря было спроектировано подобно 
жилому дому, можно было бы даже критиковать такое «избыточное проек# 
тирование» за бесполезно потраченные ресурсы для строительства и сме# 
ло назвать его плохим. 

В области ПО правильно организованный проект может быть ориенти# 
рован на достижение любой из следующих целей создания программного 
продукта: 

• Минимизация числа дефектов 
• Повышение степени удовлетворенности пользователя 
• Сокращение времени отклика 
• Удобство обслуживания 
• Хорошая масштабируемость 
• Высокая степень устойчивости 
• Высокая степень корректности1 
1 

И это еще далеко не полный перечень критериев. – Примеч. науч. ред. 


Разработка ПО – это не компьютерная наука 

Каждая проектная команда должна четко определить относительную 
важность этих характеристик, а затем уже осуществлять проект в соответ# 
ствии с задачей их достижения. 

Проекты по разработке ПО отличаются от инженерных проектов, в ко 
торых используются физические материалы. В других инженерных облас# 
тях стоимость материалов может составлять до 50% стоимости всего про# 
екта. Многие производственные фирмы утверждают, что проекты, в кото 
рых оплата труда превышает 50% их стоимости, автоматически получают 
статус высокого риска [5]. В типичном проекте по разработке ПО стои 
мость труда может доходить до почти 100% всего бюджета. Многие инже# 
нерные проекты направлены на оптимизацию свойств создаваемого про 
дукта; стоимость проектирования при этом относительно невелика. По 
скольку оплата труда составляет столь высокую долю всех расходов на про# 
тяжении жизненного цикла ПО, программные проекты должны быть 
ориентированы на достижение целей проекта в большей степени, чем дру# 
гие инженерные проекты. Поэтому помимо обеспечения характеристик 
продукта коллективу разработчиков ПО, возможно, придется работать 
на достижение следующих целей проекта: 

• Короткие сроки 
• Прогнозируемая дата сдачи продукта 
• Низкие затраты 
• Реализация проекта силами ограниченного коллектива разработчи 
ков 
• Обеспечение гибкости внесения изменений в требования по ходу 
проекта 
В каждом проекте должен соблюдаться баланс между характеристика# 
ми продукта и задачей создания продукта в целом. Никто не хочет платить 
$5000 за текстовый редактор, но никому не нужен и редактор, который бу 
дет зависать каждые 15 минут. 

Конкретные характеристики продукта и проекта, поставленные во гла# 
ву угла проектной командой, сами по себе не определяют данную работу 
как «настоящий» проект разработки ПО. Иногда требуется выдать продукт 
с минимумом дефектов и почти безукоризненной надежностью – это ПО 
для медицинской аппаратуры, авионики, тормозных систем и т. д. Трудно 
не согласиться, что такие разработки образуют подходящую сферу для 
полноценных инженерных проектов ПО. В других проектах ставится цель 
обеспечить продукт с достаточной надежностью, но при минимальных за 


52 
ГЛАВА 4 

тратах и в кратчайшие сроки. Являются ли такие проекты подходящей сфе# 
рой приложения для инженерии ПО? Одно неформальное определение 
инжиниринга – это «выполнение за 10 центов работы, которую каждый 
может сделать за доллар». Во многих проектах ПО сегодня за доллар дела 
ется то, что любой хороший разработчик ПО мог бы сделать за 10 центов. 
Экономичная разработка – это тоже сфера приложения инженерии про# 
ектов ПО. 

Охвативший сегодня почти всю отрасль ПО принцип разработки «на 
писать и исправить» и сопутствующее ему превышение бюджета и сроков 
есть не результат самого инженерного подхода, а следствие недостатка 
специальной подготовки и образования в сфере инженерии ПО. 

Правильные вопросы 

бычная практика разработки ПО сегодня не очень похожа на инже Онерию, но она вполне может быть таковой. Как только мы перестанем 
задавать неверный вопрос: «Что такое разработка ПО сегодня?» и начнем 
задавать правильный: «Должна ли разработка ПО быть инженерной прак 
тикой?», мы начнем отвечать на действительно интересные вопросы. Что 
является ядром области знаний инженерии ПО? Что нужно сделать, чтобы 
профессиональные разработчики ПО могли воспользоваться этими зна# 
ниями? Насколько велика отдача от практики разработки ПО как инже# 
нерной дисциплины? Каковы стандарты профессионального поведения 
разработчиков ПО, организаций разработчиков ПО? Надо ли регулиро 
вать деятельность разработчиков ПО? Если да, то до какой степени? 
И возможно, самый интересный вопрос из всех: какой будет отрасль раз 
работки ПО, когда на все эти вопросы будут получены ответы? 


ГЛАВА ПЯТАЯ

О

Объем знаний 

Истина скорее родится из ошибки, чем из путаницы. 

ФРЕНСИС БЭКОН 

Чтобы стать высококлассным специалистом в какой либо области, чело 
век должен освоить примерно 50 тысяч единиц информации, то есть бло 
ков знаний, которые скорее можно запомнить, чем всякий раз воссозда# 
вать [124]. В устоявшихся областях знаний, как правило, необходимо при 
мерно 10 лет для накопления такого объема информации. Утверждают, 
что пакет знаний, необходимый для разработки ПО, недостаточно стаби 
лен, чтобы о нем можно было говорить как о чем# то строго определенном. 
Говорят, половина того, что сегодня должен знать разработчик для созда# 
ния ПО, устареет уже через три года. Если оценка «периода полураспада» 
правильна, то за 10 лет, необходимых для освоения 50 тысяч единиц ин 
формации, делающих человека специалистом мирового класса, 30 тысяч 
из них безнадежно устареют. Будущие разработчики ПО были бы похожи 
на Сизифа, толкающего камень на вершину горы, чтобы тот снова скаты# 
вался вниз, едва достигнув вершины. 

Каков же «период полураспада» таких программных средств, как Java, 
Perl, C++, ОС Linux и Windows? Все эти средства весьма актуальны на мо 
мент написания данной книги, но останутся ли они таковыми в момент 
прочтения ее читателем? Принцип «периода полураспада» может вполне 
оказаться верным для знаний, относящихся к технологиям. Но есть и дру 
гой тип знаний, который послужит разработчику ПО на протяжении всей 
его карьеры, и эти знания не подвержены такому влиянию времени. 


54 
ГЛАВА 5 

Суть и случайность 

1987 г. Фредерик Брукс опубликовал очень важную статью [20]. Основ Вное ее положение сводилось к тому, что никакая уникальная методоло# 
гия или инструментарий, никакая «серебряная пуля» не гарантирует деся 
тикратное повышение производительности в течение последующих десяти 
лет. Обоснования этого тезиса помогают выявить знания в разработке ПО, 
которые не подпадают под принцип трехлетнего «периода полураспада». 

Употребляя слова «сущность» и «случайность», Брукс опирался на древ# 
нюю философскую традицию различать «существенные» и «случайные» 
свойства или признаки вещей. Существенными свойствами вещь должна 
непременно обладать, чтобы быть собой. У автомашины должен быть дви# 
гатель, колеса, трансмиссия, чтобы она была автомашиной. Эти свойства 
существенные. Двигатель может быть V#образный или линейный, шины 
могут быть шипованные зимние или гоночные с гладким протектором, ко# 
робка передач – автоматическая или ручная рычажная. Эти свойства «слу# 
чайные», они возникают по случаю и не влияют на базовую «автомобиль 
ность» машины. Слово «случайный» может сбивать с толку, но примени# 
тельно к тезису Брукса означает «несущественный», «необязательный». 

По Бруксу, основная трудность разработки ПО не в последовательном 
изложении понятий на конкретном компьютерном языке программиро 
вания (составление программы) или проверке точности этого представле 
ния (тестирование). Все это суть случайная часть разработки ПО. Сущ# 
ность же его, по утверждению Ф. Брукса, состоит в выработке специфика 
ций, структуры и сверке строго определенного и высоко детализирован 
ного комплекса взаимоограничивающих положений. Он говорит, что 
программное обеспечение – вещь трудная в силу присущих ему сложно 
сти, изменчивости, неосязаемости и в силу того, что оно должно соответ# 
ствовать принятым в отрасли стандартам. 

Компьютерные программы сложны по своей природе. Если даже изо 
брести язык программирования, оперирующий понятиями на уровне об 
ласти задачи,1 программирование все же останется сложной работой, по 
скольку придется точно определять взаимосвязи между объектами реаль# 

1 

Чистым и негипотетическим образцом такого средства программирования яв# 
ляются 5 языков визуального программирования автоматных схем, получившие 
широкое распространение в несколько последних лет в области построения 
систем АСУТП. Их использование как раз со всей отчетливостью демонстрирует 
тезис автора. – Примеч. науч. ред. 


Объем знаний 

ного мира, устанавливать исключения, предусматривать все возможные 
переходы между состояниями и т. д. Если абстрагироваться от случайной 
работы, связанной с представлением этих факторов на конкретном языке 
программирования и в конкретной компьютерной среде, то придется 
столкнуться с сущностной трудностью определения основополагающих 
понятий реального мира и устранением ошибок в их осмыслении. 

Другая большая трудность обусловлена необходимостью соответстF 
вия ПО многочисленным ограничениям реального мира, таким как уже су 
ществующее аппаратное обеспечение, компоненты третьих сторон, нор# 
мативы регулирующих органов, бизнес правила и традиционные форма 
ты данных. Проектировщики ПО часто сталкиваются с жесткими внешни 
ми факторами, ограничивающими потенциальную степень снижения 
сложности. 

Еще одну существенную трудность представляет изменчивость ПО. 
Чем удачнее программа, тем больше для нее найдется применений и тем 
шире она будет адаптироваться за пределами той области, для которой она 
изначально предназначалась. По мере расширения ПО еще больше услож 
няется и должно соответствовать дополнительным требованиям. Чем боль# 
ше адаптируется ПО, тем сильнее становятся адаптации. 

Последняя трудность связана с присущим ПО недостатком наглядноF 
сти. ПО невозможно визуально представить с помощью двух или трех 
мерных геометрических моделей. Попытки визуально представить даже 
простейшую логику быстро становятся безнадежно сложными, что может 
подтвердить любой, кто когда#нибудь пытался составить блок #схему даже 
простой программы. 

Брукс утверждает, что в сфере разработки ПО уже достигнуты все воз# 
можные улучшения случайных характеристик. Эти достижения включают 
изобретение языков высокого уровня, принятие интерактивных вычисле# 
ний и развитие мощных интегрированных сред разработки. Ф. Брукс го 
ворит, что дальнейшего повышения производительности разработки 
можно достичь только за счет преодоления существенных трудностей, 
присущих ПО: сложности, изменчивости, отсутствия наглядности и огра 
ничений, накладываемых принятыми стандартами. 

Формирование устойчивого ядра 

нания, которые помогают разработчикам преодолеть то, что Брукс на# Ззывает «существенными трудностями» разработки ПО, мне видятся как 


56 
ГЛАВА 5 

«принципы инженерии ПО», образующие ее ядро знаний. В 1968 г. НАТО 
провело первую конференцию по инженерии ПО. Употребление этого 
термина применительно к объему знаний того времени было преждевре# 
менным и имело целью спровоцировать дискуссию. 

Но насколько малым было это самое устойчивое ядро в 1968 г.? Примем 
во внимание, что первый полностью строгий алгоритм бинарного поиска 
был опубликован в 1962 г., лишь за шесть лет до проведения упомянутой 
конференции НАТО [72]. К. Бом (C. Bhm) и Дж. Джакопини (G. Jacopini) 
опубликовали работу [15], формулирующую теоретическое обоснование 
исключения оператора перехода goto и предлагавшую структурное про# 
граммирование лишь за два года до конференции. Эдсгер Дейкстра (Edsger 
Dijkstra) написал свое знаменитое письмо к редактору «О вреде оператора 
GOTO» в 1968 г. [40]. В то время идея применения подпрограмм была отно 
сительно свежей, а среди программистов постоянно шли споры о реаль 
ной полезности подпрограмм. Ларри Константин (Larry L. Constantine), 
Гленфорд Майерс (Glenford Myers) и Уэйн Стивенс (Wayne Stevens) опуб# 
ликовали свою первую работу по структурному проектированию уже че 
рез шесть лет после конференции, в 1974 г. [25]. Том Гилб (Tom Gilb) опуб# 
ликовал свою первую работу по метрикам ПО в 1977 г. [50], а первая книга 
Тома Демарко (Tom DeMarco) по анализу требований ПО вышла в 1979 г. 
[35]. Любой, кто взялся бы сформировать устойчивое ядро знаний в дале 
ком 1968 г., получил бы разрозненные фрагменты работы. 

Анализируя сферу области знаний в проекте SWEBOK (которая обсужда 
ется в этой главе ниже), я оцениваю «период полураспада» области знаний 
инженерии ПО в 1968 г. лишь в 10 лет. Как видно из рис. 5.1, устойчивое яд 
ро было относительно небольшим, и, по моим оценкам, всего от 10 до 20% 
знаний инженерии ПО 1968 г. еще применяется сегодня. 

С 1968 г. инженерия ПО добилась существенного прогресса. Тысячи 
страниц написаны на эту тему. Профессиональные ассоциации проводят 
сотни конференций и рабочих семинаров ежегодно. Накопленные знания 
кодифицированы на более чем двух тысячах страниц стандартов IEEE 
в инженерии ПО. Десятки университетов в Северной Америке предлагают 
образование с получением степени в этой области и еще больше про# 
грамм без получения степени. 

Тот факт, что у нас не сложилось полностью устоявшихся знаний о прак 
тических методиках инженерии ПО, вряд ли уникален для этой сферы. 
В 30 х годах прошлого века медики еще не знали пенициллина, структуры 
ДНК и генетических основ многих болезней, не было аппаратов искусст# 


Объем знаний 

венного дыхания и создания изображений посредством томографии. Од# 
нако медицинская профессия существовала. 

Область 
знаний 
инженерии ПО 

Устойчивое 
ядро 
Рис. 5.1. Со времен конференции НАТО по инженерии ПО в 1968 г. лишь от 10 
до 20% области знаний инженерии ПО было устойчивым (т. е. оставалось бы 
существенным 30 лет спустя). Полупериод жизни области знаний инженерии ПО 
в тот момент составлял 10 лет 

Как показывает рис. 5.2, основанный на моем анализе области знаний 
проекта SWEBOK, начиная с 2003 г. устойчивое ядро составляет около 50% 
знаний, необходимых для разработки систем ПО. Может показаться, что 
это не слишком кардинальное изменение по сравнению с 10–20% в 1968 г., 
но оно заставляет предположить, что полупериод жизни области знаний 
вырос примерно с 10 до 30 лет. Это означает, что вложение средств в обра 

Область 
знаний 
инженерии ПО 

Устойчивое 
ядро 
Рис. 5.2. С 2003 г. около 50% области знаний инженерии ПО является устойчиF 
вым и останется существенным еще в течение 30 лет 


58 
ГЛАВА 5 

зование лиц, выбравших карьеру в сфере создания ПО, сделанное в самом 
начале их деятельности, останется в целом оправданным на протяжении 
всей карьеры. 

Стабилизация области знаний инженерии ПО ставит эту сферу в рав# 
ное положение с другими инженерными дисциплинами. Как отметил Дэ 
вид Парнас, даже если в лаборатории физики появится новый осцилло# 
граф, содержание уроков физики при этом останется неизменным. Боль 
шинство учебных курсов инженерии ПО может не зависеть от конкретных 
технологий с относительно коротким сроком существования, таких как, 
например, С++ или Java. Студенты могут осваивать эти средства на практи# 
ческих занятиях, но теоретические занятия надо посвятить более долго 
вечным знаниям. 

Область знаний инженерии ПО 

главе 4 я утверждал, что инженерия ПО не то же самое, что компью# Втерная наука. Если это так, то что же такое инженерия ПО? Тем из нас, 
кто работает в сфере разработки ПО, предоставлена уникальная возмож 
ность наблюдать за рождением новой сферы деятельности. В уже сформи# 
ровавшихся науках, таких как математика, физика или физиология, мы 
склонны принимать содержание науки как данность, считая, что оно все# 
гда было таковым и таким же должно и оставаться. Но в какой# то момент 
авторам учебников и составителям университетских программ приходи# 
лось решать, что надо включить в курс (учебник), а что исключить. Веками 
люди не выделяли математику, физику, физиологию и философию как от 
дельные науки. Математика стала рассматриваться отдельно от филосо 
фии примерно за 300 лет до нашей эры. Физика выделилась из философии 
где то на рубеже XVI–XVII вв. Физиология не выделялась из философии 
примерно до 1900 г. 

При определении того, что входит, а что не входит в предмет инжене# 
рии ПО, специалисты рекомендуют сосредоточиться на общепринятых 
знаниях и практических методах. Как следует из рис. 5.3, «общепринятое» 
относится к знаниям и практике, применимым к большинству проектов 
почти всегда, то есть к методикам, ценность и полезность которых при# 
знает большинство специалистов. Общепринятость не означает, что такие 
знания и практические методы универсально применимы во всех проек# 
тах. Лицо, ответственное за проект, по# прежнему определяет методики, 
наиболее приемлемые в данном случае [41]. 


Объем знаний 

СпециализированноеПрактические методы, используемыетолько для программного обеспеченияопределенных типов 
Общепринятое 
Сформировавшиеся практические 
методики, используемые 
многими организациями 
Передовое 
Инновационные практические методы, 
проверенные и используемые лишь 
несколькими организациями 
Исследования 
Концепции, находящиеся в стадии 
разработки и тестирования 
в исследовательских структурах 

Рис. 5.3. Возможные категории в области знаний инженерии ПО. При определеF 
нии знаний, нужных профессиональному инженеру ПО, общепринятые элементы 
должны быть в фокусе внимания. Источник: [134] 

С 1968 г. удалось значительно продвинуться в сферах, которые Брукс 
назвал «существенными трудностями» в разработке ПО. Сейчас имеются 
хорошие или хотя бы удовлетворительные справочники по спецификаци# 
ям, конструированию, созданию, тестированию, экспертизе, обеспечению 
качества, управлению проектами ПО, алгоритмам и проектированию ин 
терфейса пользователя – это лишь некоторые темы. Постоянно появляют# 
ся новые более качественные издания, систематизирующие накопленные 
знания в этой сфере. Некоторые компоненты устойчивого ядра знаний 
пока не сведены в практические руководства или учебные курсы, и в этом 
смысле данная область знаний все еще формируется. Однако основная ба# 
за знаний о применении описанных практических методик уже содержит# 
ся в журнальных статьях, докладах на конференциях, трудах семинаров 
и в книгах. (Обширный перечень этих книг приводится на профессио 
нальном сайте инженерии ПО по адресу www.construx.com/profession.) 
Пионеры инженерии ПО уже наметили пути и исследовали территорию. 
Сегодня прибывшие на «постоянное поселение» специалисты должны 
проложить дороги и развить недостающие образовательную и аттестаци# 
онную инфраструктуры. 

Исследователи Университета Квебека в Монреале возглавили работу 
по определению общепринятых элементов инженерии ПО. Их усилия ко 
ординировали ассоциация ACM и IEEE Computer Society и привлекли как 
ученых, так и представителей отрасли. В целом эта работа получила назва# 


60 
ГЛАВА 5 

ние «Guide to the Software Engineering Body of Knowledge» (Руководство 
к своду знаний по программной инженерии), или сокращенно SWEBOK.1 

Как показано на рис. 5.4, инженерия ПО черпает знания из компьютер 
ной науки, математики, наук о мышлении (психологии и социологии), 
управлении проектами и из различных инженерных дисциплин. 

МатематикаКомпьютерная 
наукаИнженерия 
качестваИнженерия 
компьютеров 
Другие 
инженерные 
дисциплины 
Науки 
о мышлении 
Связь/сети 
связи 
Управление 
проектами 
Специальные 
знания 
инженерии ПО 
Рис. 5.4. Источники информации в области знаний инженерии ПО. 
Источник: [134] 

В качестве стартовой позиции проект SWEBOK определил области зна 
ний, позволяющие получить базовые умения и навыки профессионально# 
го инженера ПО [1]. 

• Требования к ПО. Выявление, описание и анализ требований, кото 
рым должно удовлетворять программное обеспечение. 
• Проектирование ПО. Определение базовой структуры системы на 
архитектурном и детализированном уровнях, разбиение на модули, 
определение интерфейсов модулей и выбор алгоритмов внутри мо 
дулей. 
• Создание ПО. Реализация ПО, включая детальное проектирование, 
написание программ, отладку, тестирование компонент, технические 
экспертизы и оптимизацию производительности. В какой# то степе# 
ни этот пункт пересекается с проектированием и тестированием ПО. 
1 

Дополнительная информация имеется на сайте проекта SWEBOK по адресу 
www.swebok.org. 


Объем знаний 

• Тестирование ПО. Все действия, связанные с прогоном программ 
для оценки их возможностей и обнаружения дефектов. Тестирова 
ние включает его планирование, схему конкретных испытаний 
и специальные виды тестирования, включая тесты разработки, ин 
тегрирования, системные тесты, регрессионные тесты и приемные 
испытания. 
• Обслуживание ПО. Обновление и расширение готового ПО, соот 
ветствующая документация и тестирование. 
• Управление конфигурацией ПО. Определение, документирование 
и контроль изменений по версиям для всей интеллектуальной соб 
ственности, созданной в ходе проекта, включая исходный код, ре 
сурсы (графика, звук, текст и видео), требования, проекты, материа# 
лы тестирования, оценки, планы и пользовательскую документацию. 
• Качество ПО.1 Все работы, связанные с обеспечением соответствия 
техническим требованиям компонент ПО. Управление качеством 
включает планирование мероприятий по его обеспечению и изме# 
рению, обеспечение надежности, тестирование, технические экс# 
пертизы, аудиты, а также сверку и утверждение. 
• Управление разработкой ПО. Планирование, отслеживание и кон 
троль проекта по разработке ПО, работ по созданию ПО или орга# 
низации, занимающейся его разработкой. 
• Инструменты и методы разработки ПО. Поддержка методологии 
и инструментария, таких как CASE средства, прикладные библиоте# 
ки пользователя и формальные методики, включая практику внедре 
ния и распространения методов и инструментария внутри органи 
зации. 
• Процесс разработки ПО. Работы, связанные с повышением качества 
процессов разработки ПО, с соблюдением сроков, повышением 
производительности и других характеристик проекта и продукта. 
Столь обширный список может кого#то удивить. Многие практики про 
граммирования работают так, как будто единственный значимый компо# 
нент – это создание ПО. Но каким бы важным ни был этот компонент, 
он всего лишь один из десяти, в которых следует разбираться профессио# 
нальному инженеру разработчику ПО. 

Принятый в настоящее время русскоязычный термин «управление качеством» 
в гораздо меньшей степени акцентирован на инженерном подходе к этому про 
цессу, чем в позиции автора. – Примеч. науч. ред. 


62 
ГЛАВА 5 

Других практикующих программистов удивит полное отсутствие упо# 
минания о конкретных языках и средах программирования – Java, C++, Vi# 
sual Basics, Linux и т. д. Но дело в том, что область знаний концентрируется 
на принципах инженерии ПО, а не на знаниях технологий. 

Кто# то, взглянув на этот список, скажет: «Сколько же надо знать, чтобы 
всего лишь писать компьютерные программы». Действительно, научиться 
надо многому, и всегда считалось, что знания будут осваиваться подспуд 
но, при получении новой информации в процессе работы. В результате 
большинство программистов #практиков достаточно хорошо владеют соз 
данием и обслуживанием ПО; отрывочными сведениями о требованиях, 
проектировании, тестировании и инструментах, методах разработки ПО, 
но практически ничего не знают об управлении конфигурацией ПО, каче# 
стве, управлении разработкой ПО и процессе разработки ПО. 

Я не надеюсь на то, что инженеры ПО в совершенстве овладеют каждым 
из этих компонентов, но профессиональному инженеру ПО следует хотя 
бы ознакомиться с ними, разбираться в большинстве из них, а некоторы 
ми овладеть в совершенстве. 

Как сказано в главе 4, одно из отличий ученого от инженера состоит 
в том, что ученый может позволить себе владеть узким, но глубоким знани# 
ем, а инженер должен знать и учитывать все факторы, которые воздейству 
ют на создаваемый им продукт. 

Ставим зарубку 

вляется ли наше определение свода знаний инженерии ПО оконча Ятельным? Нет. Инженерия ПО продолжает развиваться, как и медици# 
на и другие науки. Но очень важно поставить зарубку и сказать: «Вот это 
и есть свод знаний инженерии ПО на данный момент». 

Как заметил Френсис Бэкон, когда 350 лет назад он закладывал основы 
современной науки, ошибки создают более прочную основу для развития, 
чем путаница. Он осознавал, что его подход сделает многие первоначаль 
ные выводы ошибочными, но это было частью его плана. Главные элемен 
ты сегодняшнего определения свода знаний инженерии ПО несомненно 
окажутся ошибочными, однако оно даст точку отсчета для дальнейшего 
совершенствования. Замена существующей путаницы и неразберихи 
на четко сформулированное понятие области знаний – это удачный об 
мен, несмотря на возможные ошибки и прочее. 


ГЛАВА ШЕСТАЯ

Н

Новый органон 

Умный вопрос – это уже добрая половина знания. 

ФРЕНСИС БЭКОН 

В 1620 г. Френсис Бэкон опубликовал свой эпохальный труд «Новый орга 
нон» (Novum Organum), в котором бросил вызов своим современникам, 
предложив им отказаться от привычки полностью полагаться на дедуктив 
ное мышление и принять научный метод исследования, основанный на 
наблюдении и опыте. В его воображении рождался новый мир, появление 
которого он связывал с проникновением в законы и процессы природы. 
Описывая этот мир, Бэкон предвидел результаты достижений в науке, ин 
женерии и технологии. 

Следование научному методу Бэкона предполагало три шага: 

1. Отказаться от предубеждений («предрассудков»). 
2. Систематически накапливать наблюдения и опыт. 
3. Остановиться, обозреть видимое и сделать первоначальные выводы – 
«первый урожай». 
«Новый органон» был частью монументального труда, названного «Ве# 
ликое восстановление наук» (Instauratio Magna), в котором делалась по 
пытка упорядочить науки, сформулировать метод научного познания, на# 
копить наблюдения и факты, дать примеры новых методов и создать но 
вую философию, основанную на результатах такого научного подхода. 
Этот труд оказал столь фундаментальное влияние на современные науч# 
ные методы, что Бэкона часто называют отцом современной науки. 


64 
ГЛАВА 6 

На заглавной странице этого труда был изображен корабль между Гер 
кулесовыми столпами (рис. 6.1), которые, по преданию, стояли по обоим 
берегам Гибралтарского пролива – единственного пути из Средиземного 
моря в Атлантику. В древние времена эти столпы были символом земного 
предела люди: боялись выйти за этот предел и оказаться во внешнем про# 
странстве, оставив свой мир. 


Рис. 6.1. Фронтиспис труда Френсиса Бэкона «Великое восстановление», 
включающего «Новый Органон». Античные мореплаватели не стремились 
выходить за пределы, ограниченные Геркулесовыми Столпами 

Принятые сейчас методы разработки ПО подобны кораблю, застряв# 
шему в безветренном море – море программирования, где господствует 
принцип «написать и исправить». Подобный подход сродни представле 
нию о плоской Земле, показавшему свою неэффективность еще 20 лет на 
зад. Лидеры разработки ПО хорошо осознавали, что лежит за Геркулесо# 
выми столпами – инженерия ПО, где уже появились свои Марко Поло, Вас 
ко да Гама и Фернан Магеллан, исследовавшие новый мир совершенных 
методик разработки ПО. Как описано в главе 12, огромные богатства мето 


Новый органон 

дов написания ПО лежат в морях, которые хорошо изучены, но куда редко 
заходят корабли обычных практик ПО. 

Формирование профессии 

учетом огромного разрыва между лучшими и худшими фирмами, за Снимающимися разработкой ПО, задача сегодняшнего дня заключает# 
ся не столько в том, чтобы развить передовые методики, сколько в том, 
чтобы подтянуть к ним средний уровень разработки ПО. Новый мир до 
статочно хорошо изучен, пора уже его освоить. Традиционный способ по 
вышения среднего уровня в отрасли, напрямую затрагивающей жизнедея 
тельность общества, состоит в создании официальной профессии. 

Хотя само слово «профессия» часто употребляется небрежно, стоящее за 
ним понятие имеет давно устоявшееся юридическое значение. В «Своде фе 
деральных постановлений США» (СФП) говорится, что лицо, выполняющее 
«профессиональные обязанности», отличают несколько характеристик. 

Как правило, профессиональная работа требует глубоких знаний науки 
или обученности в какой# либо области, которые приобретаются в процес 
се продолжительной специальной учебы и подготовки. В СФП делается 
различие между профессиональной подготовкой и общим научным обра 
зованием, а также подготовкой к работе согласно стандартным процеду 
рам, будь то мыслительный, ручной или физический труд. Далее в СФП 
указывается, что профессиональная работа может быть творческой и ху# 
дожественно изобразительной. Это зависит главным образом от изобре 
тательности, воображения или таланта исполнителя. 

По определению СФП профессиональная работа требует последова# 
тельной реализации собственных суждений и права выбора. Ей свойстве 
нен интеллектуальный характер и смена форм. И снова, как мы видим, СФП 
отличает ее от рутинного мыслительного, ручного или физического труда. 

Многие разработчики ПО увидят в определении профессии, даваемой 
в СФП, характеристики своей собственной работы. Эта работа, несомнен# 
но, требует глубоких знаний (или в любом случае подробных технических 
сведений), и ее возможности связаны со специальным обучением и подго# 
товкой. Разработка ПО содержит значительный элемент творчества и, ко# 
нечно, требует применения суждений и права выбора. Таким образом, ра 
бота, выполняемая разработчиками ПО, отвечает определению «профес 
сиональной работы», данному в Своде федеральных положений США. 


66 
ГЛАВА 6 

Но СФП лишь формулирует определение профессии. Судебные преце# 
денты (реальные судебные дела) наполняют его несколько иным содержа 
нием. Согласно им, профессия – это [69]: 

• Глубокие познания и серьезная подготовка. 
• Кодекс поведения, устанавливающий более высокие этические стан 
дарты, чем те, которые обычно допускаются на рынке. 
• Система дисциплинарных наказаний для профессионалов, нару 
шающих этот кодекс. 
• Высокая социальная ответственность по сравнению с личной выго 
дой и соответствующая обязанность соблюдать профессиональную 
этику. 
• Необходимость получения лицензии перед началом практической 
деятельности. 
Так насколько же соответствует этим критериям разработка ПО? 

В поисках профессии инженерии ПО 

Г 
Г 
эри Форд (Gary Ford) и Норман Е. Гиббс (Norman E. Gibbs) из Институ# 
та инженерии ПО сформулировали восемь элементов зрелой сформи# 
ровавшейся профессии [46]: 

Начальное профессиональное образование. Профессиональные работ# 
ники обычно начинают профессиональную карьеру с прохождения 
университетской программы в избранной ими области – в медицин 
ском, инженерном, юридическом вузе и т. д. 

Аккредитация (аттестация). Аттестация университетских программ 
осуществляется органами надзора, которые определяют степень соот# 
ветствия программ целям образования. Этим обеспечивается наличие 
необходимой подготовки у выпускников вузов, дающей возможность 
начать профессиональную деятельность по его окончании. Совет по 
аккредитации программ в области техники и технологии (Accreditaton 
Board for Engineering and Technology – ABET) осуществляет надзор за 
программами технических дисциплин в США. Аналогичная организа 
ция – Инженерный аккредитационный совет (Canadian Engineering Ac 
creditation Board – CEAB) – действует в Канаде. 

Развитие практических навыков и приемов. В большинстве профессий 
для овладения профессиональными навыками одного только образова 
ния недостаточно. Начинающим профессионалам необходима практи 


Новый органон 

Профессиональное Инфраструктура Влияние 
развитие поддержки профессионального 
специалиста профессии сообщества 

Начальное 
профессиональное 
образование 
Одно из двух или оба: 
Развитие 
практических 
навыков и приемов 
Сертификация Лицензирование 
Аттестация 
Профессиональные 
сообщества 
Кодекс этики 
Профессиональное 
развитие 
Полный 
профессиональный статус 
Рис. 6.2. В сформировавшихся отраслях профессиональное развитие 
проходит через все основные ступени (или их большинство) 
ка применения своих знаний, перед тем как принять на себя ответст# 
венность за выполнение работ в выбранной области. У врачей преду# 
смотрено три года ординатуры. Бухгалтеры (CPA) должны один год от 
работать в утвержденной специальным комитетом организации, чтобы 
получить лицензию. Профессиональные инженеры должны иметь 
по крайней мере 4 года опыта практической работы. Обязательный пе 
риод ученичества гарантирует, что в профессию попадут люди, имею# 
щие опыт выполнения работы на требуемом уровне компетентности. 

Сертификация. Завершив образование и развив практические навыки, 
профессионал должен сдать один или несколько экзаменов, чтобы до 
казать, что он овладел необходимым минимумом знаний. Врачи сдают 


68 
ГЛАВА 6 

экзамены в соответствующих профессиональных советах. Бухгалтеры 
сдают экзамен на звание (Certified Public Accountant – CPA). Инженеры 
сначала сдают экзамен по основам инженерии по окончании колледжа, 
а затем, примерно через четыре года, экзамен по специальности. В не 
которых профессиях требуется подтверждать сертификат через опре 
деленные периоды времени. 

Лицензирование. Лицензирование аналогично сертификации, за тем 
исключением, что оно носит обязательный характер и осуществляется 
государственными органами. 

Профессиональное развитие. От профессионалов требуется актуали# 
зировать свое специальное образование. Непрерывное профессио# 
нальное образование поддерживает на необходимом уровне или улуч# 
шает знания и умения работников, после того как они приступили 
к профессиональной деятельности. Требование профессионального 
развития особенно сильно в тех специальностях, где область техниче# 
ских знаний подвержена быстрым переменам. Здесь пальму первенства 
удерживает медицина – в силу постоянного совершенствования лекар 
ственных препаратов, терапии, медицинского оборудования, методов 
диагностики и лечения. Требование профессионального развития по 
могает обеспечить сохранение минимально необходимого уровня 
компетенции на протяжении всей карьеры. 

Профессиональные сообщества. Профессионалы считают себя члена 
ми сообществ, состоящих из подобных им индивидуумов, которые ста 
вят профессиональные стандарты выше своих личных интересов или 
интересов работодателей. Поначалу профессиональные сообщества 
содействуют обмену опытом и знаниями, но со временем их функции 
расширяются и включают определение критериев сертификации, управ# 
ление ее программами, формулировку стандартов аттестации и этиче# 
ских кодексов, а также мер дисциплинарного воздействия на наруши# 
телей этих кодексов. 

Кодексы поведения. В каждой профессии существует этический кодекс, 
регулирующий поведение людей, принадлежащих к данному сообще 
ству профессионалов. В кодексе не просто указывается, что должно де 
лать, а что нет. За его нарушение профессионалы могут быть исключе# 
ны из своих профессиональных сообществ или лишены лицензии 
на профессиональную деятельность. Соблюдение признанного этиче# 
ского кодекса поведения помогает профессионалам ощущать свою 


Новый органон 

принадлежность к уважаемому сообществу, а меры по обеспечению 
этических стандартов помогают поддерживать некий минимальный 
приемлемый уровень поведения. 

Помимо восьми характерных элементов профессии, выделенных Фор 
дом и Гиббсом, во многих профессиях появляется девятый, который ско# 
рее относится к целым организациям, нежели к отдельным работникам: 

Сертификация организаций. Во многих отраслях лицензию должны 
получать не только отдельные профессионалы, их организации тоже 
должны быть сертифицированы. Бухгалтерские фирмы проходят про# 
верки такими же организациями. Больницы и университеты тоже атте# 
стуются. В таких сложных сферах деятельности, как бухгалтерский 
учет, образование и медицина, сертификация организаций гарантиру# 
ет надлежащий уровень выполнения работы, который не может быть 
достигнут за счет компетентности только индивидуумов. Качества, ха# 
рактеризующие саму организацию, могут влиять на этот уровень так же 
сильно, как и характеристики отдельных работников. 

Форд и Гиббс указывают, что многие непрофессиональные виды дея# 
тельности обладают определенным количеством перечисленных элемен 
тов#характеристик. Например, в штате Калифорния требуется иметь ли 
цензии обивщикам, боксерам любителям, частным детективам и жокеям 
в скачках на мулах, но эти виды деятельности не требуют большинства 
других элементов профессиональной работы. Все обычные профессии 
обладают почти всеми названными элементами. 

Для каждого из элементов, формирующих профессию, Форд и Гиббс 
также определили несколько уровней зрелости: 
Отсутствие. Данный элемент просто не существует. 

По необходимости. Элемент существует, но только в отдельных невзаи# 

мосвязанных случаях. 
Сформировавшийся. Элемент существует и четко определяется в кон# 
кретной (specific) профессии. (Форд и Гиббс употребляют термин «кон 
кретный» , но мне кажется, что он лишь сбивает с толку.) 

Зрелый. Элемент существует в течение длительного времени и активно 
поддерживается и совершенствуется каким либо профессиональным 
органом. 

Зрелость профессии означает, что ее элементы достигли необходимой 
стадии. Разумеется, понятие зрелости постоянно меняется. Некоторые эле# 


70 
ГЛАВА 6 

менты, казавшиеся зрелыми лет 30 назад, сегодня уже не представляются 
таковыми, а нынешняя зрелость других не будет признаваться через 30 лет. 

В табл. 6.1 описывается зрелость профессии инженерии ПО. В основ# 
ном профессия сформировалась, но некоторые элементы поотстали, а не# 
которые продвинулись к стадии зрелости. Положения, сформулирован 
ные в таблице, обсуждаются более подробно далее. 

Таблица 6.1. Зрелость элементов профессии инженерии ПО [46] 

Элемент 

Начальное 
профессиональное 
образование 

Аккредитация 
(Аттестация) 

Развитие практических 
навыков и умений 

Сертификация 

Лицензирование 

Текущее состояние 

В промежутке между «по необходимости» и «сформи# 
ровавшимся». Степень бакалавра компьютерной нау 
ки, электротехники, математики и т. п. составляет 
обычную подготовку для вступления в профессию. 
Имеются десятки программ для получения степени 
магистра инженерии ПО. В последние годы иниции# 
рованы многочисленные программы для студентов 
старших курсов, но пока лишь немногие успели за# 
вершить эти программы. 

Сформировавшийся. Указания по аттестации сейчас 
формулируются рабочей группой от IEEE Computer 
Society и ACM, но еще не реализованы.a 

Сформировавшийся. Разработаны методические ука# 
зания по навыкам и умениям, которыми должен об 
ладать инженер ПО, чтобы начать заниматься этой 
профессией. 

Сформировавшийся. Коммерческие поставщики ПО, 
такие как Microsoft, Novell и Oracle, уже многие годы 
предлагают программы сертификации, связанные 
с технологиями. С 2002 г. IEEE Computer Society пред# 
лагает Свидетельство сертифицированного профес# 
сионального разработчика ПО как подтверждение 
общего статуса в инженерии ПО. 

По необходимости. В штате Техас профессиональ# 
ные разработчики ПО лицензируются согласно по# 
ложению, принятому в 1998 г. В провинциях Британ# 
ская Колумбия и Онтарио регистрация профессио# 
нальных инженеров ПО началась в 1999 г. 


Новый органон 

Элемент 

Профессиональное 
развитие 

Профессиональные 
сообщества 

Кодекс этического 
поведения 

Сертификация 
организаций 

Текущее состояние 

По необходимости; тенденция приближения к сфор# 
мировавшемуся. Некоторые организации опублико# 
вали методические указания по профессиональной 
разработке ПО. (См. основные направления непре# 
рывного образования IEEE Computer Society на сайте 
www.computer.org/certification и такой же документ 
фирмы Construx на сайте www.construx.com/ladder.) 

Сформировавшийся уровень с тенденцией прибли 
жения к зрелости. Существуют IEEE Computer Society, 
ACM (Association for Computer Machinery) и другие 
профессиональные ассоциации. Эти сообщества 
прямо указывают, что они представляют инженерию 
ПО. Весь комплекс продуктов и услуг, необходимых 
для поддержки инженеров ПО как профессионалов, 
эти сообщества не предлагают. Они не могут прини 
мать дисциплинарные меры к нарушителям этиче# 
ского кодекса инженерии ПО. 

Сформировавшийся. ACM и IEEE Computer Society 
приняли кодекс этического поведения для инжене# 
ров ПО. Этот документ пока не принят в отрасли и не 
получил широкого признания. 

Сформировавшийся уровень с тенденцией прибли 
жения к зрелости. Институт инженерии ПО сформу 
лировал модель зрелости в разработке ПО, которую 
он активно продвигает и совершенствует. С 1987 г. 
модель использовалась для оценки более полутора 
тысяч организаций, но повсеместно пока не приме# 
няется.b Сертификация согласно ISO 9000#9004 ши 
роко признана, особенно в Европе. 

a Текущий статус описан на сайтах www.computer.org/ccse и www.computer.org/eduF 
cation/ 

b Следует отметить, что за последние два года популярность сертификации по мо 
делям качества процессов разработки ПО CMM и CMMI, разработанным Инсти# 
тутом инженерии ПО, резко возросла. Особенно это относится к индийским, 
ирландским и российским компаниям#разработчикам ПО, которые связывают 
сертификацию на 4 и 5 уровнях модели качества процессов СММ и СММI с укреп# 
лением своих позиций на рынке «офшорного программирования». – Примеч. 
науч. ред. 


72 
ГЛАВА 6 

Проход через Геркулесовы столпы 

И
И
нженерия ПО пока не полностью отвечает определению профессии. 
Еще только формируется система доступного начального образова 
ния. Сертификация получила распространение лишь в 2002 г. Лицензиро 
вание доступно лишь крошечной доле занятых в разработке ПО. Этиче# 
ский кодекс существует, но соблюдение его положений не обеспечивается 
применением дисциплинарных мер. Ведется большая работа по ускоре# 
нию продвижения инженерии ПО к сформировавшейся и зрелой стадиям. 

Применив научный метод Бэкона к инженерии ПО, можно определить 
три шага, которые необходимо сделать, чтобы помочь инженерии выйти 
на уровень зрелости: 

Освободить мышление от предрассудков. Отрасль ПО должна отказать 
ся от пагубного пристрастия к разработке ПО по принципу «написать 
и исправить», о котором давно известно, что он никому не выгоден. 

Систематически накапливать наблюдения и опыт. В фирмах начали 
систематизировать данные об эффективности практических методик 
разработки ПО и оценивать, какие из них приносят наибольший успех. 
Причем некоторые фирмы достигли впечатляющих результатов. Дру# 
гие должны последовать их примеру. 

Остановиться, посмотреть, что получено, и сделать первоначальные 
выводы. Некоторые из таких выводов сделаны в данной книге. 

Сфера разработки ПО подошла к одному из поворотных пунктов. Мож 
но остаться в удобном мирке программирования по принципу «напишем 
и исправим», не пытаясь вырваться за пределы Геркулесовых столпов и не 
стараясь добиться огромных преимуществ, которые сулят исследования ли 
деров ПО. Но можно смело рвануться вперед к новой профессии инжене 
рии ПО и начать обживаться в мире высокой производительности, сниже# 
ния расходов, укороченных сроков разработки и более высокого качества. 


ЧАСТЬ ВТОРАЯ 

Индивидуальный 
профессионализм 

ГЛАВА СЕДЬМАЯ

П

«Предпочтение 
отдается сиротам» 

Требуются молодые, жилистые, худые парни не старше 18 лет. 
Обязательно опытные наездники, готовые ежедневно риско1 
вать жизнью. Предпочтение отдается сиротам. Зарплата 
25 долларов в неделю. 

ОбЪявление о приеме на работу компании курьерских 
и грузовых перевозок PONY EXPRESS, 1860 г. 

Мы отдаем себе отчет, что квалификационные, интеллекту1 
альные и личностные качества нужных нам кандидатов чрез1 
вычайно редки, и это отражается в предлагаемых вознаграж1 
дениях. В свою очередь,мы рассчитываем на ПОЛНОЕ И АБ1 
СОЛЮТНОЕ ПОДЧИНЕНИЕ успеху проекта – преодоление 
всех препятствий ради создания программного продукта в ус1 
тановленный срок и в рамках выделенных средств. 

ОбЪявление о приеме на работу разработчиков ПО, 19951 

Сложившийся стереотип представления о программисте – это застенчи 
вый юноша, работающий в полутемной комнате, глубоко сосредоточив 
шись на магических формулах, которые заставляют компьютер выполнять 
его волю. Программист может работать без отрыва по 12–16 часов, часто 
просиживает ночами, реализуя свои художественные замыслы. Питается 
пиццей и «Твиксами». Если его оторвать от работы, начинает бурно выра 
жать эмоции, выкрикивает, адресуясь к источнику беспокойства, загадоч# 
ные аббревиатуры, вроде TCP/IP, RPC, RCS, ACM и IEEE. Программист может 

The Seattle Times, October 8, 1995. Выделено в оригинале. 


76 
ГЛАВА 7 

нарушить свою сосредоточенность лишь для участия в конгрессах люби# 
телей Star Trek или чтобы посмотреть повторный прогон «игрушки» Monty 
Python. Иногда его считают незаменимым гением, иногда эксцентричным 
художником. В его и только в его голове хранится вся необходимая ин 
формация. Он спокоен за свою работу, хорошо понимая, что в силу его 
нужности лишь горстка достойнейших может претендовать на его место. 

Издание USA Today сообщило, что распространенный стереотип фана 
та #компьютерщика настолько укоренился в сознании людей, что студенты 
всех курсов называли эту специальность среди последних при выборе 
карьеры.1 Газета Wall Street Journal указывала на трудности, с которыми 
сталкивались съемочные группы, пытаясь сделать интересный материал 
о ведущих компаниях ПО, поэтому каждый раз снималась картинка – 
офисный центр, кабинка, стол с каким# то ящиком и сидящий за ним со 
трудник [18]. Иногда этот стереотип подпитывается и самими профессио 
налами. Газета The New York Times цитировала слова, якобы сказанные со 
директором программы «компьютероведения» Стэнфордского универси 
тета, что занятие программным обеспечением «нагоняет скуку, убиваю 
щую интеллект».2 И все это несмотря на то, что профессии, связанные 
с ПО, получают высшие рейтинги в таких авторитетных источниках, 
как ежегодное издание Jobs Rated Almanac [73]. 

Насколько верен этот стереотип и как он влияет на профессию про# 
граммиста? Взглянем сначала на личность программиста, а затем на дру 
гие составляющие этого стереотипа. 

Характеристики типа личности по МайерсFБриггс 

Р
Р
аспространенный способ классификации личности разработали Кэт# 
рин Бриггс (Katherine Briggs) и Изабель Майерc #Бриггс (Isabel Briggs 
Meyers)). Способ так и называется – классификатор типа личности 
по Майерс Бриггс, или сокращенно MBTI. Согласно этому методу, люди де# 
лятся на типы личности по четырем классификационным признакам: 

Экстраверсия (Extraversion – E) или интроверсия (Introversion – I). Пер 

вые сосредоточены на окружающем мире людей и вещей. Вторые боль 

ше погружены в мир воображаемых идей. 

1 

USA Today, February 16, 1998, pp. 1B–2B. 

2 

«Software Jobs Go Begging», The New York Times, January 13 1998, p. A1. 


«Предпочтение отдается сиротам» 

Ощущения (sensing – S) или интуиция (Intuition – N). Этот признак от 
носится к предпочитаемому способу получения информации для при 
нятия решений. Человек, полагающийся на ощущения, сосредотачива# 
ется на известных фактах, конкретных данных и опыте. Интуитивная 
личность ищет возможности в представлениях и теориях. 

Мышление (Thinking – T) или чувства (Feeling – F). Этот признак отно 
сится к методу принятия решений. В первом случае решения принима# 
ются на основе объективного анализа и логики, во втором – на основе 
субъективных чувств и эмоций. 

Восприятие (Perceiving – P) или суждение (Judging – J). Воспринимаю# 
щая личность предпочитает гибкость и открытые возможности, тогда 
как человек, выбирающий суждения, стремится к контролю и порядку. 

Чтобы определить тип личности по методу Майерс #Бриггс (MBTI), надо 
выполнить тест, в процессе которого присваивается один из четырех при# 
знаков категории, то есть общий тип обозначается четырьмя буквами, на# 
пример ISTJ или ENTJ. Эти буквы указывают на наклонности и (или) тен 
денции поведения личности. При этом они не определяют поведение че# 
ловека в конкретной ситуации. Несмотря на наличие черт интроверта, 
можно развивать характеристики экстраверта, чтобы чувствовать себя бо 
лее свободно, например, в деловом окружении. Такой человек получит 
признак «I», хотя большинство коллег назовут его экстравертом. 

Результаты теста MBTI разработчиков ПО 

П
П
о результатам двух крупных исследований определился наиболее ха 
рактерный для разработчиков ПО тип личности – ISTJ («интроверт, 
опирающийся на ощущения, мыслитель, склонный к суждениям») [81], 
[133]. Этот тип личности склонен к серьезности и спокойствию, практи 
чен, аккуратен, логичен и достигает успеха за счет сосредоточенности 
и скрупулезности. От 25 до 40% разработчиков ПО принадлежат именно 
к этому типу [16], [81], [133]. 

В соответствии со сложившимся стереотипом программисты – дейст# 
вительно интроверты. От одной до двух третей сообщества разработчиков 
ПО – интроверты по сравнению с примерно одной четвертой долей ин# 
тровертов среди людей в целом [81], [133]. Частично этот факт может объ 
ясняться большей долей интровертов среди стремящихся получить выс 
шее образование, а программисты в большинстве своем более образован# 


78 
ГЛАВА 7 

ны, чем население в среднем. Около 60% разработчиков ПО имеют сте# 
пень бакалавра по сравнению с 30% прочих людей.1 

Признаки S/N (ощущения/интуиция) и T/F (мышление/чувства) осо 
бенно интересны, поскольку характеризуют личностный стиль принятия 
решений. От 80 до 90% разработчиков ПО относятся к типу T по сравне# 
нию с 50% среди прочего населения [16], [81], [133]. По сравнению со сред 
ним уровнем «мыслители» более логичны, аналитичны, им свойственен 
научный поход, они бесстрастны, хладнокровны, беспристрастны, их 
больше волнует правда, чем чувства людей. 

Что касается S и N, то здесь разработчики ПО делятся почти поровну, 
и разница между двумя типами сразу же распознается ими же самими. Лю# 
ди типа S живут в фактическом мире достижимого сегодня, они точны, кон 
кретны и практичны, стремятся к специализации, склонны глубоко разра 
батывать одну идею, а не несколько замыслов сразу. Люди типа N живут 
в мире возможного, теоретического, склонны к обобщениям и исследова 
нию нескольких противоположных идей. Примером S# типа может служить 
прекрасный программист, в деталях освоивший конкретный язык про# 
граммирования или технологию. Пример N# типа – разработчик, рассмат 
ривающий широкий спектр возможностей и отмахивающийся от техниче# 
ских деталей как от несущественных проблем реализации. Наличие лично# 
стей S# типа часто подчеркивается присутствием людей N# типа, поскольку 
первые вникают в технические детали раньше, чем вторые почувствуют, 
что вопрос достаточно исследован вширь. В обратной ситуации первые 
(N тип) отсеивают одно решение за другим раньше, чем вторые (S тип) 
смогли достаточно глубоко изучить конкретную техническую область. 

Личные качества великих изобретателей 

оказатели MBTI позволяют глубже рассмотреть типичные личност# Пные качества программистов, однако по ним нельзя сделать оконча 
тельный вывод. Важной группой качеств разработчика ПО являются навы# 
ки инженерии ПО. Многие программисты стремятся стать выдающимися 
разработчиками. В чем же главные черты великих изобретателей? Соглас 
но исследованию, посвященному великим изобретателям в целом [52] (не 
только создателям ПО), наиболее творчески мыслящие представители 

1 

National Center for Education Statistics, 2001 Digest of Educational Statistics, Docu 
ment Number NCES 2002130, April 2002. 


«Предпочтение отдается сиротам» 

этой категории, дающие ответы на проблемы человечества, с кажущейся 
легкостью дрейфуют в области между крайними точками S/N, T/F и P/J. 
Они могут уходить от всестороннего подхода к узко направленному, от 
интуитивного мышления к логическому, от теории к деталям. Примерами 
таких великих творцов были Леонардо да Винчи и Альберт Эйнштейн (хо 
тя вряд ли им приходилось выполнять тест MBTI). 

Великие изобретатели владеют массой стандартных приемов для реше# 
ния каждой новой задачи. Если проблема вписывается в готовую методику, 
она может быть легко решена уже известным способом. 

Великие изобретатели в совершенстве владеют своими инструментами. 

Они не боятся сложностей, наоборот, великие сложности их только 
притягивают. Однако их цель состоит в том, чтобы упростить то, что ка 
жется сложным. Великий Эйнштейн говорил, что все должно быть про 
стым, насколько это возможно, но не проще. Французский писатель и лет# 
чик Антуан де Сент#Экзюпери утверждал то же самое, сказав, что совер 
шенство достигается не тогда, когда больше нечего добавить, а когда боль# 
ше ничего нельзя отнять. 

Великие изобретатели ищут оппонентов для своих работ. Возникаю 
щая таким образом обратная связь позволяет испробовать и отвергнуть 
многие возможные решения. 

У великих изобретателей, конечно, бывают и неудачи, но они стараются 
учиться на ошибках. Испытываются и отбрасываются различные вариан 
ты, часто совершаются ошибки, но великие изобретатели находят свои не 
дочеты и исправляют их. Они упорно продолжают придумывать новые ва 
рианты, даже когда другие давно уже оставили попытки решить проблему. 

Великие не избегают применения грубой силы для решения задачи. То 
мас Эдисон искал материал для нити лампочки накаливания почти два года, 
испытав тысячи различных материалов. Как# то помощник спросил его, как 
у него хватает сил продолжать поиск после стольких неудач. Эдисон просто 
не понял вопроса. В его понимании неудач не было. Он мог бы ответить: 
«Какие неудачи? Я теперь знаю тысячи материалов, которые не годятся». 

Великие изобретатели должны обладать творческим мышлением, по 
зволяющим выдвигать множество вариантов решения проблемы. Основой 
массы исследований является творчество, и здесь прослеживаются неко 
торые общие черты. Великие изобретатели любопытны, но их любопытст# 
во носит расширенный характер. Они энергичны, достаточно уверены 
в себе и настолько независимы в своих суждениях, что изучают и исполь 


80 
ГЛАВА 7 

зуют концепции, которые считаются глупостью. Их интеллектуальная че# 
стность позволяет им отделить свои собственные представления от того, 
что, по общепринятому мнению, им следовало бы думать. 

У великих изобретателей есть неуемная тяга к созиданию. Это может 
быть строительство зданий, создание электронных схем или компьютер# 
ных программ. Они испытывают тягу к действию: простое познание реаль# 
ности их не удовлетворяет, и они чувствуют обязанность применить свои 
познания к реальным ситуациям. Для великих изобретателей непримене 
ние знаний равносильно незнанию. 

Программисты живут ради открытий, приводящих к революционным 
решениям в проектировании ПО. Мне кажется, это одна из причин, делаю# 
щих сходство разработчиков ПО и Монти Питона более обоснованным, 
чем это могло бы показаться на первый взгляд. Монти Питон насмехается 
над социальными условностями, опираясь на неортодоксальное противо# 
поставление элементам современности и культуры. Точно такое же неза 
висимое креативное мышление, которое стимулирует создание сценариев 
у Монти Питона, рождает инновационные технические решения и в про# 
ектировании ПО, к которым стремятся программисты. 

Некоторые из названных качеств вписываются в стереотипный образ 
программиста, другие нет. Незнакомым с разработкой ПО людям програм# 
мирование может показаться сухим и нетворческим делом. Те же, кто зна 
ют программирование изнутри, отлично понимают, что самые громкие со 
временные проекты были бы невозможны без высшей степени творчества 
в создании ПО. Анимация, исследования космоса, компьютерные игры, ме# 
дицинские технологии – трудно назвать передовые сферы деятельности 
человека, которые не опирались бы на творчество разработчиков ПО. 

Но оставим стереотипы в стороне. Самим разработчикам ПО хорошо 
известно, что программирование дает возможность создавать нечто из ни 
чего и приносит такое же удовлетворение, как создание скульптур или кар 
тин, написание книг или любая другая деятельность, творческий характер 
которой более очевиден. Так, говорите «нагоняет скуку, убивающую интел# 
лект»? Не думаю. 

Полная и абсолютная отдача 

тереотип представления о программисте, работающем по 12–16 часов Св день, содержит больше чем зерно истины. Для того чтобы разработка 

ПО была эффективной, необходима способность сконцентрироваться ис 


«Предпочтение отдается сиротам» 

ключительно на задаче программирования. Это требует жертв. Сконцентри 
ровавшись на программировании, люди теряют ощущение времени. Ото# 
рвавшись от утренней работы, можно вдруг увидеть, что уже 2 часа – завтрак 
пропал. Посмотришь в пятницу на часы, а они показывают 11 часов вечера. 
Свидание не состоялось или вы забыли сказать жене, что придете поздно. 
Октябрьским днем до вас доходит, что лето закончилось, и вы опять про# 
пустили его, потому что три месяца работали над интересным проектом. 

Рекламное объявление курьерской фирмы в первом эпиграфе к этой 
главе могло бы быть смело применено сегодня к некоторым разработчи 
кам ПО. Когда приходится работать так много, то под угрозу могут попасть 
семья, друзья или другие социальные привязанности. Вот как описывает 
самоотдачу программистов, работавших над созданием ОС Windows NT, 
Паскаль Захарий (Pascal Zachary) [146]: 

«Работа пронизала само их существование. Друзья отошли на второй 
план. Супружеские узы поистрепались или совсем разорваны. Детям не 
уделялось внимание или они отодвигались в сторону. Хобби забыты. 
Компьютерная программа стала значить все. Если и лелеялись какие# то 
личные мечты, то лишь как средство отвлечься от создания NT.» 

После завершения проекта Windows NT одни разработчики ушли из 
компании, а другие были настолько опустошены, что вовсе ушли из про# 
граммирования. 

Осознавая эту опасность, некоторые опытные разработчики не всегда 
охотно берутся за отдельные проекты, отдавая себе отчет в том, что это 
означает потерянные вечера, выходные и пропавшее лето. 

Однако всех этих жертв можно избежать, взяв на вооружение практику 
инженерии ПО. В среднем проекте от 40 до 80% времени уходит на ис 
правление дефектов [13], [44], [63], [91], [140]. Практика инженерии ПО по 
зволяет разработчикам прежде всего не делать ошибок, а сделанные устра# 
нять проще и быстрее. Уменьшить выполняемую работу наполовину – 
это очень простой способ сократить рабочую неделю с 80 до 40 часов. 

Существует парадоксальная связь между отношением разработчиков 
к проекту и обязательствами перед компанией. По моему опыту, даже если 
программистам не нравится компания, в которой они работают, они ред# 
ко уходят в середине проекта. Занятые в других сферах могут сказать: «Я 
ненавижу свою фирму. Дождусь середины проекта и уйду. Я им покажу.» 
Разработчики ПО мыслят по #другому: «Я ненавижу свою фирму. Закончим 
проект, и я уйду. Пусть видят, кого они теряют. Я им покажу.» 


82 
ГЛАВА 7 

Программисты, по видимому, еще и чрезвычайно преданы своему за 
нятию. Одна из трудностей, с которыми сталкиваются компании при реа 
лизации договора о неразглашении информации, состоит в том, что мно# 
гие программисты острее чувствуют общность со своими коллегами в дру 
гих компаниях, чем испытывают лояльность к своим работодателям. Мне 
приходилось наблюдать, как многие разработчики ПО обсуждают конфи# 
денциальные материалы компании с коллегами, не связанными догово# 
ром о неразглашении. По их разумению, свободный обмен информацией 
между компаниями важнее, чем защита коммерческих секретов какой то 
отдельной фирмы. Программисты, приверженные движению за открытый 
исходный код, воспринимают эту идею шире и отстаивают мнение, что 
все исходные коды и связанные с ними материалы должны раскрываться 
ради общественного блага [115], [128]. Мне кажется, что самоотречение ра 
ди проекта, продолжительная работа и высокие требования к креативно# 
сти взаимосвязаны. Как только программист мысленно увидел программу, 
которую нужно создать, ее воплощение в жизнь становится доминантой, 
и программист не сможет успокоиться, пока не достигнет цели. 

Способность полностью отдавать себя воплощению замысла свидетель# 
ствует о хороших перспективах формирования профессии инженерии ПО. 
Программисты ощущают стремление посвятить себя не только своим инте 
ресам, но и своим коллегам по проекту или даже всей отрасли ПО. Профес 
сия инженерии ПО и связанные с ней профессиональные сообщества могут 
обеспечить этой преданности профессии созидательную направленность. 

Демография ПО 

сложившемся стереотипе программиста как молодого мужчины есть Вопределенная доля правды. Средний работник отрасли ПО моложе, 
чем в других отраслях в США. Как показано на рис. 7.1, кривая возрастной 
структуры работников отрасли ПО достигает пика в районе 30–35 лет, что 
примерно на 10 лет раньше, чем в других технических отраслях. 

Большинство разработчиков ПО – мужчины. Последние данные (за 
2000 г.) показывают, что 72% получивших степень бакалавра и 83% удосто 
енных степени кандидата наук в сфере компьютерной науки и информа 
тики – это мужчины.1 Только 17% выпускников школ, сдающих экзамен на 

1 

National Center for Education Statistics, 2001 Digest of Educational Statistics, Docu 
ment Number NCES 2002130, April 2002. 


«Предпочтение отдается сиротам» 

продолжение обучения по компьютерной специальности, – девушки, а это 
низший показатель из всех специальностей.1 

Итак, в среднем программисты моложе, чем специалисты других про# 
фессий, и в основном это мужчины. Сравнение с курьерами из Pony Riders 
выглядит все менее натянутым (хотя нет доказательств, что программисты 
в среднем более «жилистые»). 

25% 

20% 

Доля 
работников 
отрасли ПО 
15% 
10% 

5% 

0% 

Возраст 

Рис. 7.1. Возраст основной доли работников отрасли ПО от 30 до 35 лет, 
что на 10 лет меньше, чем в основных группах работников других 
технических отраслей. Источник: [80] 

Образование 

ольшинство программистов постепенно приобретает вкус к профес Бсии. Когда я впервые написал небольшую программу, то думал, что как 
только программа оттранслируется и уйдут все синтаксические ошибки, 
я овладею программированием. Затем я перестал делать синтаксические 
ошибки, но иногда мои программы не работали так, как было задумано. По# 
являвшиеся проблемы оказались более сложными, чем ошибки в синтакси 
се. Поэтому я стал думать, что как только смогу отлаживать программы, 
то овладею программированием. Так я думал, пока я не начал создавать дос 
таточно большие программы, и отдельные участки и блоки не работали 

«Software Jobs Go Begging», The New York Times, January 13 1998, p. A1. 

20 30 40 50 60 70 



84 
ГЛАВА 7 

вместе так, как предполагалось. Тогда я стал думать, что стоит мне правиль 
но разработать программу, как я наконец# то овладею искусством програм# 
мирования. Я спроектировал несколько прекрасных программ, но прихо 
дилось менять их структуры и конструкции, потому что менялись требова 
ния. И я решил, что если смогу формулировать правильные требования, 
то тут уж точно стану настоящим мастером программирования. Но на пу 
ти к постижению этой науки я стал осознавать, что, возможно, никогда не 
овладею искусством разработки ПО. Это понимание стало первым реаль# 
ным шагом к осознанию важности инженерии ПО. 

Программисты разными путями приходят к осознанию этого факта. 
Некоторые идут по пути, похожему на мой, некоторые – другими дорогами. 
Большинство разработчиков хорошо образованы в целом, но есть и само 
учки. Как показывает табл. 7.1, около 60% разработчиков ПО имеют сте 
пень бакалавра или более высокую cтепень. По данным фонда United Engi# 
neering Foundation, около 40% занятых в отрасли ПО получили образова 
ние по специальностям, связанным с ПО [80]. Почти половина получив# 
ших научные степени в области ПО сначала имели степень бакалавра 
по каким# то другим специальностям. Еще 20% всех работников отрасли 
ПО имели степени в таких науках, как математика, инженерия, английский 
язык, история, философия. Остальные 40% закончили университет или 
колледж, но не получили степени по итогам четырехгодичного обучения. 

Таблица 7.1. Образовательный уровень разработчиков ПО1 

Самый высокий достигнутый уровень 
образования 

Высшее образование или его эквивалент, 
или более низкий уровень 
Колледж, без присуждения степени 
Диплом младшего специалиста 
Степень бакалавра 
Ученая степень выше бакалавра 

Удельный вес разработчиков 
ПО, % 

11,8 
17,2 
11,0 
47,4 
12,8 

На сегодняшний день университеты США присуждают ежегодно около 
35 тысяч степеней в сфере компьютерной науки и по смежным дисципли 

1 

Occupational Outlook Handbook 2002F03 Edition, Bureau of Labor Statistics, 2002. 


«Предпочтение отдается сиротам» 

нам,1 тогда как каждый год создается около 50 тысяч рабочих мест для раз# 
работчиков ПО. 

Вывод из этих статистических данных таков: огромная масса разработ 
чиков не получает систематического образования в компьютерной сфере, 
и совсем мало среди них специалистов в такой области, как инженерия 
ПО. Знания эти разработчики получили в процессе работы или самообра 
зования. Формирование стройной системы образования в области инже 
нерии ПО открывает серьезную возможность повысить уровень практиче# 
ской разработки ПО. 

Перспективы занятости 

В
В
сего в отрасли ПО в США сегодня занято около 2 миллионов человек. 
Как видно из табл. 7.2, рабочие места распределены между учеными# 
компьютерщиками, программистами, системотехниками, сетевиками и ин 
женерами ПО. (Некоторые из названий специальностей в официальной 
статистике могут показаться устаревшими, но в них включены современ# 
ные специальности в области ПО). 

Таблица 7.2. Структура занятости в отрасли программного обеспечения [55] 

Специальность 

Ученые# исследователи в области компьютерных 
и информационных технологий 
Программисты 
Инженеры прикладного ПО 
Инженеры системного ПО 

Системные аналитики 
Аналитики сетевых систем и передачи данных 
Другие компьютерные специальности 

Всего 

Число занятых в США 

28 000 
585 000 
380 000 
317 000 
431 000 
119 000 
203 000 

2 063 000 

Перспективы занятости разработчиков ПО в США прекрасные. Соглас# 
но данным Бюро статистики занятости (The Bureau of Labor Statistics), услу 
ги в области компьютеров и обработки данных станут самой быстрорасту 

National Center for Education Statistics, 2001 Digest of Educational Statistics, Docu 
ment Number NCES 2002130, April 2002. 


86 
ГЛАВА 7 

щей отраслью в 2000–2010 гг., причем предполагаемый рост за этот период 
составит 86%. По имеющимся оценкам, в инженерии ПО будет наблюдать# 
ся самый быстрый рост занятости. Он должен происходить по всем специ 
альностям, связанным с компьютерами.1 

Такой же взрывной рост числа разработчиков ПО, как в США, прогнози# 
руется во всем мире. Предполагаемый рост числа занятых иллюстрирует 
табл. 7.3. 

Таблица 7.3. Статистика рабочих мест разработчиков ПО во всем мире [67] 

Год 

1950 100 
1960 10 000 
1970 100 000 
1980 2 000 000 
1990 7 000 000 
2000 10 000 000 
2010 14 000 000 
2020 21 000 000 

Количество программистов 

При сохранении разрыва в 15 тысяч между количеством ежегодно соз# 
даваемых рабочих мест и количеством присуждаемых степеней бакалавра 
спрос на программистов в США должен сохраняться стабильно высоким, 
по крайней мере в течение ближайших нескольких лет, несмотря на цикли 
ческие колебания рынка. Нехватка квалифицированных специалистов по 
стоянно преследует отрасль ПО, начиная с середины 60 #х годов XX века 
[24]. По многим показателям (оплата труда, премии, обстановка, стресс на 
рабочем месте, надежность работы и др.) рабочие места в сфере ПО оцени# 
ваются очень высоко [73]. Программистам хорошо известно, что, несмотря 
на привлекательность рабочих мест, конкуренция не слишком высока. 

Герои и узурпаторы программирования 

Д 
Д 
ефицит квалифицированного персонала в сочетании с распростра 

ненным обычаем ставить слишком оптимистичные сроки подготав 

ливает почву к появлению героя. Программисты# герои берутся за слож 

1 

Occupational Outlook Handbook 2002F03 Edition, Bureau of Labor Statistics, 2002. 


«Предпочтение отдается сиротам» 

ные заказы и пишут горы программ. Они работают сутками сверхурочно. 
Они незаменимы в проектах, где они заняты. Успех, как может показаться, 
держится на их плечах. 

Руководители проектов и любят, и опасаются программистов героев, 
умных, темпераментных и иногда слегка самоуверенных, потому что не 
видят способа закончить проект без их помощи [4]. Найти им замену в ус 
ловиях ограниченного рынка труда вряд ли представляется возможным. 

К несчастью, реальность состоит еще и в том, что кроме программи# 
стов# героев, способных на подвиги в написании монументальных про 
грамм, есть программисты, выступающие в роли источника многочислен 
ных бед, просто не умеющие нормально работать с коллегами. Они прячут 
исходный код и информацию о структуре программы, отказываются уча 
ствовать в технических сверках и следовать стандартам, принятым груп# 
пой разработчиков. Итог их деятельности – невозможность дать другим 
членам группы сделать потенциально ценный вклад в общее дело. Очень 
многие программисты герои оказываются вовсе не героями, а примадон 
нами# узурпаторами программирования. 

Героические усилия индивидуалов могут способствовать успеху проек# 
та, но коллективные усилия, как правило, дают больше, чем достижения от 
дельных участников проекта. Проведенное в IBM исследование показало, 
что программист в среднем тратит лишь 30% своего рабочего времени, ра 
ботая в одиночку [87]. Все остальное время он работает вместе с коллега# 
ми, заказчиком или интерактивно. По результатам исследования 31 проек# 
та ПО самый большой вклад в общую производительность дает слажен# 
ность группы разработчиков [77]. Индивидуальные способности тоже вли# 
яют на производительность, но все же меньше. 

Многим нравится браться за проекты, которые требуют напряжения 
всех сил и способностей. Те разработчики, которые могут испытать свои 
возможности, следовать разумной практике разработки ПО и все же со# 
трудничать со своими коллегами, и есть настоящие программисты# герои. 

Культ личности 

ри внимательном рассмотрении многие названные аспекты стерео Птипа личности программиста оказываются верными. Из #за нехватки 

персонала многие работники (и программисты# герои, и обычные сотруд 
ники) вынуждены работать сверхурочно, и поэтому у них остается меньше 
времени на самообразование и профессиональный рост. Получается 


88 
ГЛАВА 7 

замкнутый круг: нельзя внедрить передовые методики, если нет времени 
на обучение и образование, а этого времени не остается, если не приме# 
нять передовые методики. 

На самом деле усилия, направленные на повышение профессионализ 
ма разработки ПО, говорят о старении программистов. Чем дольше суще# 
ствует отрасль ПО, тем больше средний возраст занятых в ней будет при# 
ближаться к среднему возрасту работающего населения. Огромные лич# 
ные жертвы, допустимые для молодых двадцатилетних сотрудников, труд# 
нее оправдывать, когда они заводят семью, детей, становятся владельцами 
дома и им уже за 30, 40, 50 и даже 60 лет. По мере старения сегодняшнего 
контингента программистов практикуемый подход к разработке ПО на ос 
нове героических усилий отдельных работников может естественным об 
разом уступить место подходам, больше полагающимся на разумный, не# 
жели на напряженный труд. Многие разработчики ПО возьмут на воору 
жение методики, которые позволяют завершить проекты к обещанному 
сроку и все таки быть дома к ужину. 


ГЛАВА ВОСЬМАЯ

Ф

Формирование сознательного 
отношения к ПО 

Тот, кто начал свой путь уверенно, закончит сомнениями, тот же, 
кто сомневается в начале пути, в конце идет уверенным шагом. 

ФРЕНСИС БЭКОН 

В 1970 г. Чарльз Рейч (Charles Reich) опубликовал свой бестселлер «Моло 
дая поросль Америки» [116], в котором выделил три типа восприятия, или 
сознания, названные им сознание 1, сознание 2 и сознание 3. 

Сознание 1(«Con 1», по Рейчу) – это ментальность первопроходца#пер# 
вооткрывателя. Люди, действующие на этом уровне сознания, придают 
большое значение независимости и самоудовлетворению. Они не терпят 
приказов других людей. В высокой степени самодостаточны и надеются 
на себя. Рейч считал, что сознание 1 доминировало в психике американ 
цев в первые века существования страны, и эта ориентация на самостоя 
тельность была существенным фактором развития Америки. 

Сознание 2 – ментальность «серого фланелевого костюма», корпора# 
тивного человека. Люди, функционирующие на этом уровне сознания, по 
нимают, что надо ладить с другими людьми и играть по правилам. Они 
считают, что правила нужны и полезны для общества и все должны их со 
блюдать. По Рейчу, сознание 2 стало превалировать над сознанием 1 во 
второй половине двадцатого века. 

Сознание 3 – это ментальность просвещенной независимости. На этом 
уровне сознания люди функционируют, опираясь на принципы и не обра 
щая особого внимания на правила, которые доминируют в сознании 2, 


90 
ГЛАВА 8 

но делают это без эгоцентризма, доминирующего в сознании 1. К моменту 
опубликования своего труда Рейч утверждал, что время сознания 2 про 
шло, и считал, что сознание 3 на подъеме и скоро заменит сознание 2. 

Хотя при опубликовании книга Рейча нашла отклик в обществе, время 
ее не пощадило. В 1999 г. читатели журнала State голосованием назвали ее 
«самой глупой книгой» двадцатого века. Сознание 3 по Рейчу оказалось 
нирваной хиппи, а «молодая поросль», которую предсказывал Рейч, пре# 
вратилась в общенациональное движение к культуре хиппи в 60–70 х гг. 
прошлого века – психоделические наркотики, расклешенные брюки и т. д. 
С уходом в забвение культуры хиппи в 80#х годах XX века туда же канула 
и достоверность предсказаний Рейча. 

Нет удовлетворения 

озможно, политические предсказания Рейча не выдержали проверки Ввременем, но его классификация сознания дает полезную основу для 
модели отрасли ПО сегодня. 

Сознание 1 в ПО ассоциируется с ориентацией на самодостаточность. 
Эксперты отрасли часто называют разработчиков ПО, работающих на 
этом уровне сознательности, индивидуалистами, программистами ков# 
боями, одинокими рейнджерами и примадоннами. Для таких разработчи# 
ков характерно пренебрежение к чужим идеям. Они любят работать в оди# 
ночку и не любят следовать стандартам. Среди них процветает синдром 
«изобретено не мной». 

Преимущество сознания 1 в том, что не нужно широкой подготовки 
и обучения, а подход «одинокого волка» пригоден в условиях, когда не# 
большое количество программистов работают независимо над небольши# 
ми проектами. Недостаток этого уровня сознания заключается в его пло# 
хой приспособляемости к тем проектам, где необходима именно группа 
программистов, а не отдельные личности. Поэтому ценность сознания 1 
ограничена лишь самыми мелкими проектами. 

Сознание 2 в ПО ассоциируется с упором на правила. Многие разработ# 
чики ПО в конечном итоге осознают ограниченность сознания 1 и прихо# 
дят к пониманию преимуществ работы в группе. Со временем усваиваются 
правила, позволяющие координировать свою работу с работой коллег. Не# 
которые группы разработчиков методом проб и ошибок вырабатывают 
свои неформальные правила, и такие группы могут работать очень эффек 
тивно. Другие перенимают уже готовую методологию. Иногда правила соз# 


Формирование сознательного отношения к ПО 

дают консультанты, примером тому может служить классическая методо 
логия «17 трехзвенных кольцевых сшивателей» («17 three#ring binders»). 
В других случаях правила берутся из книг, например из «The Rational Uni# 
fied Process: An Introduction» [75],1 из книг серии «Экстремальное програм# 
мирование» [8], из моей книги «Software Project Survival Guide» [84].2 Для 
разработчиков на этом уровне характерна сосредоточенность на деталях 
соблюдения правил. Они спорят о том, какая интерпретация правил пра# 
вильнее, и уделяют большое внимание «следованию методологии». 

Сознание 3 в ПО ассоциируется с упором на принципы. На этом уровне 
разработчики понимают, что правила любой сложившейся методологии 
в лучшем случае лишь приближаются к принципам. Эти приближения, воз# 
можно, применимы в большинстве случаев, но не всегда. Требуется широ 
кое образование и интенсивное обучение, чтобы привести разработчика 
к принципам сознания 3, лежащим в основе эффективной разработки ПО, 
но такое образование и обучение нелегко найти. Однако, получив нужное 
образование и подготовку, разработчик вооружается полным арсеналом 
инструментов инженерии ПО для достижения успеха в широком спектре 
проектов. 

В то время как подход сознания 2 заключается в повторяемом примене# 
нии методов и процедур, опора сознания 3 на принципы требует разумно 
го выбора и творчества. На уровне сознания 2 разработчика можно обу# 
чить применению лишь одного подхода. Если выбран разумный подход, 
то разработчик может, опираясь на ограниченный объем знаний, исполь 
зовать его во многих проектах. Разрыв между уровнями сознания 2 и 3 ка 
жется незаметным в сфере применимости сознания 2. Однако разработ 
чик уровня сознания 2 плохо подготовлен к достижению успеха в проек 
тах, не подпадающих под конкретную методологию, которой он обучен. 
По существу разработчик на уровне сознания 2 являет собою индивиду 
альный пример «культа карго», описанного в главе 3, то есть применения 
методики без глубокого понимания причин ее эффективности, что приво# 
дит к непостоянству результатов работы в проектах. 

1 Ф. Кратчен «Введение в Rational Unified Process», 2 е издание, Вильямс, 2002. 

2 С. Макконнелл «Остаться в живых! Руководство для менеджера программных 
проектов», СПб.: Питер, 2006. 


92 
ГЛАВА 8 

Возлюби тех, с кем работаешь 

трасль ПО имеет долгую историю попыток изобрести панацею –Осредство, пригодное на все случаи жизни. В конечном итоге все такие 
«универсальные» методологии отвергались. Среди них и подход к ПО 
на уровне сознания 2, который, разумеется, не срабатывает вне узко задан 
ной области применения именно оттого, что это сознание 2. Мир ПО 
слишком разнообразен, чтобы его можно было охватить каким# то набо 
ром правил. 

Для примера сравним набор правил, который применялся бы при раз 
работке ПО для управления биостимулятором сердечных ритмов и про# 
граммы контроля товаров в магазине видео. Если ошибка в ПО приведет 
к пропаже одного видеодиска из тысячи, прибыль магазина уменьшится 
на доли процента, поэтому ущерб пренебрежимо мал. Если же ошибка 
приводит к отказу одного из тысячи биостимуляторов, то возникает на 
стоящая проблема. Вообще говоря, продукты массового спроса должны 
разрабатываться более тщательно, чем продукты ограниченного примене# 
ния, а если, важную роль играет надежность, то продукт следует разраба 
тывать более внимательно. 

Различие в типах ПО требует дифференцированных технологий раз# 
работки. Методики, которые можно счесть излишне строгими, бюрокра 
тическими и обременительными при разработке ПО для магазина видео, 
могут показаться безответственно торопливыми и неаккуратными или да 
же небрежными, когда речь идет о встроенном ПО управления биостиму# 
лятором. Разработчик на уровне сознания 3 будет использовать разные 
методики при разработке ПО биостимулятора и системы контроля склад# 
ских запасов магазина видео. Разработчик, действующий на уровне созна 
ния 2, попытается применить универсальную методологию «на все разме# 
ры» к обоим продуктам. При этом существует вероятность, что она не бу# 
дет подходить точно «по размеру» ни к одному из продуктов. 

Насколько вы опытны? 

Р
Р
ейч определил три уровня сознания как отражение различных эпох. 
Мне они представляются как три последовательных шага к личност# 
ной зрелости в инженерии ПО. Большинство разработчиков начинают 
с уровня сознания 1, в конце концов переходя к сознанию 2. В некоторых 
условиях сознание 2 обеспечивает эффективность работы и не нуждается 


Формирование сознательного отношения к ПО 

в дальнейшем продвижении. Однако во многих ситуациях необходим пе 
реход на уровень сознания 3. 

Изложенные в учебниках методологии уровня сознания 2 являются ес 
тественным путем для разработчиков уровня сознания 1, которые еще сла# 
бо ориентируются в широком диапазоне методик разработки ПО. Кон# 
кретные детали технологий на основе правил, вероятно, не очень важны. 
Разработчикам, стремящимся перейти от сознания 1 к сознанию 2, доста 
точно сделать первый шаг и уйти от хаоса полностью неуправляемых про 
ектов. Надо освоить набор правил и накопить некоторый опыт их приме# 
нения, перед тем как попытаться перейти на уровень сознания 3. На этом 
уровне появляется достаточное понимание динамики проектов ПО, чтобы 
уметь отойти от правил, когда это необходимо. Весь процесс – это часть 
естественного развития от ученика к подмастерью и далее к мастеру. 


ГЛАВА ДЕВЯТАЯ

Ф

Формирование 
сообщества 

Если вместо сохранения и использования старого 
человек целеустремленно пытается продвинуться к новым 
открытиям, одерживать победы над Природой как работник, 
а не выигрывать как спорщик в дискуссиях с враждебной 
критикой, реально получать ясные и четкие знания, 
а не выдвигать привлекательные и вероятные теории, 
то мы приглашаем его в наши ряды как настоящего ученого мужа. 

ФРЕНСИС БЭКОН 

В 1984 г. я получил свою первую работу на полный рабочий день в качест# 
ве программиста, став аналитиком в консультационной фирме с пятью со 
трудниками. Зарплата была приличная. И диетическая пепси# кола бес 
платно. Кроме того, я начал работать над проектами, связанными с ПК 
фирмы IBM, что было намного интереснее работы с ЭВМ коллективного 
доступа в институте. 

Проекты были масштабнее институтских и длились от нескольких 
дней до месяца. Я научился кое# чему, чего не умел в институте: координи 
ровать свою работу с коллегами; терпеть начальство, постоянно меняю# 
щее технические требования к проектам; работать с заказчиками, которые 
зависели от ПО и предъявляли претензии, если оно работало не так, как им 
было нужно. 

Моя вторая работа программистом – участие в крупном аэрокосмиче# 
ском проекте на базе большой ЭВМ коллективного доступа – была типич# 
ным госпроектом, погрязшим в бумаготворчестве. Неэффективность его 
была просто поразительной. Я убежден, что три# четыре программиста 
с моей прежней работы написали бы за три месяца то, что группа из трид 


Формирование сообщества 

цати разработчиков этого проекта сделала за три четыре года. (Я по #преж# 
нему считаю, что это, скорее всего, так и есть). 

У одного из моих коллег по проекту была книга Никлауса Вирта (Nik 
laus Wirth) «Algorithms + Data Structures» [143],1 и его считали настоящим 
идеологом проекта – скорее по внешним признакам, потому что он читал 
эту книгу. Мне не очень нравилось это занятие, и я с радостью забывал 
о программировании, как только уходил с работы. 

Поработав в аэрокосмической компании, я снова вернулся в неболь# 
шую фирму, где был единственным постоянным программистом. Я при# 
ступил к работе над захватывающим проектом примерно на год по «упа 
ковке» DOS в красивую обертку. Программа на языке C должна была выжи 
мать максимум из тогдашних ПК. Пепси колой меня бесплатно не поили, 
но я был доволен, что снова работал на ПК. Единственная загвоздка была 
в том, что новый проект опять пробудил во мне страсть к программирова 
нию, но вокруг не было никого, кто разделял бы мой энтузиазм. 

К тому времени я проработал около трех лет в отрасли ПО на постоян 
ной основе, но, за исключением руководств по ЭВМ и справочников 
по языкам программирования, не читал учебников по программированию 
и не подписывался на специализированные журналы. (Хотя и приобрел 
книгу «Algorithms + Data Structures».) 

Небольшая фирма, в которой я работал, подавала себя как програм# 
мистская «Команда А». На собеседовании при приеме на работу мне сказа 
ли, что у фирмы есть множество собственных секретных разработок, ко 
торые позволяли ей считаться «Командой А». Когда я приступил к работе, 
мне захотелось узнать эти самые «секреты фирмы». И тогда мой начальник 
вручил мне книжку Филиппа У. Метцгера об управлении проектами ПО 
[89, 90]. Я сразу же ее прочитал и был поражен тем, что автор, по #видимо 
му, прошел во многом через то же, что и я. Планирование моего годичного 
проекта DOS вызывало трудности. Книжка Метцгера решила многие про# 
блемы, и я взял ее за основу при планировании оставшейся части проекта. 

Сразу после прочтения книги Метцгера мне попалась книга Эда Йордо 
на (Ed Yourdon) и Ларри Константина «Structured Design» [144]. Пролистав 
ее, я нашел объяснение трудностям, с которыми мне пришлось столкнуть 
ся при проектировании программы DOS. По рекомендации авторов я пе 
ревернул иерархию вызовов подпрограмм, и все стало на свои места. Я на# 
чал понимать, что, наверное, полезной для меня информации гораздо 

Н. Вирт «Алгоритмы и структуры данных», СПб.: Невский диалект, 2005. 


96 
ГЛАВА 9 

больше, чем я предполагал. В то время мне смутно помнились какие то 
буквы, которые произносили мои преподаватели: А С М и I E E E. У меня 
не было диплома профессионального программиста, но я все равно ре# 
шил попытаться стать членом этих организаций. Я подписался на журна 
лы Communications of the ACM1, IEEE Computer2 и IEEE Software3. Последнее 
издание быстро стало моим любимым. Я нашел статьи, посвященные во 
просам, решение которых позволяло более эффективно выполнять работу: 
как помочь заказчикам принять решение по техническим требованиям, 
как контролировать сложность крупных проектов, как создавать обозри 
мые программы, как координировать работу нескольких программистов 
и т. д. Статьи не были такими расплывчатыми, как в некоторых читаемых 
мной популярных журналах, и я посчитал, что они могли быть полезны 
в моей дальнейшей карьере. 

Это был настоящий водораздел в моем развитии как разработчика ПО. 
До вступления в ряды читателей журнала IEEE Software я рассматривал 
программирование просто как работу. Я работаю – мне платят. Я пришел 
домой с работы и перестал думать о программировании. Став читателем 
журнала, я начал осознавать, что я, хоть и работаю один, не просто про 
граммист одиночка, а член сообщества разработчиков ПО, которых вол# 
нуют проблемы их профессии и которые тратят свое время, чтобы поде# 
литься опытом на благо других. 

Можно предположить, учитывая огромный разброс в уровне образова 
ния и профессионализма в отрасли ПО, что на сегодняшний день пока не 
сложилось серьезное сообщество разработчиков ПО, однако мне кажется, 
что этот разброс делает задачу его формирования еще более насущной. 
В любом сообществе есть более или менее профессиональные члены, и оно 
должно отвечать нуждам как молодых, так и зрелых практиков. Оно долж# 
но учитывать запросы людей с прочной образовательной основой в ком 
пьютерной науке, инженерии ПО и смежных областях и потребности про# 
граммистов #самоучек, ученых, инженеров, бухгалтеров, учителей, врачей, 
юристов и других, которые, как оказалось, зарабатывают на жизнь написа 
нием программ, хотя сознательно так и не приняли решения стать разра 
ботчиками или инженерами ПО. 

1 

См. www.acm.org. 

2 

См. www.computer.org/computer. 

3 

См. www.computer.org/software. 


Формирование сообщества 

Профессиональные ассоциации, такие как компьютерное общество 
IEEE, являются важным атрибутом зрелой профессии. Они открывают воз# 
можность профессионалам со сходным мышлением собираться вместе, 
обмениваться идеями в личном общении, через статьи, группы по интере 
сам и на конференциях. Профессиональные организации поддерживают 
многообразные структурированные способы обмена хитростями и приема 
ми профессии, которые необходимы инженерам ПО, чтобы действитель 
но быть в Команде А. 


ГЛАВА ДЕСЯТАЯ

А

Архитекторы 
и строители 

Инженеры разрабатывают проекты. 
Производители реализуют их в продукте. 

ТЕРРИ МАГИННИС (TERRY MAGINNIS) 

В сформировавшихся сферах деятельности профессии стратифицирова 
ны и специализированы. В строительной индустрии архитекторы и ин 
женеры создают проекты, а генеральный подрядчик по этим проектам 
строит. Обычно генеральный подрядчик передает часть работ специали 
зированным субподрядчикам, монтажникам, сантехникам, электрикам, 
устроителям ландшафта. В отрасли ПО происходит свое разделение на ар 
хитекторов ПО и строителей и специализация по монтажу, сантехнике, 
электрике и т. д. 

Стратификация профессии 

других отраслях профессиональным инженерам обеспечивается под# Вдержка инженеров технологов и техников. Национальный институт 
сертификации инженерных технологий (The National Institute for Certifi# 
cation in Engineering Technologies) предлагает пять классификационных 
групп. Аналогичное вертикальное разделение наблюдается в медицине: 
врачи, ассистенты, фельдшеры, медсестры и санитарки. В юриспруденции 
есть адвокаты, ассистенты и секретари адвокатов. Все сложные виды дея 
тельности стратифицируются. 

Как показано на рис. 10.1, по мере зрелости инженерии ПО профессия 
будет вертикально разбиваться на специальности, требующие большего 
или меньшего объема образования и подготовки. Кто то из разработчиков 


Архитекторы и строители 

получит общее образование в профессиональной инженерии ПО, другие 
обучатся программированию как ремеслу. Некоторые из получивших про# 
фессиональное образование в инженерии ПО пойдут дальше и будут ли 
цензированы по профессиональной инженерии ПО, но большинство ос 
танется на своем уровне. Те, кто получит лицензии, станут аналогом прак 
тикующего врача, а получившие общее образование, но не ставшие пол# 
ными профессионалами,– ассистентами. 

Профессиональные инженеры ПО 

Нелицензированные инженеры ПО/сертифицированные технологи ПО 

Высококвалифицированные разработчики ПО 

Обычные разработчики ПО 


Рис. 10.1. Отрасль разработки ПО стратифицируется вертикально по разным 
уровням профессионализма. Наиболее подготовленные и профессиональные 
работники в целом будут иметь более широкие полномочия, и их труд будет 
лучше оплачиваться 

У инженеров и технологов ПО – сегодняшних программистов – тоже 
будут разные свидетельства профессионализма. Технологи будут эквива 
лентом ассистента или медсестры в медицине, или сертифицированного 
технолога в промышленности. Одни технологи ПО захотят получить ли 
цензии, другие нет. В общем работа, требующая более высокого уровня об# 
разования и подготовки, будет означать большую ответственность и высо 
кий престиж – так же, как и в других профессиях. 

Разработчики ПО, получившие высшие квалификационные сертифи# 
каты, вероятно, будут получать более высокую зарплату, чем другие разра# 
ботчики. Как правило, лицо, получившее профессиональный квалифика# 
ционный сертификат в США, зарабатывает в среднем по крайней мере 
в полтора раза больше, чем лицо, имеющее лишь степень бакалавра [97]. 
Степень мастера позволяет зарабатывать в среднем на 25% больше, чем за# 
рабатывают бакалавры. И этот разрыв, вероятно, будет увеличиваться. Бю# 
ро статистики занятости утверждает, что с 2000 г. по 2010 г. спрос на спе# 
циальности, требующие обычной практической подготовки, вырастет 
на 11%, а на специальности, требующие диплома мастера, – на 23% [100]. 


100 
ГЛАВА 10 

Специализация функций 

омимо стратификации специальностей отрасль ПО нуждается в фор Пмировании специализации. Большинство занятых в ней специалис 
тов – это мастера широкого профиля (сейчас они архитекторы, а вот стано# 
вятся хайтек плотниками, сколачивающими код буквально по строчечке). 
В сформировавшихся профессиях специализация является важнейшим 
элементом. 

Двадцать пять лет назад Фредерик Брукс предложил тип специализации 
в инженерии ПО, в соответствии с которым группа разработчиков дели# 
лась по принципу хирургической бригады. Один главный программист 
(«хирург») создает почти всю программу, а другие члены бригады группи 
руются вокруг него, исполняя четко определенные вспомогательные роли 
[21]. Опытный проект в конце 1960 #х годов, структурированный по этому 
принципу, показал невиданную производительность [6], [7], и Брукс при 
шел к выводу, что подобный тип структуры по принципу бригады хирур 
гов обеспечил такой успех. 

Глядя на этот необычный проект с высоты прошедших двадцати пяти 
лет, думается, что замечательная производительность, возможно, объясня 
ется не конкретным построением группы разработчиков по типу бригады 
хирургов, а высокой степенью специализации работников в проекте. Ис 
следования других методик инженерии ПО показали, что хорошая подго# 
товка по специальности дает больший вклад в эффективность работы, чем 
применение конкретных методик.1 

Сегодня в отрасли ПО складываются две группы специализации: техно# 
логия и инженерия ПО. Как показывает рис. 10.2, специализация техноло# 
гов ПО будет основана главным образом на владении определенными тех# 
нологиями. Различные сертификаты «технологов» уже выдают некоторые 
компании, такие как Microsoft, Novell, Oracle, и Apple Computers. 

1 

Брукс высказывает аналогичную мысль на стр. 257 20 #го юбилейного издания 
книги [21] (Ф. Брукс «Мифический человеко месяц или как создаются программ 
ные системы», СПб.: Символ #Плюс, 2000, стр. 237), хотя не увязывает ее с хирур 
гической бригадой. «Я стал настаивать, чтобы даже небольшие группы студентов 
из четырех человек выбирали себе отдельно менеджера и архитектора ПО. На 
значение на роли в таком небольшом коллективе, может быть, и крайность, но я 
убедился, что это очень удачный ход, способствующий успешной работе даже 
маленьких коллективов». 


Архитекторы и строители 

Инженеры ПО 
Технологи ПО 
Специализация 
инженерии ПО 
Специализация 
технологии 
Рис. 10.2. Помимо стратификации в отрасли ПО развиваются многие 
различные технологические и инженерные специальности 

Но специализация начинает складываться и в инженерии ПО, и это 
важная тенденция. По оценкам Кейперса Джоунза, недостаток специализа# 
ции в инженерии ПО сегодня приводит к низкому качеству, затягиванию 
сроков и перерасходу смет примерно в 90% организаций# разработчиков 
ПО в США [64]. 

Данные табл. 10.1 показывают, что чем больше специалистов по ПО ра 
ботает в компании, тем больше ощущается необходимость в их ориента 
ции на определенный участок работы, а не просто программирование. 
В небольшой организации из 10 инженеров ПО все могут выполнять лю 
бую работу, или же возможны небольшие различия между разработкой, 
тестированием и управлением ПО. В крупных компаниях разработчиках 
ПО, в которых работает по 10 тысяч человек, не менее 20% работающих 
должны быть специалистами, а в некоторых организациях доля специали 
зации может доходить до 40%. Оценивая организационные аспекты, Джо# 
унз выявил свыше ста различных специализаций. 

Конкретные специальности в таблице получены грубым усреднением. 
Доля специалистов по отношению к числу работников общего профиля 
меняется в зависимости от компании и различных схем организации ком# 
паний #разработчиков ПО. 

Преимущества специализации характерны не только для индустрии 
ПО. Практикующему сельскому врачу приходится быть врачом широкого 
профиля, мастером на все руки, но в крупной городской больнице работа 
ют сотни специалистов. Профессиональные инженеры сдают экзамен 
по специальности, как и адвокаты. Специализация – это атрибут зрелости 
отрасли. 


102 
ГЛАВА 10 

Таблица 10.1. Соответствующие специализации в зависимости от размера 
компании [64], [66] 


Число сотрудников ПО 

Доля от числа про. 
Специальность 

граммистов широ. 
10, % 

Менее 

Менее 

Менее 

10 тыс., 

кого профиля, % 

100, % 

1 тыс., % 

% 

Доля специализации 

0 

10–25 

15–35 

20–40 

– 
Архитектура 

Х 

1: 75 
Контроль 

Х 

Х 

Х 

1: 30 

конфигурации 
Оценка стоимости 

Х 

Х 

1:100 
Поддержка/сопрово# 

Х 

Х 

Х 

1: 25* 

ждение клиента 
Администрирование 

Х 

Х 

Х 

1: 25 

баз данных 
Образование 

Х 

1: 250 

и обучение 
Учет функциональ 

Х 

Х 

1: 50 

ных узлов 
Человеческий фактор 

Х 

1: 250* 
Информационные 

Х 

1: 250* 

системы 
Интеграция 

Х 

1: 50 
Обслуживание 

О 

Х 

Х 

Х 

1: 4 

и расширение 
Измерения 

Х 

Х 

1: 50 
Сеть 

Х 

Х 

Х 

1: 50 
Приобретение 

Х 

1:150 

пакетов ПО 
Производительность 

Х 

1: 75 
Планирование 

1: 250* 
Совершенствование 

Х 

1: 200 

процессов 
Обеспечение качества 

О 

Х 

Х 

Х 

1: 25 
Технические 

Х 

Х 

1: 50* 

требования 


Архитекторы и строители 

Число сотрудников ПО 

Доля от числа про. 

граммистов широ. 

Специальность 

Менее 

Менее 

Менее 

10 тыс., 

кого профиля, % 

10, % 

100, % 

1 тыс., % 

% 

Использование в иных 

Х 

1:100 

условиях 
Стандарты 

Х 

1: 300 
Поддержка 

Х 

Х 

Х 

1: 30 

системного ПО 
Технические описания 

О 

Х 

Х 

Х 

1: 15 
Тестирование 

О 

Х 

Х 

Х 

1: 8 
Разработка 

Х 

1: 250* 

инструментария 

* Данная величина оценена на основе описаний Джоунса, но конкретное значе 
ние не приводится. 
О – встречается редко, Х – регулярно. 
Специализации в коллективе 

тдельным проектам специализация так же необходима, как и органи Озациям. В моей компании внедрена организация проектов на основе 
свода знаний Swebok, описанного в главе 5. Даже к самым небольшим про 
ектам привлекаются следующие специалисты: 

• руководитель написания программ; 
• руководитель проектирования ПО; 
• руководитель планирования и отслеживания версий; 
• бизнес# менеджер проекта; 
• руководитель обеспечения качества; 
• руководитель разработки требований. 
В большинстве проектов эти обязанности выполняются по совмести 
тельству, однако опыт показал, что полезно иметь конкретное лицо, отве 
чающее за интересы проекта в каждой из перечисленных сфер. Специали 
зация необходима даже в тех проектах, где занято от пяти до десяти чело 
век. Более подробно об этих областях руководства, включая рекомендуе# 
мые программы обучения для каждой из них, можно узнать на сайте 
компании Construx по адресу www.construx.com/profession. 


104 
ГЛАВА 10 

Время покажет 

редопределен ли вывод о растущей стратификации и специализации, Пили же этот прогноз будет выглядеть нелепым лет через двадцать? 
Как подсказывает мой волшебный кристалл, через достаточный промежу# 
ток времени разработка ПО станет такой же специализированной и стра 
тифицированной областью, как и другие более зрелые отрасли. Это уже 
произошло в медицине, юриспруденции, профессиональных инженер# 
ных дисциплинах. Мой волшебный кристалл, однако, не говорит, сколько 
времени потребуется для формирования специализации и стратифика 
ции инженерии ПО – десять, двадцать лет или больше. 


ГЛАВА ОДИННАДЦАТАЯ

П

Программист 
пишущий 

Чтение нужно не для того, чтобы возражать и опровергать, 
не для того, чтобы соглашаться и верить на слово, 
не ради разговоров и досужей болтовни, 
но чтобы размышлять и оценивать. 

ФРЕНСИС БЭКОН 

В 1987 г. Фредерик Брукс указывал, что «разрыв между лучшими образцами 
разработки ПО и средним уровнем огромен, возможно, он даже больше, 
чем в любой другой инженерной дисциплине. Поэтому распространение 
передового опыта чрезвычайно важно» [20]. В развитие мыслей Ф. Брукса 
Совет по компьютерной науке и технологиям (Computer Science and Tech# 
nology Board) в 1990 г. заявил, что самые крупные достижения в обеспече# 
нии качества и производительности разработки ПО будут сделаны в ре 
зультате распространения эффективных методик – кодификации, унифи# 
кации – и распространения накопленных знаний в форме справочников 
по инженерии ПО [122]. 

Кто же напишет эти справочники? 

В 1837 г. Ральф Уолдо Эмерсон (Ralph Waldo Emerson) выступил с речью, 
которая стала известна под названием «The American Scholar» (Американ 
ский мыслитель). Спустя почти сто семьдесят лет мне кажется, что в ней 
есть ответ на вопрос, кто должен написать справочники по инженерии ПО. 

По мере формирования издательств, выпускающих литературу о ПО, 
большинство книг, посвященных этой теме, создаются шестью категория# 
ми авторов: 

• разработчиками ПО, недавно прекратившими активную деятель# 
ность; 

106 
ГЛАВА 11 

• профессорами университетов; 
• преподавателями семинаров; 
• консультантами; 
• разработчиками «мозговых центров»; 
• разработчиками действующего ПО. 
Каждая из этих групп может внести ценный вклад в общее дело, и было 
бы ошибкой не замечать какую#либо из них. Недавно отошедшие от дел 
специалисты привносят в свои книги годы опыта, глубокое понимание 
и размышления. Профессора университетов информируют о новейших 
исследованиях и разработках. У преподавателей семинаров имеется воз 
можность испытать свои наработки перед сотнями обучающихся, прежде 
чем опубликовать их в книгах. Консультанты ежегодно встречаются с де# 
сятками клиентов и излагают свои соображения на основе знания широ 
кого спектра эффективных и неэффективных методик разработки ПО. 
Разработчики в «мозговых центрах», таких как Xerox PARC, AT&T Labs 
и других, причастны к созданию лучших образцов инженерии ПО. Однако 
я считаю, что главную ношу написания таких книг должны нести разра 
ботчики действующего ПО. 
В своем эссе «Американский мыслитель» Эмерсон проводит различие 
между «созерцателем» и «человеком мыслящим» (это синоним «американ 
ского мыслителя»). Единственная функция созерцателя состоит в том, что 
бы думать. Ощущение жизни приходит к нему через книги, статьи, описа 
ния живого мира, созданные другими людьми. Мыслитель же, наоборот, 
активно действует в мире, вовлечен в профессию или ремесло, время от 
времени останавливаясь для размышлений. Мыслитель твердо ориентиро# 
ван на действия: «Настоящий мыслитель сожалеет о каждой потерянной 
возможности действовать как о пропавшей силе. Это сырье, из которого 
мыслитель создает свои великолепные произведения». Эмерсон утвер 
ждал, что непосредственный опыт критически важен для рождения гения, 
которым способен стать только мыслитель, а не созерцатель. 
Далее Эмерсон говорит, что активность восприятия необходима для по 
нимания того, что об этом мире написали другие мыслящие люди, и для ус 
воения прочитанного. А «когда мозг вооружен действием и воображением, 
любая прочтенная страница вызывает многообразные ассоциации. Каждое 
предложение несет удвоенную силу, а мысль автора широка, как сам мир». 
Если читатель, «не вооруженный действием и воображением», мало что 
вбирает из прочитанного, то писатель, подобный читателю, мало что вкла 


Программист пишущий 

дывает в написанное. Не сопровождаемая действием мысль никогда не по 
родит истину. Читатель сразу ощущает, в чьих словах бурлит жизнь, а чьи 
слова безжизненны. «Я научился догадываться, насколько деятелен говоря 
щий, по яркости или тусклости его речи. Жизнь лежит за нашей спиной, 
как карьер, из которого мы берем глину для плитки и кирпичей сегодняш 
ней кладки. Книги и учебные заведения лишь копируют язык, создаваемый 
в поле и в мастерской». 

Я называю неумение простых созерцателей достоверно излагать мыс# 
ли «синдромом Фенимора Купера» – американского писателя эпохи ос 
воения Америки европейцами, очарованного американскими индейцами 
и написавшего несколько новелл и романов о них, в том числе «Охотник 
за оленями» и «Последний из могикан». Произведения Купера позже едко 
высмеял великий американский писатель и юморист Марк Твен, назвав их 
безнадежными фантазиями [135]. 

В сцене из «Охотника за оленями» Купер описывает, как шесть индей# 
цев вскарабкались на нависающую над рекой ветвь, дожидаясь, когда вверх 
по течению будут тянуть на канате баржу. Индейцы выжидали момент, ко 
гда можно будет спрыгнуть на крышу рубки, расположенной посредине 
баржи длиной около 27 и шириной около 5 метров. Один из них промах 
нулся и упал на корму, а остальные и вовсе попадали в воду. 

Марк Твен был шкипером на речном судне и высмеял Фенимора Купера 
за беспомощное описание предмета, который сам знал в деталях. Во пер 
вых, ветка вряд ли могла выдержать шестерых взрослых мужчин. Далее, 
баржа в треть описанных Купером размеров с трудом могла бы проходить 
повороты и излучины реки – она застряла бы на первом повороте. Что ка 
сается прыжка индейцев на крышу, то вверх по течению баржу могли бы 
тянуть канатом с максимальной скоростью около мили в час, так что у ин# 
дейцев было почти полторы минуты, чтобы прыгнуть на баржу, и около 
минуты, чтобы спрыгнуть с ветви на крышу рубки, – достаточно времени, 
чтобы не рассчитывать до секунды момент прыжка. Тем не менее «куперов 
ские» индейцы все равно ухитрились промахнуться. Возможно, они рас# 
слабились, когда увидели, что ширина реки в том месте, где баржа проплы# 
вала под ними, лишь на пару метров больше ширины самой баржи – мож 
но было сэкономить силы и не карабкаться на дерево, а просто запрыгнуть 
на баржу с берега, но, как заметил Марк Твен, писатель не позволил своим 
индейцам прыгать с берега, поэтому в их неудаче виноват Купер, а не они. 

На 17 #й международной конференции по инженерии ПО Дэвид Парнас 
заметил, что доклады, признанные ведущими на предыдущих конферен# 


108 
ГЛАВА 11 

циях, вероятно, вовсе не были таковыми [106]. Думается, что частично это 
связано с «синдромом Фенимора Купера». Возможно, эти доклады оказали 
влияние на исследователей, но они были бесполезны для практиков, так 
как описываемые методологии были настолько же реальными, насколько 
реальными были индейцы у Купера. 

Практикующие разработчики ПО так же скептически настроены в отно 
шении книг по инженерии ПО, как Марк Твен по отношению к куперов# 
ским творениям. Справочники по разработке ПО считаются теоретизиро# 
ванием, пригодным лишь для небольших проектов, трудно адаптируемыми, 
неэффективными и неполными. Авторы книг о ПО частенько вздыхают, 
что средний разработчик покупает меньше одной книги по данному пред# 
мету в год, однако причины этого, похоже, кроются не за семью печатями. 
Разработчики будут покупать книги, «вооруженные практикой и творчест 
вом», а не те, которые, подобно «куперовским» индейцам, бьют мимо цели. 

Марк Твен утверждал, что лучшие приключенческие романы написаны 
людьми, зорко подмечавшими детали, реально жившими на передовых ру# 
бежах переселенцев. А я убежден в том, что лучшие книги о ПО будут осно 
ваны на работе программистов, которые только что завершили реализа 
цию проектов ПО. Применяя метафору Эмерсона о плитках и кирпичах 
к созданию справочников ПО, можно сказать, что они должны быть пло# 
дом трудов «программиста пишущего», активно участвующего в проектах 
написания ПО, размышляющего о своей работе и пишущего о ней. 

Если вы активно работающий программист, я призываю вас писать 
о ваших размышлениях и находках. Если вы работали в проекте и получи 
ли полезный опыт, напишите об этом – неважно, касается ли это написа 
ния программ, обеспечения качества, более эффективного управления 
проектом или даже темы в разработке ПО, у которой еще нет названия. По# 
шлите ваши заметки в журнал или развивайте свои идеи до формата книги. 
Если ваши мысли глубже, чем ваши описания, привлеките консультанта, 
преподавателя семинаров, университетского профессора или более ис 
кусного писателя в качестве соавтора. Не надо беспокоиться, что познан 
ное вами неприменимо к другим проектам. Как говорил Эмерсон: «Успех 
идет по следам каждого шага. Потому что инстинкт безошибочен и побуж# 
дает рассказать ближнему о своих мыслях. Потом становится понятным, 
что, проникая в тайны своего ума, человек познает секреты мышления дру 
гих людей. Все глубже познавая собственные, самые глубокие мысли, чело# 
век с удивлением обнаруживает, что это и есть самая приемлемая, обще 
принятая и универсальная истина» [123]. 


ЧАСТЬ ТРЕТЬЯ 

Организационный 
профессионализм 

ГЛАВА ДВЕНАДЦАТАЯ

З

Золотая 
лихорадка ПО 

В богатстве проявляется порок, в лишениях – добродетель. 

ФРЕНСИС БЭКОН 

Корень предрассудков в том, что люди замечают 
попадания в цель, но не видят промахов. 

ФРЕНСИС БЭКОН 

В январе 1848 г. Джеймс Маршалл (James Marshall) нашел золото в Кали 
форнии в реке Американ возле мельницы, которую он строил для Джона 
Саттера. Сначала Маршалл и Саттер посчитали самородки величиной с го 
рошину помехой: они боялись, что внимание, которое, несомненно, при# 
влекла бы весть о находке, повредит планам Саттера по созданию агроим 
перии. Но за несколько месяцев известие о золоте распространилось, 
и к 1849 г. тысячи мужчин и горстка женщин со всего мира подхватили 
«золотую лихорадку». Они бросились в Калифорнию в поисках состояния, 
и этот процесс получил название Калифорнийской золотой лихорадки. 
Поток золотоискателей на Запад создал новую экономику, подпитывае# 
мую предпринимательством с высоким риском и мечтами быстро разбо# 
гатеть. В дни этого бешеного поиска лишь несколько счастливчиков 
из первопроходцев, приехавших в 1849 г., смогли превратить свою мечту 
в реальность, но она живет… во многих современных компаниях ПО и от# 
дельных разработчиках. 

Уникальность золотой лихорадки в Калифорнии состояла в том, что зо 
лото находили в реках, а не в твердой породе. Поэтому поначалу любой ста# 
ратель с цинковым тазом и духом предпринимателя мог намыть целое со 
стояние. Но к середине 1849 г. большая часть легко добываемого золота бы 


112 
ГЛАВА 12 

ла найдена, поэтому рядовому старателю приходилось по десять часов 
стоять в ледяной воде, поднимая грунт, просеивая и промывая его. Со вре 
менем этот каторжный труд приносил все меньше и меньше золота. Вплоть 
до 1850#х годов изредка еще случались крупные находки, но их хватало 
лишь на новостные сенсации, вдохновлявшие на продолжение стараний. 
Большинство старателей не находили золота, но продолжали искать годами. 

После первых дней золотой лихорадки старателям пришлось прибег 
нуть к более изощренным методам добычи. К началу 1850 х годов стара 
тель одиночка уже не мог обработать свой участок. Ему нужна была по 
мощь других людей и технологий. Сначала золотоискатели стали стихийно 
объединяться в бригады, чтобы построить дамбы, отвести в сторону русла 
рек и добывать золото. Но вскоре потребовались более капиталоемкие ме# 
тоды, и бригады старателей заменили компании. К середине 1850 х годов 
большинство оставшихся золотодобытчиков были работниками корпора 
ций, а не индивидуальными предпринимателями. 

Золотая лихорадка в ПО 

ришествие новых технологий разработки ПО часто означает начало Почередной «золотой лихорадки ПО». Организации и отдельные пред# 
приимчивые люди бросаются в новую технологическую область в надеж 
де, что немного упорного труда, – и они создадут продукт, который сдела 
ет их богатыми. Лично я наблюдал это, когда появились ПК и MS DOS, ко# 
гда состоялся переход от DOS к Windows и когда вычислительные системы 
распространились в Интернете. Можно не сомневаться, что очередной 
приступ не за горами. 

Для разработки ПО по принципу «золотой лихорадки» характерны ме 
тодики с высоким риском и высокой отдачей. Лишь несколько компаний 
смогли закрепиться на конкурентном рынке на заре развития новых тех# 
нологий ПО, и многие золотые самородки новых технологий (удачные 
новые продукты), казалось, валялись под ногами, дожидаясь, что кто #ни 
будь, вооруженный нужным набором инициативы и инновационного 
мышления, поднимет их. Разработчики ПО, по аналогии со старателями 
в Калифорнии, пытались «застолбить участки», опередив других. Обычно 
они работали в паре где#нибудь в гараже, как легендарные дуэты Билла 
Гейтса и Пола Аллена из Microsoft, Стива Джобса (Steve Jobs) и Стива Возня# 
ка (Steve Wozniak) из Apple Computers или Боба Френкстона (Bob Frank 
ston) и Дэна Бриклина (Dan Bricklin) из VisiCalc. 


Золотая лихорадка ПО 

Практические методики, применяемые разработчиками ПО, заболев# 
шими «золотой лихорадкой», обычно ассоциируются со штурмовщиной, 
а не с инженерией: неформализованные процессы, долгие часы работы, 
отсутствие достаточного количества документации, едва проклюнувшееся 
обеспечение качества – другими словами, разработка по принципу «напи 
шем и исправим» отдельными программистами# героями. Такие методики 
не требуют серьезного обучения, у них невысокие издержки, но для подоб# 
ных проектов очень высок риск неудачи. 

Шансы напасть на золотую жилу во время лихорадки ПО примерно та 
кие же, как и во времена Калифорнийской золотой лихорадки, – на каж 
дую удачу приходятся сотни провальных проектов. Но эти небольшие не# 
удачи не так интересны, как крупные успехи, поэтому о неудачах не слыш# 
но. Двое упорно работающих парней, от которых ускользает золото, – 
не очень горячая новость, если только у них в гараже не спрятано что то 
интересное. 

Как и тогда в Калифорнии, проекты ПО, осуществляемые на основе ге 
роизма разработчика во время «золотой лихорадки», настолько прибыль# 
ны в случае удачи, что это убеждает разработчиков ПО в практичности 
рискованных методов разработки, поэтому редкие, но разрекламирован# 
ные успехи разносят вирус «золотой лихорадки» и поддерживают сущест# 
вование методик «героя #программиста». 

Разработка после «лихорадки» 

азработка ПО в «постлихорадочный» период характеризуется более Рметодичным, капиталоемким, менее рискованным и более трудоем# 
ким подходом. В проектах задействуются большие группы разработчиков, 
более формальные процессы, возрастает уважение к стандартам (к со# 
вместимости с предшествующим ПО, отраслевым протоколам и т. д.), рас 
ширяется программная база. Упор делается не на то, чтобы побыстрее вы 
толкнуть продукт на рынок, а на надежность, взаимодействие его с други# 
ми системами, практичность. Разработки ориентированы на использова 
ние проектирования, что вряд ли имело значение во времена «лихорадки», 
но приобрело большой вес по мере «взросления» технологии ПО. 

У разработки ПО по принципу «золотой лихорадки» еще меньше шан# 
сов на успех в «постлихорадочный» период, чем во времена рискованного 
бума. На заре новой технологии ПО на рынке было несколько сложивших# 
ся игроков или законченных продуктов. Барьеры, преграждавшие выход 


114 
ГЛАВА 12 

на рынок, были низкими, а первые продукты – небольшими, несовершен 
ными, но все#таки успешными. Как и во времена золотой лихорадки в Ка 
лифорнии, чтобы застолбить участок в начале развития новой техноло 
гии, требовалось меньше людей и капитала. Первая версия редактора Word 
для Макинтоша была настоящим продуктом лихорадки – она состояла все# 
го из 153 тысяч строк программного кода. Но по мере формирования зре# 
лой технологии легко добываемое золото быстро заканчивается, и компа# 
ниям приходится конкурировать в более капиталоемких проектах. 

Одна из самых серьезных ошибок успешных компаний, продолжаю# 
щих работать по принципу «лихорадки», в том, что они продолжают сле# 
довать этим принципам, хотя уже сформировалась технология, а масштаб 
проектов неизмеримо вырос. Чтобы успешно конкурировать в постлихо 
радочный период, надо сделать значительно больше, чем просто увели# 
чить персонал и найти гараж побольше. 

Клиенты постлихорадочного периода более требовательны. Клиентов 
организаций# разработчиков ПО времен «золотой лихорадки» можно на 
звать «инноваторами» или «последователями# энтузиастами» и «эксперта 
ми», говоря словами Эверетта М. Роджерса (Everett M. Rogers), автора книги 
«Diffusion of Innovations» (Распространение инноваций) [119]. У таких лю 
дей есть вкус и пристрастие к новинкам технологий и умение прощать ше# 
роховатости, которые всегда их сопровождают. Продукты времен лихо 
радки, возможно, не столь блестящие, как в более поздние времена, но тем 
не менее могут быть успешными. Клиентов «постлихорадочного» периода 
Роджерс выделил в следующие группы: «раннее большинство», «позднее 
(зрелое) большинство» и «медлящие». Они отвергают риск и требуют тща# 
тельно проработанных продуктов, которые надежно работают. Это высо 
ко поднимает планку для продуктов «постлихорадочного» периода. Про 
грамма сегодняшней версии редактора Word для ОС Windows содержит 
5 миллионов строк. 

Парадокс процессов «лихорадки» состоит в том, что компании, успеш# 
ные во время одной «лихорадки», имеют шанс провалиться во время сле 
дующей. Подтверждением этому являются некоторые компании, органи# 
зованные непосредственно во время лихорадки. Они повторяют ошибку 
Маршалла и Саттера, считая новые технологии досадной помехой их тща 
тельно разработанным планам по получению максимальной отдачи от уча 
стков, которые они уже застолбили. Примерами компаний, опоздавших 
выхватить самородки новых технологий, могут служить IBM на заре разви# 
тия MS DOS для ПК, Lotus в начале развития Windows и даже Microsoft, ко# 


Золотая лихорадка ПО 

гда только забрезжил рассвет Интернета, хотя Microsoft быстро попыталась 
исправить эту ошибку. Но самым убедительным примером в современной 
компьютерной отрасли должен быть Xerox. Многие фундаментальные изо# 
бретения эры настольных компьютеров были сделаны в исследователь 
ском центре Xerox в Пало #Альто, включая графический интерфейс поль 
зователя, ручной манипулятор (мышь), стандарт локальной сети Ethernet. 
Однако компания была настолько поглощена ведением войны за свой биз 
нес копировальной техники, что проиграла войну в компьютерных техно 
логиях, так по #настоящему и не вступив в нее. 

Другие же компании «постлихорадочного» периода слишком непово 
ротливы, чтобы успешно конкурировать на рынках периода «новой вол 
ны». Крупные издержки, которые компании терпят при продаже продук# 
тов клиентам «раннего» и «позднего большинства», не возникают во время 
лихорадки. На рынке в период лихорадки можно представить «голый» 
продукт, и он все равно пойдет хорошо у инноваторов и последователей# 
энтузиастов, преобладающих на таком рынке. 

Несомненно, мы станем свидетелями повторов этой картины взрывно 
го роста и резкого падения во время следующих циклов развития техноло# 
гий, что бы ни последовало за Интернетом. Некоторые компании, добив 
шиеся громадных успехов на начальной стадии развития Интернета, такие 
как Amazon.com, eBay и Yahoo, упустят следующую волну, и только время 
покажет, кто из них успешно преодолеет следующие великие перемены. 

Смысл и бессмыслица экономики золотой лихорадки 

точки зрения макроэкономики тысячи добровольно рискующих ин Сдивидуальных разработчиков ПО, из которых обогатятся лишь не# 
сколько счастливчиков, а остальные спишут свои убытки на приобретение 
опыта, – это огромный актив. За свои неудачи расплачиваются они сами 
и никто другой, а все остальные только выигрывают от возможности при# 
обрести и использовать лишь успешные продукты. Но как отдельная ком# 
пания может извлечь выгоду из этой динамики? Какая компания может по 
зволить себе финансировать тысячи индивидуальных предпринимателей 
во время очередной лихорадки, чтобы найти одного или двух, которые от 
кроют «золото» новой технологии? Даже компании с широкими возмож 
ностями исследований, такие как AT&T, IBM, Microsoft, Xerox, не могут 
обеспечить финансирование тысяч проектов в каждой новой области тех 
нологии, и это одна из причин, по которой поглощение компаний ПО 


116 
ГЛАВА 12 

во время лихорадки более разумно, чем это может показаться на первый 
взгляд. Некоторые аналитики отрасли сочли безумством приобретение 
компанией Microsoft за 130 миллионов долларов фирмы Vermeer Techno# 
logy, изобретателя FrontPage, когда вся выручка Vermeer за год составляла 
10 миллионов. Однако с точки зрения предпринимательского бума запла 
тить во время лихорадки 130 миллионов долларов за один успешный про 
ект из тысячи – весьма недорогая альтернатива финансированию тысячи 
внутренних тупиковых экспериментальных разработок. 

Расширение и сжатие 

етодики инженерии ПО в «постлихорадочный» период безоговороч Мно доказали свою ценность в крупных проектах. (Сомневающиеся 
могут обратиться к главе 13.) Но у них есть резервы и для небольших проек# 
тов. Ларри Константин описывает соревнования Software Challenge (Вы# 
зов ПО) Австралийского компьютерного общества, во время которых 
группа из трех разработчиков должна была создать и запустить програм 
му #приложение из 200 функциональных блоков за 6 часов [26]. Это непро 
стая задача, эквивалентная написанию примерно 20 тысяч строк кода на 
традиционном языке третьего поколения или около 5 тысяч строк на язы# 
ке визуального программирования. 

Группа из компании «Ernst and Young» решила следовать формальной 
методике разработки – сжатой версии их обычной методологии с поэтап 
ными наработками и промежуточными сдачами материала. Их подход 
включал тщательный анализ требований и проектирования. Многие из их 
соперников сразу взялись за написание программ, и первую пару часов ко 
манда «Ernst and Young» отставала. 

Но к середине дистанции эта команда получила подавляющее преиму 
щество. Однако она проиграла, но не потому что их систематический под 
ход не удался. Они просто случайно стерли некоторые файлы, и их работа 
за полдня пошла насмарку, так что они смогли продемонстрировать мень 
шую функциональность к концу состязания, чем на середине дистанции. 

Выиграла бы команда «Ernst and Young», не случись этого казуса с управ# 
лением конфигурацией? Ответ положительный. Эта группа через несколь 
ко месяцев снова выступила на соревновании на скорость разработки ПО, 
и на этот раз она позаботилась о создании резервных копий и контроле 
версий. И победа пришла [27]. Успех был достигнут не за счет обеднения 
предыдущего подхода, а за счет нахождения и устранения его слабых мест. 


Золотая лихорадка ПО 

Ценность общего применения систематического совершенствования 
процессов в небольших организациях была подтверждена в исследова 
нии, проведенном Институтом инженерии ПО [57]. Доля успешных про# 
грамм совершенствования процессов в организациях с числом разработ 
чиков менее 50 оказалась такой же, как и в крупных компаниях. Более того, 
в небольших организациях оказалось меньше проблем, препятствующих 
успеху (таких как организационная политика и защита узких полномочий 
и привилегий), чем в крупных фирмах. 

Назад к «золотой лихорадке» 

роектам ПО времен лихорадки присущ изначальный риск, но неупо Прядоченность методики разработки ПО делает риск еще большим. 
Разработчики, действующие по проектам периода лихорадки, десятиле 
тиями были вооружены программным эквивалентом ведер и лопат. В ре 
зультате многие находки, идеи и инновации бездарно пропадали, точно 
так же, как из#за отсутствия контроля кода источника была утеряна часть 
программ команды «Ernst and Young». 

Систематический подход к инженерии ПО необходим для успеха про# 
ектов периода после лихорадки, но он столь же полезен в проектах, все 
еще пребывающих в стадии лихорадки. Что случилось бы, если бы разра# 
ботчики исходных версий VisiCalc, Lotus 1# 2 3, NacOS, броузера Mosaic Web 
и других революционных проектов затерли свои рабочие файлы? О сколь 
ких инновационных продуктах мы так и не услышали бы, потому что раз# 
работчики стерли свои файлы? А сколько продуктов пало жертвой более 
серьезных ошибок? 

Во время лихорадки можно быть чрезвычайно неаккуратным и не слиш# 
ком изобретательным и все таки сделать состояние, однако шансов на это 
немного. После лихорадки приходится быть более организованным и гиб 
ким, чтобы просто оставаться рентабельным. Предпринимательский зуд, 
которым заражается участник проекта во время лихорадки, – это, конеч# 
но, одно из самых увлекательных ощущений в жизни, однако никакого 
противоречия между предприимчивостью и применением эффективных 
методик разработки ПО нет. Изучая методы, которые хорошо зарекомен# 
довали себя в периоды после лихорадки, можно глубже понять те из них, 
которые лучше всего сработают при наступлении очередной лихорадки, 
увеличив шансы на отыскание «золотой жилы». 


ГЛАВА ТРИНАДЦАТАЯ

Н

Необходимость совершенствования 
методик разработки ПО 

Если можно измерить предмет обсуждения, выразить его 
числами, то об этом предмете что1то становится известно. 
Но если его невозможно измерить, нельзя найти числовое 
выражение, то знания о нем скудны и неудовлетворительны. 

ЛОРД КЕЛЬВИН, 1893 Г. 

Компании, вложившие средства в практические методики разработки ПО 
после лихорадки, получили отдачу от этих инвестиций. В 1944 г. Джеймс 
Хербслеб (James Herbsleb) сообщал, что средняя «прибыльность бизнеса» 
(в грубом приближении – рентабельность инвестиций) 13 организаций, 
проводивших программы систематического совершенствования практи 
ческих методов, оказалась равной почти 500%, причем у лидеров она до 
стигала 900% [56]. В 1999 г. Нил Ольсен (Neil C. Olsen) опубликовал анало 
гичные результаты для компаний, которые сделали серьезные вложения 
в подбор персонала, обучение и создание рабочей обстановки [102]. 
В 1997 г. Рини ван Солинген (Rini van Solingen) также приводил данные 
о рентабельности таких инвестиций – в среднем около 700%, причем 
в лучших организациях она достигала 1900% [136]. В 2000 г. Кейперс Джо 
унз отметил, что отдача от инвестиций в совершенствование процессов 
может легко достигать четырехзначных чисел, т. е. превышать 1000% [68]. 
Недавно проведенный Уоттсом Хамфри (Watts Humphrey) анализ рента 
бельности инвестиций в совершенствование методик разработки ПО по 
казал, что она может достигать 500% и выше [60]. 


Необходимость совершенствования методик разработки ПО 

Состояние на практике 

ольшинство читателей, наверное, предполагает, что эффективность Бфирм, производящих ПО, следует типичной кривой нормального рас# 
пределения: основная масса находится где то посередине, а по краям со 
всем неэффективные организации и немного исключительно эффектив# 
ных. Эта картина представлена на рис. 13.1. 

В противоположность ожиданиям реальность совсем иная. В силу мед# 
ленного принятия передовых эффективных методик, о чем говорилось 
в главах 1–2, лишь горстка организаций ПО работает по высшему классу. 
Аналитики отрасли уже давно подметили огромный разрыв между лучши# 
ми и худшими организациями, работающими в одной отрасли, определив 
их соотношение как 10 :1 [91]. Средние организации значительно ближе 
к худшим, чем к лучшим. Такая реальная картина представлена на рис. 13.2. 

Процентная 
доля 
организаций 


Предполагаемое 
распределение 
Среднее 
Эффективность 


Рис. 13.1. Распространено мнение, что эффективность распределяется 
симметрично с примерно равным количеством результативных 
и нерезультативных предприятий ПО 

Процентная 
доля 
организаций 


Предполагаемое 
распределение 
СреднееСреднее 
Фактическое 
распределение 
Эффективность 


Рис. 13.2. Реальное распределение эффективности фирм, производящих ПО, 
несимметрично. Большинство фирм ближе к худшим, чем к лучшим, в смысле 
практических методик [112] 


120 
ГЛАВА 13 

Выигрыш от совершенствования 
практических методик разработки ПО 

лубокое исследование 13 фирм #производителей ПО, проведенное Ин Г ститутом инженерии ПО, показало, что типичная (средняя) фирма, 
систематически совершенствующая методики, имела рост производитель 
ности, равный 35% в год, сокращение сроков разработки составило 19% 
в год, снижение количества дефектов, обнаруженных после выпуска, – 39% 
в год. Эти числа создают основу для расчета рентабельности инвестиций. 
Результаты приведены в табл. 13.1. 

Лучшие фирмы добились еще более впечатляющих результатов. Пред 
приятие с наивысшим приростом производительности повышало ее на 58% 
ежегодно в течение 4 лет с совокупным ростом более 500%. Лучший пока 
затель по сокращению сроков разработок составил 23% в год в течение 
6 лет подряд с совокупным сокращением сроков на 91%. Лучшее долго# 
срочное повышение качества разработок выразилось в сокращении дефек# 
тов на стадии после выпуска на 39% в течение 9 лет с совокупным снижени# 
ем числа обнаруженных дефектов на 99%. Две организации добились крат 
косрочного снижения числа дефектов на 70% и больше на протяжении 
чуть менее 2 лет. 

Таблица 13.1. Результат работы по совершенствованию процесса 
разработки ПО 

Показатель Среднее 
улучшение 
Наилучшее устой. 
чивое улучшение 
Производительность 
Сокращение сроков 
Снижение числа дефектов 
после выпуска 
Ценность для бизнеса организацион# 
ного совершенствования 
35% в год 
19% в год 
39% в год 
500% 
58% в год 
23% в год 
39% в год* 
880% 

«Средние» и «устойчивые» значения в данном случае одинаковы, поскольку лучшие 

* 

результаты по сокращению числа дефектов были краткосрочными и не рассматри 
вались как устойчивые. 

Там, где господствует принцип «напишем и исправим», часто делают 
ставку на некую «золотую середину» между небольшим количеством де# 
фектов и производительностью. Но, как говорилось в главе 2, большая 
часть затрат в таких проектах обусловлена именно незапланированными 


Необходимость совершенствования методик разработки ПО 

исправлениями уже написанных программ. Данные табл. 13.1 подтвержда 
ют, что для большинства организаций не существует компромисса между 
более высокой производительностью и улучшением качества. Организа 
ции, заострившие внимание на уменьшении количества дефектов, в резуль# 
тате добиваются сокращения сроков и повышения производительности. 

Доля организаций, систематически совершенствующих практические 
методы разработки ПО, относительно мала. В абсолютном выражении сот 
ни организаций работают над этим; многие из них опубликовали резуль 
таты этой деятельности в профессиональных журналах, трудах конферен# 
ций и других изданиях. В табл. 13.2 содержатся сводные данные о рента# 
бельности инвестиций в эту работу по сообщениям 20 организаций. 

Таблица 13.2. Примеры рентабельности инвестиций (ROI) 
в совершенствование разработки ПО [39], [74], [136] 

Организация 

BDN International 

Boeing Information 
Systems 
Computer Sciences 

Corporation 

General Dynamics 
Decision Systems 
Harris ISD DPL 

Hewlett# Packard SESD 
Hughes 

IBM Toronto 

Motorola GED 

Philips 
Raytheon 
Schlumberger 
Siemens 
Telcordia 

Результат 

ROI 300% 

Оценка в пределах 20%, за год сэкономлено 5,5 млн. 
долл., ROI–775% 
Снижение на 63% показателя числа ошибок 

Сокращение переделок на 70%; снижение на 94% 

числа дефектов; рост производительности в 2,9 раза 
Сокращение на 90% числа дефектов; рост произво# 
дительности в 2,5 раза 

ROI – 900% 

Сокращение на 2 млн долл. в год перерасходов сме# 
ты, ROI – 500% 
Сокращение дефектности при поставке на 90%, со# 

кращение переделок на 80% 

Повышение производительности в 2–3 раза, сокра# 
щение цикла разработки в 2–7 раз, ROI – 677% 
ROI – 750% 
ROI – 770% 
Сокращение дефектности в 4 раза при бета отладке 
Сокращение дефектности при выпуске на 90% 
Дефектность 1/10 от среднеотраслевого уровня, рост 

удовлетворенности клиента с 60% до 91% за 4 года 


122 
ГЛАВА 13 

Организация 

Texas Instruments – Systems Group 

Thomson CSF 
ВМС США 
Центр авиалогистики ВВС США в Огдене 
Центр авиалогистики ВВС США в Оклахоме 
Военно#воздушная база ВВС США в Тинкере 

Таблица 13.2 (продолжение) 

Результат 

Сокращение дефектности при 

поставке на 90% 

ROI – 360% 

ROI – 410% 

ROI – 1 900% 

ROI – 635% 

ROI – 600% 

Показатели ROI для отдельных методик 

О
О
рганизации с разной степенью подробности описывают, каким обра 
зом они добились внушительного повышения эффективности разра 
ботки ПО. Тем не менее можно выявить некоторые конкретные методики, 
доказавшие свою эффективность в целом. В табл. 13.3 приведены прибли# 
зительные показатели ROI для отдельных методик. 

Таблица 13.3. Рентабельность инвестиций для отдельных практических 
методик разработки ПО [64] 

Методика ROI за год, % ROI за 3 года, % 
Формальная проверка программ 
Формальная проверка проектирования 
Долгосрочное технологическое планирование 
Инструменты оценки затрат и качества 
Измерения производительности 
Оценка процессов 
Обучение управленческого персонала 
Обучение технического персонала 
250 
350 
100 
250 
150 
150 
120 
90 
1 200 
1 000 
1 000 
1 200 
600 
600 
550 
550 

Что дает анализ бюджетирования ПО 

очность оценки сметных расходов организации – это хороший пока Т затель, характеризующий управление и исполнение проектов. Анализ 
26 тысяч проектов разработки бизнес #систем, проведенный фирмой Stan 


Необходимость совершенствования методик разработки ПО 

dish Group, показал, что в среднем перерасход запланированных средств 
на проект превышает 100% [62], [132]. Согласно этому анализу ошибоч# 
ность сметных расходов по порядку величин соответствует результатам 
других исследований отрасли [66]. На рис. 13.3 показаны результаты одно 
го исследования проектов ВВС США на разных уровнях методики разра# 
ботки ПО. (Этот анализ основан на подходе SW CMM, который более по 
дробно обсуждается в главе 14.) Каждая точка ниже уровня 100% обознача# 
ет проект, который не превысил сметную стоимость. Каждая точка выше 
уровня 100% обозначает проект, вышедший за пределы сметы. 

Как видно из рис. 13.3, организации, использующие наименее сложные 
методики (уровень 1 по SW#CMM), регулярно превышают сметную стои 
мость проектов – другими словами, они все время недооценивают затраты 
на проект. Более четко функционирующие организации (находящиеся 
на уровне 2 по SW# CMM) равномерно распределяют сметные ошибки меж# 
ду завышением и занижением, однако относительная ошибка смет все та 
ки, как правило, составляет 100% или больше. У организаций, прибегающих 
к самым развитым методикам (они находятся на уровне 3 по SW CMM), пе 
рерасход и экономия смет встречаются одинаково часто, а точность смет 
ной стоимости значительно улучшается. 

Стоимость проекта по сравнению со сметной 

600% 

500% 
400% 

Фактическая 

стоимость как 
процентная доля 
сметной 
300% 
Прогнозируемость после 
усовершенствования 
практических методик ПО 
200% 
100% 
1 23 


Прогнозируемость 
до усовершенствования 
практических методик ПО 

0% 

Нацеленность на совершенствование практики разработки ПО 

Рис. 13.3. По мере совершенствования методик разработки ПО организации 
лучше контролируют сметные стоимости проектов, что в целом указывает 
на улучшение их контроля [78] 


124 
ГЛАВА 13 

Косвенный выигрыш от улучшения 
практических методик 

публикованные показатели рентабельности инвестиций большей ча Остью основаны на экономии операционных расходов, то есть на сни 
жении стоимости написания одной строки программы или сданного функ 
ционального блока. Хотя эта экономия средств и впечатляет, еще большие 
выгоды компании могут получить в виде косвенной отдачи от улучшения 
практических методик. Более совершенные методики приводят к улучше# 
нию точности прогнозирования расходов и сроков, снижению рисков их 
превышения, выявлению проблем на ранних стадиях, а также содействуют 
лучшему управлению. 

Сколько выиграет компания, разрабатывающая ПО, если ошибка опре 
деления срока выполнения проекта уменьшится с ±100 до ±10%? Как оце 
нить выигрыш от возможности пообещать клиенту завершить проект на 
6–12 месяцев раньше с высокой долей уверенности уложиться в эти сроки? 
Сколько стоит для компании, разрабатывающей единичные образцы про# 
дуктов для конкретного клиента, предложение выполнить проект за фик 
сированную цену и уверенность, что фактическая стоимость не будет зна 
чительно отличаться от предложенной? Какова цена планирования пере 
хода на новую систему с идеальной точностью для организации рознич 
ной продажи? Какова стоимость уверенности, что переход состоится, как 
запланировано, 1 октября при минимальном риске захватить начало сезо 
на праздничных покупок? 

В отличие от операционных выгод, на которых сконцентрирована ли 
тература отрасли, непрямые выгоды совершенствования практики разра 
ботки ПО открывают дверь к дополнительным возможностям извлечения 
дохода. Для руководителей высшего звена они могут быть еще более при# 
влекательными, чем простая экономия операционных расходов. 

Взгляд на лучших 

альнейшее изучение практики планирования проектов обещает со Д блазнительное улучшение процесса разработки ПО. В большинстве 
организаций с укрупнением проектов падает производительность разра 
ботчиков. В отличие от экономии за счет масштабов, наблюдаемой в дру# 
гих видах деятельности, при разработке ПО обычно действует обратное 
правило: увеличение масштабов ведет к разбазариванию средств. 


Необходимость совершенствования методик разработки ПО 

В организациях, применяющих систематический подход к планирова# 
нию, трудозатраты в проекте оцениваются по формулам, подобным следу# 
ющей:1 

ТрЗат=2,94 . КСП1,10 

Здесь ТрЗат – это трудозатраты в человеко #месяцах; КСП – килостроки 
программирования, то есть оценка объема программы в тысячах строк. 
Коэффициенты 2,94 и 1,10 получены эмпирически калибровкой данных 
уже выполненных организацией проектов. Эти величины применимы 
к типичной организации. Конкретное значение показателя степени (1,10) 
весьма существенно, поскольку это означает, что более крупные проекты 
требуют непропорционально больших трудозатрат по сравнению с не# 
большими проектами. 

Лаборатория инженерии ПО НАСА (SEL) являет собой показательное 
исключение. Это первая организация, получившая награду IEEE за совер 
шенство процесса разработки, и одна из самых изобретательных в сфере 
разработки ПО в мире. В SEL применяется следующая формула расчета 
трудозатрат [96]: 

ТрЗат=1,27 . КСП0,986 

Несмотря на мелкий шрифт, показатель степени 0,986 указывает на гро# 
мадную разницу между формулой трудозатрат в SEL и прочих организаци 
ях. Во всех других опубликованных моделях этот показатель превышает 1, 
а у SEL он меньше 1, что говорит о небольшой, но экономии на масштабах, 
которой удалось добиться. Привлекательность совершенствования про 
цесса состоит в том, что достаточно зрелая организация может разрешить 
проблему крупных проектов – производительность отдельного члена груп# 
пы разработчиков способна расти по мере укрупнения проектов. Хотя та 
кие случаи очень редки, это логическое следствие специализации, которая 
обсуждалась в главе 10. 

Суть проблемы – организационная 

ногие организации переносят ответственность за совершенствова# Мние методик на низший уровень – уровень проекта. Рассматривая не# 
давно факторы «умножения трудозатрат» в популярной модели оценки 

См., например, работу [14], где в качестве базового коэффициента приведен 
множитель 2,94 и как номинальный фигурирует показатель степени 1,10. 


126 
ГЛАВА 13 

Cocomo II [14], я был поражен тем, каким небольшим их количеством рас 
полагает менеджер отдельного проекта. Из 22 факторов, используемых 
в Cocomo II для уточнения базовой оценки трудозатрат проекта, только 
три, по моему мнению, обычно контролируются куратором проекта (это 
уровень документации, архитектура и решение по рискам, а также воз# 
можность применения в других сферах). Многочисленные факторы дик 
тует специфика бизнеса компании (сложность продукта, требования к на 
дежности, изменчивость платформы, уникальность ПО и т. д.). Их трудно 
изменить, не меняя самого предприятия. Остальные не поддаются измене# 
нию индивидуальными проектами и должны отрабатываться самой орга 
низацией – это способности персонала, разработка ПО несколькими 
группами, преемственность персонала, зрелость рабочих процессов и др. 
По видимому, именно в организационной сфере кроются самые мощные 
инструменты совершенствования практических методик разработки ПО. 

Последний великий рубеж 

типичной ситуации, принимая решение о целесообразности инвести# Врования в бизнес, обычно сравнивают рентабельность вложений со 
стоимостью капитала. Инвестиции, дающие большую отдачу по сравне# 
нию со стоимостью капитала (с учетом всех факторов), будут правильны# 
ми [43], [117]. (Это упрощенное толкование. Более подробное описание 
можно найти в источниках из списка цитированной литературы.) 

Стоимость капитала обычно составляет около 10%. Во многих отраслях 
инвестиции с рентабельностью 15–20% будут считаться очень привлека 
тельными. Однако усовершенствованные методики разработки ПО обеща 
ют не 15–20%, а намного больше. Согласно примерам из табл. 13.2 (а также 
исследованиям, упомянутым в начале этой главы), совершенствование 
практических методик обеспечивает рентабельность от 300 до 1900%, а 
в среднем 500%. Инвестиции с такой рентабельностью – это нечто экстра 
ординарное, они практически беспрецедентны в бизнесе. Это выше, чем 
доходность акций интернет#компаний во время бума доткомов. Это выше, 
чем доходность любых спекуляций на товарных рынках. Это почти как вы# 
игрыш в лотерею. Ни с чем не сравнимая возможность для любого пред 
приятия, еще не использующего такие методики. 

Причина такой исключительно высокой рентабельности прямо связа 
на с тем, что обсуждалось в главах 1 и 2, – отработанные методики извест 
ны десятки лет, но большинство организаций пренебрегают ими. Риск 


Необходимость совершенствования методик разработки ПО 

от принятия этих методик ничтожен, отдача огромна. Все, что нужно, – 
это воля и решимость организации воспользоваться ими. 

Десять трудных вопросов 

ак писал лорд Кельвин более века назад, принимать решения, не имея К количественных данных, очень трудно. Оказывается, многие органи 
зации не могут ответить на ключевые вопросы, связанные с их деятельно 
стью в области ПО, например такие: 

1. Каковы расходы на разработку ПО? 
2. Какая доля проектов на данный момент укладывается в сроки и вы 
деленный бюджет? 
3. Каково среднее превышение сроков и сметы выполняемых вами 
проектов? 
4. Какие из сегодняшних проектов, вероятнее всего, сразу же прова# 
лятся? 
5. Какой процент расходов по проектам является результатом работ, 
которых можно было избежать? 
6. Насколько удовлетворены (количественно) пользователи вашего ПО? 
7. Какова квалификация вашего персонала по сравнению со средней 
вотрасли? 
8. Насколько ваша организация по потенциалу сравнима с аналогич# 
ными отраслевыми учреждениями? 
9. Насколько (количественно) ваша производительность повысилась 
за последние 12 месяцев? 
10. Каковы ваши планы по повышению квалификации персонала и эф 
фективности всей организации? 
Организации, которые не могут ответить на эти вопросы, почти навер 
няка попадают в левую часть кривой на рис. 13.2. Во многих организациях 
никто никогда не задавал себе подобных вопросов и там лишь смутно 
осознают, что это нужно делать. Убедившись в целесообразности совер# 
шенствования практических методик разработки ПО, возможно, следует 
задать одиннадцатый вопрос: «Что мешает применению усовершенство 
ванных методик разработки ПО теперь, когда предъявлены столь убеди 
тельные аргументы в пользу этого?» 


ГЛАВА ЧЕТЫРНАДЦАТАЯ

П

Птолемеево 
мышление 

Все модели неверны, но некоторые из них полезны. 

ДЖОРДЖ БОКС (GEORGE BOX) 

Знание само по себе сила. 

ФРЕНСИС БЭКОН 

Несколько лет назад я выступал с лекцией на тему, которую озаглавил «Ис 
тория двух проектов». Ее целью было дать представление об инженерном 
подходе в разработке ПО. Я утверждал, что хорошо организованные компа# 
нии часто преуспевают в сложных рискованных проектах, потому что при 
меняют эффективные методики разработки ПО, а плохо организованные 
компании часто проваливаются даже в мелких проектах с невысоким рис 
ком, потому что применяют негодные методики. Обычно мое выступление 
принимали довольно доброжелательно, но однажды один из слушателей 
заявил: «Это прекрасный пример статичного линейного Птолемеева мыш# 
ления, которое игнорирует динамику и сложность реальных проектов ПО». 

Если вы еще не забыли школьный курс, Птолемей был астрономом, 
жившим около 100 года до нашей эры, который утверждал, что Солнце 
вращается вокруг Земли. Его теорию в 1543 г. сменили воззрения Коперни# 
ка, считавшего, что Земля вращается вокруг Солнца. Таким образом, тот са 
мый слушатель утверждал, что рекомендованный мной подход являл со 
бою пример теории Птолемея, то есть что мои взгляды отстали как мини# 
мум на 400 лет! 

Коперник отказался от теории Птолемея, когда обнаружил данные, не 
укладывавшиеся в нее. Точно так же данные о реальных проектах ПО с оче# 
видностью говорят об эффективности нацеленных на инженерный под 


Птолемеево мышление 

ход методик разработки ПО, который я отстаиваю, невзирая на упомяну# 
тое замечание слушателя. 

Обзор подхода SWFCMM 

О
О
писываемая мной методика в каком то смысле основана на модели 

зрелости для ПО, разработанной Институтом инженерии ПО (SEI). 

Впервые она была предложена в 1987 г. и на данный момент реализует са 

мый известный и эффективный подход к систематическому совершенст 

вованию организаций#разработчиков ПО. В ней указывается путь, по кото 

рому обычно проходят компании, чтобы достичь выгод и преимуществ, 

описанных в главе 13. 
Организации# разработчики ПО классифицируются в рамках модели 

SW #CMM по пяти уровням:1 

Уровень 1 – начальный. Процесс разработки ПО хаотичен. Проекты, 
как правило, реализуются с превышением сроков и бюджета. Организа 
ционными знаниями обладают лишь отдельные программисты. С их 
уходом исчезают и соответствующие знания. Успех в основном зависит 
от вклада индивидуальных «героев», типы которых описаны в главе 7. 
В таких фирмах процветает метод «напишем и исправим». Разработчи 
ки находятся на этом уровне по умолчанию, если целенаправленно не 
внедряют более эффективные подходы к разработке ПО. 

Уровень 2 – повторяемый. Базовые методики практического управле# 
ния проектами определяются по каждому отдельному проекту, а орга 
низация обеспечивает их соблюдение. Успех проектов уже не зависит 
от отдельных личностей. Сила организации, находящейся на этом 
уровне, заключается в повторяемости опыта, полученного в аналогич# 
ных проектах. У таких организаций возможен сбой при встрече с новы 
ми инструментами, методиками или типами ПО. 

Уровень 3 – сформированный. На этом уровне применяются стандарти# 
зованные технические и управленческие процессы во всей организа# 
ции, а индивидуальные проекты подстраивают стандартные процессы 
под конкретные нужды. Специальная группа ответственна за работы 
по процессам ПО. Внедрена программа обучения, обеспечивающая не# 

Лучшее полное описание модели SW#CMM содержится в работе [23]. Другую до 
кументацию можно загрузить с сайта SEI по адресу www.sei.cmu.edu. 


130 
ГЛАВА 14 

обходимые знания и квалификацию менеджеров и технического пер# 
сонала для работы на данном уровне. Эти организации ушли далеко 
вперед от практики «напишем и исправим» и регулярно сдают ПО 
в срок, укладываясь при этом в смету. 

Уровень 4 – управляемый. Результаты выполнения проектов предска 
зуемы с высокой точностью. Процесс разработки достаточно сформи# 
ровался, чтобы выявлять причины отклонения и справляться с ними. 
Организация накапливает информацию по проектам в базе данных 
с целью оценки эффективности различных процессов. Во всех проек# 
тах соблюдаются общие для организации стандарты управления про 
цессами, так что накапливаемые данные могут осмысленно анализиро# 
ваться и сравниваться. 

Уровень 5 – оптимизирующий. Вся организация нацелена на постоян 
ное реальное выявление и распространение методов усовершенствова 
ния процессов. Процессы варьируются, результаты изменений оцени# 
ваются, и успешные изменения принимаются как новые стандарты. Ос 
новное внимание в части обеспечения качества сфокусировано на пре# 
дупреждении дефектов посредством обнаружения и устранения 
коренных причин их возникновения. 

Исходный принцип подхода SW CMM можно в какой# то степени отне 
сти к закону Конвея: Структура компьютерной программы отражает иерар# 
хию создавшей ее организации [30]. В хаотичных организациях рождается 
беспорядочное ПО. Организации, прибегающие к помощи программи# 
стов «героев», дающие им почти полную свободу ради создания чудес про# 
граммирования, выдают поочередно блестящее и небрежное ПО. Раздутые 
организации с неэффективными процессами разработки выдают неряш# 
ливое и неупорядоченное ПО. Ну а эффективные, оптимизирующие свои 
процессы организации предположительно создают точно выверенное, 
удовлетворяющее пользователя ПО. 

Движение вверх 

О
О
трасль ПО добилась прогресса на пути, определенном в SW #CMM. Как 

показывает рис. 14.1, в 1991 г. из 132 оцениваемых организаций лишь 

около 20% соответствовали уровням выше первого [112]. 

Из рис. 14.2 видно, что в 2002 г. из 1978 анализируемых организаций 
уже две трети функционировали на уровне выше первого. 


Птолемеево мышление 

80% 

70% 

60% 

50% 

40% 

30% 

20% 

10% 
0% 

Рис. 14.1. Профиль оценки организаций, проанализированных в соответствии 
с SWFCMM в 1991 г. Источник: «Профиль зрелости в отрасли ПО на конец 2002 г.» 

Начальный Повторяемый Сформированный Управляемый Оптимизирующий 


50% 
40% 
60% 
70% 
80% 
30% 
20% 
10% 
0% 
Начальный Повторяемый Сформированный Управляемый Оптимизирующий 
Рис. 14.2. Профиль оценки зрелости организаций на конец 2002 г. 
Источник: «Профиль зрелости в отрасли ПО на конец 2002 г.» 

Тенденция, очевидная из анализа этих двух диаграмм, выглядит обнаде# 
живающе, однако лишь малая доля организаций ПО Северной Америки 
была охвачена исследованием, и можно смело предположить, что общая 
картина скорее похожа на наблюдавшуюся в 1991 г., чем в 2001 г. Другими 


132 
ГЛАВА 14 

75 

Срок 
(в месяцах), 
требующийся 
для перехода 
на следующий 
уровень зрелости 
50 
30 
18 
0 

22 21 
Наивысший наблюдаемый уровень, 
не являющийся «выбросом» 

75% 

Среднее 
25% 
Низший наблюдаемый уровень, 

не являющийся «выбросом» 

С уровня 1 С уровня 2 
на уровень 2 – на уровень 3 – 
152 организации 176 организаций 

Рис. 14.3. Перемещение организаций с одного уровня SWFCMM на следующий 
с 1992 г. Источник: «Профиль зрелости в отрасли ПО на конец 2002 г.» 

словами, около 75% организаций разработчиков ПО функционируют на 
уровне 1.1 

Может ли средняя организация добиться результатов в русле выявлен# 
ной тенденции? Ответ: несомненно, да. Как видно из рис. 14.3, Институт SEI 
исследовал свыше 300 организаций, пытавшихся поднять свой рейтинг со 
гласно SW# CMM от уровня 1 до уровня 2 или от уровня 2 до уровня 3 [112]. В 
течение трех с половиной лет или даже меньше 75% смогли выйти 
на уровень 2, при этом средний срок составил 22 месяца. За два с полови# 
ной года или менее 75% организаций смогли перейти на уровень 3 с уров# 
ня 2, а средний период составил 21 месяц. Организации, целенаправленно 
совершенствующие свою деятельность в русле SW CMM, обычно добива# 
ются серьезных успехов, причем достаточно быстро. 

Все риски, с которыми можно справиться 

от самый слушатель моей «Птолемеевой» беседы утверждал, что мой Т подход игнорировал динамику реальных проектов; были также и лю 
ди, утверждавшие, что SW #CMM культивирует склонность организаций от 
казываться от риска [37]. Организации становятся консервативными и за 

1 

Этот факт также подтверждает Кейперс Джоунз в [66]. 


Птолемеево мышление 

бюрократизированными, что плохо влияет на их конкурентоспособность. 
Подтверждается ли это отраслевым опытом? 

В организациях уровня 1 менее половины участников опроса заявили, 
что их руководство готово принять «умеренный» или «существенный» 
риск. В то же время в организациях уровня 3 почти 80% респондентов зая 
вили о готовности принять такую степень риска [57]. 

Эта связь между эффективностью процессов компании и ее способно 
стью принимать риски была продемонстрирована в проекте ATAMS в Шай# 
енских горах [49], [114], [131]. По этому проекту группа разработчиков взя 
лась выполнить некую разработку за одну пятую стоимости и за половину 
срока лучшего из имевшихся предложений. В конце концов ПО было сда# 
но за месяц до окончания срока без перерасхода выделенных средств. 
За 18 месяцев прошедших с выпуска в ПО было обнаружено только 2 де 
фекта, которые были легко устранены. Успех группы разработчиков в этом 
достаточно рискованном предприятии объяснялся тщательным контро 
лем требований, применением формальных экспертиз как программ, так 
и общей структуры, активным контролем риска. 

Влияние организационных усовершенствований на готовность при# 
нять риск противоположно тому, что предсказывают некоторые специа# 
листы. Фирмы, в которых применяются проработанные процессы, снижа# 
ют воздействие необязательных рисков (Фредерик Брукс назвал бы их 
«случайными», в противовес «существенным»), гораздо лучше приспособ# 
лены для принятия взвешенных добровольных рисков, чем их менее под# 
готовленные собратья, которых со всех сторон захлестывают вынужден# 
ные риски. (В главе 5 различия между случайными и существенными каче# 
ствами по Ф. Бруксу обсуждаются подробнее.) 

Кто применяет SWFCMM? 

С
С
1987 г. были оценены возможности примерно 2000 организаций, ре 
зультаты свыше 10 000 проектов были направлены в Институт SEI. Три 
четверти организаций, участвующих в повышении уровня согласно SW# 
CMM, – это коммерческие фирмы# разработчики или компактные группы 
разработчиков, представляющие различные отрасли: финансы, страхова# 
ние, недвижимость, оптовые продажи, строительство, транспорт, связь, 
ЖКХ, машиностроение, электронное оборудование, медицинские инстру 
менты и множество других. Почти четверть всех фирм выполняли разра 
ботки по государственным заказам. Около 5% представляли оборонные 


134 
ГЛАВА 14 

или правительственные агентства. Размеры этих организаций менялись 
в широких пределах. Почти половина имела в штате менее 100 разработ# 
чиков. Персонал четверти организаций превышал 200 человек, и пример 
но столько же организаций насчитывали менее 50 разработчиков. 

Бездушная разработка ПО 

дно из самых распространенных возражений против организацион Оного совершенствования связано с тем, что при этом насаждается 
бюрократия, ограничивающая творчество. Это напоминает древнее возра 
жение, что искусство и инженерия несовместимы. Конечно, можно соз# 
дать гнетущую обстановку, когда творчество и задачи бизнеса расходятся; 
точно так же можно построить и ужасные здания. Но столь же возможно 
создание гармонии между запросами разработчика ПО и задачами бизне# 
са, что подтверждается отраслевыми данными. Среди принявших участие 
в опросе о влиянии SW CMM 84% категорически не согласились с утвер# 
ждением, что совершенствование в SW#CMM сделало их организации бо 
лее жесткими или бюрократическими. 

Организации, нацеленные на организационное совершенствование, 
обнаружили, что эффективность практических процессов стимулирует 
творчество и высокий моральный дух работников. В опросе 50 организа 
ций только 20% сотрудников компаний уровня 1 охарактеризовали мо# 
ральный дух персонала как «высокий» или «отличный» [57]. Приведенные 
ответы коррелировали по группам менеджеров и разработчиков, отвечаю# 
щих за организационные усовершенствования, и старшего технического 
персонала в целом. В организациях, которым был присвоен уровень 2, до 
ля сотрудников, оценивающих моральный дух своих коллег как «высокий» 
или «отличный», подскочила до 50%. В организациях уровня 3 уже 60% 
опрошенных оценили свой моральный дух таким образом. 

Эти сводные статистические данные подтверждаются более глубоким 
анализом организаций, получивших высшие оценки эффективности про# 
цессов разработки. Опрос, проведенный в Центре авиалогистики в г. Огде 
не – одной из первых организаций, получивших рейтинг уровня 5 по SW 
CMM, – показал, что сотрудники сферы ПО были воодушевлены измене# 
ниями, которые явились результатом восьмилетних усилий по совершен 
ствованию организационных процессов [101]. Респонденты действительно 
считали, что процессы уровня 5 сужают выбор методов выполнения рабо 
ты, но ограничения рассматривались как неизбежный сопутствующий эле# 


Птолемеево мышление 

мент повышения эффективности и не считались отрицательным факто# 
ром. Сотрудники сферы ПО сочли, что выполнение работ значительно об 
легчило внедрение организационных усовершенствований. Подавляющее 
большинство сотрудников признало, что теперь они вносят больший вклад 
в планирование и контроль проектов. Каждый респондент утверждал, что 
инициатива совершенствования SW CMM оказала положительное влияние. 

Группа разработчиков бортового ПО для космических кораблей «Шаттл» 
НАСА в Центре космических полетов имени Джонсона – еще одна органи# 
зация, которая получила уровень 5 по SW CMM [44]. Там нет гор коробок 
из# под пиццы, пирамид банок из# под кока колы, отвесных стен для альпи# 
нистов, площадок для катания на роликовых досках или подобных элемен# 
тов пейзажа «продвинутых» организаций# разработчиков ПО. Там не в иг 
рушки играют, а стремятся создавать безукоризненное ПО. Работа инте# 
ресная, но не всепоглощающая. Группа разработчиков ПО работает обыч 
но 5 дней в неделю по 8 часов. В отрасли с выраженным преобладанием 
мужского персонала почти половина группы разработчиков женщины. 

Люди, которые уходят из таких групп с высокой производительностью, 
бывают поражены неэффективностью средних организаций. Один из та# 
ких сотрудников сменил группу в Центре космических полетов имени 
Джонсона на более предприимчивую среду. Через несколько месяцев он 
вернулся. Оказалось, что организация, в которую он уходил, поддерживала 
эффективность в разработке ПО лишь на словах, а на деле исповедовала 
тот самый принцип «напишем и исправим». В обстановке высокого уровня 
зрелости сотрудники не только не считают его каким то образом ограни# 
чивающим их творчество, но достигают уровней производительности 
и качества, просто невозможных в менее зрелых компаниях. В упоминав 
шемся выше проекте ATAMS применялись высоко структурированные ме# 
тодики, способные показаться стесняющими некоторым программистам, 
однако участники группы ATAMS говорили, что структурированный про# 
цесс позволил реализовать высшую производительность каждого участни# 
ка. По их словам, они с неохотой взялись бы за разработку ПО, если бы 
этот процесс не применялся. 

Серьезная самоотдача 

дна из не слишком привлекательных особенностей организационно Ого совершенствования состоит в том, что его нелегко добиться. 

Джеймс Хербслеб провел опрос руководителей, которые внедрили усовер 


136 
ГЛАВА 14 

шенствование по SW CMM. 77% опрошенных заявили, что этот процесс 
оказался более продолжительным, чем ожидалось, а 68% сказали, что он 
стоил дороже, чем предполагалось [57]. 

Успех совершенствования в SW#CMM зависит от следующих факторов: 

• Самоотдача менеджеров высшего звена, которые должны обеспе# 
чить руководство и финансирование, присвоение высшего приори 
тета долгосрочным усовершенствованиям, активный мониторинг 
динамики совершенствования процесса разработки ПО. 
• Образование группы процесса инженерии ПО (SEPG). В крупной 
организации может потребоваться не одна такая группа. В нее долж 
ны войти должностные лица высокого уровня, осознающие цели со 
вершенствования процессов в организации, связанные с этим во 
просы культуры и свою роль как внутренних консультантов. 
• Необходимая подготовка и обучение руководителей среднего звена 
и технического персонала наряду с вознаграждениями за повыше# 
ние производительности, ориентированные на достижение долго 
срочных целей SW #CMM. 
Этот список весьма упрощен, и в каждой отдельной организации най# 
дется еще ряд особых факторов, влияющих на ее инициативу организаци# 
онного совершенствования. Как упоминалось в главе 2, некоторые орга 
низации внедряют SW CMM, относясь к этому как к модному словечку. По# 
пытки относиться к SW CMM как к очередной панацее вряд ли будут ус 
пешны. 

Рейтинг организаций 

W#CMM – это сложившаяся эффективная модель организационного Sсовершенствования. Структурируя организации по пяти уровням, мы 
получаем также эффективный способ их оценки. В других, более устояв# 
шихся профессиях оценка организаций представляет собой обычную 
часть программы поддержания высоких практических стандартов. Бухгал 
терские фирмы каждые три года должны проходить аттестацию. Аттеста 
ция колледжей действительна максимум три года, после чего она пере 
сматривается. Некоторые индивидуальные программы колледжей аттесту# 
ются отдельно. Больницы проходят аттестацию в Объединенной комис 
сии по аттестации организаций здравоохранения (Joint Commission on 
Accreditation of Healthcare Organizations – JCAHO) и получают ее максимум 
на три года. 


Птолемеево мышление 

JCAHO указывает следующие причины, по которым больницы стремят# 
ся пройти аттестацию:1 

• это повышает доверие пациентов; 
• дает возможность отчитываться по специальной форме перед об 
щественностью; 
• обеспечивает возможность объективной оценки работы организа# 
ции; 
• стимулирует усилия по повышению качества работы организации; 
• способствует привлечению профессионального персонала; 
• служит образовательным средством для персонала; 
• может использоваться для удовлетворения некоторых требований 
программы страховой медицины Medicare; 
• ускоряет расчеты с третьими сторонами; 
• часто обеспечивает соблюдение лицензионных требований штатов; 
• может благоприятно повлиять на размер премий по страховым воз 
мещениям; 
• положительно влияет на принятие решений по договорам контро 
лируемого медицинского обслуживания. 
Аттестация больниц – дело добровольное. Однако большинство боль# 
ниц стараются ее получить в силу вышеназванных причин. 
Параллель с организациями ПО очевидна. Оценка по SW CMM обеспе 
чивает форму отчета, которую потенциальные клиенты могут использо 
вать при принятии решения об условиях контракта на разработку ПО или 
приобретения его пакета. Это объективный общепризнанный стандарт 
для сравнения. Этим стимулируются усилия организаций по повышению 
качества, поощряя их повышать свой рейтинг. Можно предположить, что 
страховые компании предложат более выгодные ставки страховых поли 
сов компаниям, имеющим достаточно высокий уровень зрелости. 

Форма и содержание 

тарая поговорка утверждает, что успех равен планированию, помно Сженному на исполнение. 

Если планирование и исполнение выразить в процентах, то получится 
величина успеха от 0 до 100%. Если один из компонентов – планирование 
или исполнение – отсутствует, то успех будет равен нулю. 

См. сайт JCAHO по адресу www.jcaho.org. 


138 
ГЛАВА 14 

По мере достижения отраслью ПО более высокого уровня профессио 
нализма приходится учитывать все больший объем опыта, накопленного 
в связи с SW CMM, как положительного, так и отрицательного. 

В SW #CMM важно содержание, а не форма. Организации, стремящиеся 
к совершенствованию по SW#CMM исключительно ради присвоения уров 
ня 2 или 3, вполне вероятно, ограничатся полусырым планированием 
и не слишком тщательным исполнением. Вряд ли им удастся получить же 
лаемые рейтинги и добиться выигрыша в качестве и производительности, 
к которым они стремятся. Вот это и есть настоящее Птолемеево мышле# 
ние, когда содержание вращается вокруг формы, вместо того чтобы нахо 
диться в центре солнечной системы ПО. 

Те же организации, что нацелены на выигрыш от конечного качества 
и производительности в рамках совершенствования по модели SW# CMM, 
вероятно, более серьезно отнесутся к планированию и будут лучше выпол 
нять планы. Внимание к процессу разработки позволяет организациям по 
вышать производительность, создавать ПО с меньшим количеством де 
фектов, принимать больший риск, повышать точность прогнозирования, 
укреплять моральный дух и улучшать выполнение крупных проектов. Если 
посмотреть на уровень эффективности, которого достигают организации 
с высокой степенью отлаженности технологических процессов, становит 
ся ясно, что устаревшие практические методики вроде разработки по прин 
ципу «напишем и исправим» и есть настоящее Птолемеево мышление. 


ГЛАВА ПЯТНАДЦАТАЯ

К

Количественное выражение 
факторов, связанных с персоналом 

Качества персонала и работа с людьми – это, без сомнения, са1 
мый крупный источник возможностей повышения производи1 
тельности разработки ПО. 

БАРРИ У. БОЭМ 

Часто при обсуждении лучших практических методик, моделей совершен# 
ствования процессов и других достаточно сложных аспектов проблемы 
забывают о роли, которую играют людские факторы в эффективности раз# 
работки ПО. 

Факторы персонала 

О
О
дним из наиболее воспроизводимых результатов исследований в об 
ласти инженерии ПО является существенная разница в производи 
тельности между отдельными разработчиками. Сакман, Эриксон и Грант 
обнаружили, что время отладки одной и той же программы различными 
разработчиками может отличаться до 20 раз [121]. Сравнения выполня# 
лись в группе программистов, имевших не менее 7 лет опыта профессио# 
нальной работы. 

Этот основной факт – минимум десятикратная разница в производи# 
тельности – был затем многократно подтвержден, но мне думается, что да 
же в нем истинная разница в производительности практикующих програм# 
мистов занижена. Том Демарко и Тимоти Листер провели соревнование 
по программированию, где 166 программистам было предложено выпол 
нить одно и то же задание [36]. Оказалось, что производительность различ 
ных программистов даже в небольшом проекте отличалась в пять раз. 


140 
ГЛАВА 15 

Билл Кертис (Bill Curtis) провел исследование с аналогичными резуль 
татами, в котором группе из 60 профессиональных программистов была 
поставлена, по его словам, простая отладочная задача [33]. Среди испытуе# 
мых, выполнивших задания, производительность различалась на порядок. 

Модель оценки Cocomo II дает дальнейшие подтверждения значитель 
ных вариаций способностей персонала [14]. В этой модели используются 
различные факторы для корректировки оценки базовой трудоемкости. 
Влияние каждого фактора анализировалось с помощью обширной базы 
данных проекта Cocomo II. Семь из 22 факторов в модели связаны с персо 
налом. 

Согласно этой модели коэффициент воздействия фактора опыта груп 
пы разработчиков в области разработки приложений на стоимость и тру# 
доемкость проекта равен 1,51. В терминах модели Cocomo II это означает, 
что группе разработчиков с наименьшим опытом (последние 15%) в дан# 
ной предметной области потребуется в 1,51 раз больше трудозатрат для 
выполнения проекта, чем самой опытной группе (верхние 10%) при про# 
чих равных условиях. Опыт работы с технической платформой имеет ко 
эффициент влияния 1,40, а опыт работы с языком программирования 
и инструментарием – 1,43. 

Способности аналитиков (это относится к их профессионализму, а не 
к опыту) оценены коэффициентом 2,00. Способностям программиста был 
присвоен коэффициент влияния 1,76. Коэффициент влияния факторов, 
связанных с общением (размещение персонала и поддержка контактов ме 
жду ними, таких как электронная почта, локальная сеть и т. д.) был принят 
равным 1,53. Влияние преемственности персонала получило 1,51 балла. 

Влияние этих факторов сведено в табл. 15.1. 

Отдельно взятые факторы «старшинства» (опыт в приложениях, в языке 
и платформах) имеют совокупный коэффициент влияния 3,02. А семь свя# 
занных с персоналом факторов в совокупности получают ошеломляющие 
24,6 балла! Этим простым фактом во многом объясняется лучшая по от 
расли производительность в Microsoft, Amazon.com и у других лидеров 
разработок, не уделяющих на первый взгляд должного внимания отлажен 
ности процессов. 


Количественное выражение факторов, связанных с персоналом 

Таблица 15.1. Влияние персонала по модели Cocomo II 

Фактор влияния по модели Наименование в модели Коэффициент 
влияния 
Опыт в приложениях 
Факторы общения 
Опыт в языке программирова 
ния и инструментарии 
Преемственность персонала 
Опыт в платформе 
Способности программистов 
Способности аналитиков 
Совокупный 
APEX 
SITE 
LTEX 
PCON 
PLEX 
PCAP 
ACAP 
1,51 
1,53 
1,43 
1,51 
1,40 
1,76 
2,00 
24,6 

Слабосильные программисты 

ариации эффективности говорят о том, что одни программисты на Вмного более производительны, чем другие. Естественно, хотелось бы 
найти способ привлечь и удержать лучших. Но это только полдела. В ис 
следовании Демарко и Листера [36] 13 из 166 испытуемых программистов 
вообще не смогли выполнить задание, а это почти 10% выборки. В исследо 
вании Кертиса [33] 6 из 60 профессиональных программистов не справи# 
лись с «простым» отладочным заданием – те же 10%. 

Что же значит в реальном мире работа программистов, которые не мо 
гут справиться со своей работой? В упомянутых исследованиях результаты 
программистов, не справившихся с заданием, не учитывались. В реальном 
проекте не учитывать результат вряд ли получится. Поэтому программи# 
стам, не справляющимся со своей работой, потребуется либо много до 
полнительного времени, либо помощь других программистов. В реальном 
проекте эта десятикратная разница в производительности вполне может 
превратиться в противостояние производительности и антипроизводиF 
тельности, ведь в конце концов кому то приходится переделывать работу 
программистов, которые не справляются с заданием. Другими словами, 
присутствие в проекте программистов с низшей производительностью 
фактически отодвигает работу назад. 

Однако низкая производительность как таковая – это не единственная 
проблема. Работая на пределе своих возможностей по написанию про 


142 
ГЛАВА 15 

грамм, программисты с низкой производительностью либо не способны, 
либо не желают соблюдать соглашения, принятые для программы, или 
технологические стандарты. Они не устраняют большинство дефектов 
или все таковые из своего блока программы до его интеграции с блоками, 
написанными другими программистами, или пока эти дефекты не затро# 
нут работу других людей. Они не могут достоверно оценить свою работу, 
потому что не знают, закончат ли они ее. С учетом нулевого вклада в про 
ект и создания дополнительной работы для остальной группы не будет 
преувеличением назвать их «программистами с отрицательной произво 
дительностью». Данные исследований говорят о том, что примерно 10% 
профессиональных программистов, возможно, относятся к этой катего 
рии. Так что случайным образом отобранная группа из 7 программистов 
с вероятностью Ѕ будет иметь в своем составе одного программиста с от# 
рицательной производительностью. 

Физические условия 

Е
Е
ще одним результатом соревнования в исследовании Демарко и Лис 
тера является тот факт, что 25% лучших по показателям программи# 
стов располагали более просторными тихими помещениями, где их реже 
тревожили и отвлекали от работы телефонными звонками по сравнению 
с остальными 75%. Разница в площади помещений была не так заметна – 
25% лучших программистов в среднем располагали 76 кв. футами площади 
(примерно 7,5 кв. м), а остальные 75% – площадью 46 кв. футов (4,54 кв. м). 

Разница в производительности более существенна. Производитель# 
ность разработчиков из лучшей четверти участников оказалась в 2,6 раза 
выше, чем у худшей. В терминах модели Cocomo II разница влияния обста 
новки в офисном помещении между лучшими (первые 25%) и худшими 
(последние 25%) равна 2,6. 

Мотивация 

отивацию обычно считают самым сильным фактором, влияющим Мна работу, и большинство исследований показывает, что его влияние 
сильнее, чем любого другого фактора [11]. 

Чтобы ни говорили критики о Microsoft, все согласятся, что эта фирма 
чрезвычайно преуспела в мотивации своих разработчиков. В изобилии 
можно услышать истории о 12 , 14 и даже 18 часовом рабочем дне, о про# 


Количественное выражение факторов, связанных с персоналом 

граммистах, неделями остающихся на месте. Я знаю разработчика, у кото 
рого была складная кровать, изготовленная на заказ, чтобы умещаться 
в его офисе. Microsoft называют в своем роде «бархатной потогонкой», что 
заставляет предположить среди прочего, что фирма, возможно, более чем 
успешно мотивирует своих сотрудников. 

Подход Microsoft к достижению столь высокого уровня мотивации 
прост: он направлен непосредственно на моральное состояние работника. 
Каждой группе в Microsoft выделяются средства, которые группа может по 
тратить на что угодно. Одни коллективы приобретают автоматы для воз# 
душной кукурузы, вроде стоящих в кинотеатрах, другие выезжают на гор 
нолыжные курорты или ходят в боулинг, а некоторые организуют пикни# 
ки. Есть и такие, которые делают футболки или же снимают полностью ки 
нотеатр для просмотра любимого фильма. 

Microsoft также весьма активно использует неденежные вознагражде# 
ния. За год, проведенный в этой фирме, я получил 3 футболки, толстовку, 
пляжное полотенце и коврик для мыши. Я также поучаствовал в групповой 
поездке на поезде и замечательно пообедал в местном ресторане и еще 
в одном столь же приятном месте. Если бы я был штатным сотрудником, 
у меня было бы еще больше футболок, а также часы Microsoft, бирка участ# 
ника проекта и огромная пластиковая награда «За сдачу» при завершении 
проекта. В денежном выражении все это стоит лишь несколько сотен дол 
ларов, но психологически гораздо больше. 

Не пренебрегает Microsoft и личной жизнью своих разработчиков. По 
ка я работал там, я наблюдал, как к разработчику в соседней комнате каж# 
дый день приходила после школы его десятилетняя дочь. Она тихо выпол 
няла домашнее задание в уголке, пока он работал. Никто в компании 
иухом не вел. 

Помимо прямого поддержания морального духа Microsoft с готовно# 
стью использует другие факторы, направленные на его сохранение, при 
чем иногда делает то, на что в другие компаниях вряд ли решились бы. Мне 
случалось наблюдать, как методологической чистотой, дисциплиной про 
граммирования, контролем за спецификациями продукта и сроками за 
вершения, доступностью руководства – почти всем – жертвовали ради мо 
рального духа. Мотивационная эффективность такого подхода, не учиты 
вая и другие его достижения, говорит сама за себя. 


144 
ГЛАВА 15 

Опытность персонала 

елая акцент на опыте сотрудников в модели Cocomo, многие ведущие Д организации признают важность старшего персонала. Много лет на 
зад директор по развитию в Microsoft заметил, что он выделяет старший 
персонал как критический фактор успеха. Он сказал, что один из двух клю# 
чей к успеху такого продукта, как Microsoft Excel, заключался в том, что два 
опытных старших сотрудника, работавших над предыдущей версией про 
дукта, продолжили работать в новом проекте. 

В исследовании вышедших из#под контроля проектов, проведенном 
в Великобритании, менеджеры назвали «нехватку опытного персонала» 
одной из причин трудностей проектов примерно в 40% случаев значитель# 
ного превышения сроков или бюджета [24]. 

Даже фирмы с сильной ориентацией на процессы разработки ПО при 
знают важность человеческого фактора. Лаборатория инженерии ПО 
НАСА стала первой организацией, получившей приз компьютерного об 
щества IEEE за достижения в развитии процессов разработки ПО. В треть 
ем пересмотренном издании «Recommended Approach to Software Deve 
lopment, Revision 3» (Рекомендуемого подхода к разработке ПО) [95] в чис 
ле девяти первых рекомендаций указана такая: «начинайте проект с не# 
большим коллективом опытного персонала». 

Что в итоге 

казывается, что внимание к технической подготовке, преемственно Ости персонала, опыту в предметной области бизнеса, удобному поме 
щению, мотивации и другим факторам, ориентированным на человека, – 
это трезвый экономический расчет. Отрасль ПО нуждается в эффектив# 
ном подходе к профессионализму, призванном выявить лучших по произ# 
водительности, отсеять худших и поднять средний уровень программи# 
стов до высших показателей. 


ГЛАВА ШЕСТНАДЦАТАЯ

П

Программа профессионального 
развития фирмы Construx1 

Как компания может поддержать формирование настоящих профессиона# 
лов в области ПО? В главе 6 мы уже говорили, что общеотраслевая поддерж# 
ка развития карьеры профессионалов ПО постепенно складывается, но она 
еще слаба. Лишь несколько университетов предлагают начальное образова 
ние в инженерии ПО, а выпускников по этой специальности намного мень 
ше, чем требуется отрасли. Ситуация быстро улучшается, но все же пройдут 
годы, пока количество выпускников университетов станет достаточным. 

Частные компании тоже не расположены поддерживать эффективное 
развитие карьеры программистов. Вместо продвижения по карьерной ле 
стнице большинство работников отрасли ПО просто переходят от одного 
проекта к другому без какого либо улучшения своих навыков. Совсем мало 
компаний ИТ делают слабые попытки предложить карьерный рост своим 
сотрудникам, а отрасль в целом не располагает ничем, что хотя бы отда 
ленно напоминало профессиональный рост, такой как у врача, адвоката, 
юриста или бухгалтера. 

Профессионализм в ПО давно представляет для меня интерес, и не 
сколько лет назад я взялся за формирование четкого порядка карьерного 
продвижения и поддержку профессионального роста инженеров ПО в мо 
ей компании Construx Software. Были определены конкретные цели про 
граммы развития наших инженеров ПО: 

Эта глава адаптирована из Белой книги фирмы Construx Software, озаглавленной 
«Construx's Professional Development Program», © 2002 Construx Software Builders, 
Inc. Используется с разрешения. Эту Белую книгу можно загрузить со страницы 
www.construx.com/profession. Я признателен Дженни Стюарт (Jenny Stuart), соста# 
вившей оригинал Белой книги. 


146 
ГЛАВА 16 

• Расширение профессиональных навыков. Повышение мастерства 
и квалификации наших сотрудников. 
• Планирование карьеры. Создание последовательного плана повы 
шения квалификации инженеров ПО во время работы в Construx. 
• Поддержка обычных специальностей ПО. Поддержка всего контин 
гента должностей, связанных с ПО, включая разработчиков, инже 
неров, тестеров, бизнес #аналитиков, менеджеров проектов, архитек 
торов ПО и работников других отраслевых специальностей. 
• Согласованность. Наличие согласованных средств оценки работы 
персонала и повышения в должности независимо от технической 
специализации. 
• Обобщения для других компаний. Возможность предлагать програм 
мы другим компаниям, чтобы поддержать профессиональный рост 
их специалистов в области ПО. 
Области знаний в Construx 

С
С
тержень нашей программы профессионального развития – «лестница 
профессионального развития» (Professional Development Ladder, PDL), 
основанная на выделенных в SWEBOK областях знаний, описанных в главе 5. 
В Construx эти области знаний получили название «области знаний Con 
strux» (Construx Knowledge Areas, CKA). Они определяют объем знаний, ко# 
торым должен владеть и который должен уметь применять технический 
персонал. Как описано в главе 5, есть десять областей знаний: 

• Требования к ПО 
• Проектирование ПО 
• Создание ПО 
• Тестирование ПО 
• Обслуживание ПО 
• Управление конфигурацией ПО 
• Качество ПО 
• Управление инженерией ПО 
• Инструментарий и методики инженерии ПО 
• Инженерный процесс разработки ПО 
Каждая из этих областей знаний в SWEBOK определена до нюансов, 
но мы пришли к выводу, что необходимы также конкретные интерпрета 
ции для наших условий (табл. 16.1). 


Программа профессионального развития фирмы Construx 

Таблица 16.1. Описание областей знаний Construx (СКА) 

Область знаний (СКА) 

Требования 

Проектирование 

Испытания/ 
тестирование 

Обслуживание 

Управление 
конфигурацией 

Качество 

Управление 

инженерией 
Инструменты и мето# 
дики инженерии 

Процесс 

Описание 

Идентификация, анализ, моделирование и докумен# 

тирование функций, реализуемых в ПО. 
Определение структуры и динамического состояния 
системы на различных уровнях абстракции и по 
средством различных представлений системы. 

Работы, связанные с прогонами ПО, призванные вы# 
явить дефекты и оценить функциональные возмож 
ности. 

Работы, связанные с установкой, внедрением, перево 

дом и эксплуатацией системы. 
Организация и хранение артефактов системы, кон# 
троль и управление изменениями этих артефактов, 
определение вида сдачи системы заказчику. 

Работы, выполняемые на статичных артефактах, свя# 
занные с обеспечением требований качества данно# 
го элемента ПО в настоящий момент или в будущем. 

Все аспекты управления – от управления бизнесом 

и персоналом до управления проектами. 
Применение инструментария, технологий, методо 
логий и способов инженерии ПО. 

Работы, связанные с измерением и повышением ка 
чества разработки ПО, соблюдением сроков, эффек# 
тивностью, производительностью и другими харак# 
теристиками проекта и продукта. 

Уровни способностей 

бласти знаний Construx обеспечивают упорядоченный способ орга# Онизации знаний инженерии ПО, но этого недостаточно для опреде 
ления способностей инженера ПО. Поэтому внутри каждой области ком# 
пания Construx выделяет 4 уровня способностей: вводный, продвинутый, 
ведущий и мастерский. Эти 4 уровня обозначают продвижение в приобре# 
тении знаний и опыта в каждой области знаний. В каждой области описа 
ны типы деятельности (чтение, групповые семинары и опыт работы), не# 
обходимой для достижения определенного уровня способностей. Эти че# 
тыре уровня приведены в табл. 16.2. 


148 
ГЛАВА 16 

Таблица 16.2. Сводка уровней способностей 

Уровень способностей 

Вводный 

Продвинутый 

Ведущий 

Мастерский 

Описание 

Основные работы в данной области сотрудник вы 
полняет под контролем и предпринимает серьез 
ные шаги по развитию своих знаний и мастерства. 

Сотрудник эффективно и независимо выполняет 
работы в данной области, является примером для 
менее квалифицированных сотрудников, иногда 
выступает в роли наставника. 

Сотрудник выполняет образцовые работы в данной 
области. Регулярно выступает наставником и веду 
щим в проекте и, возможно, на уровне компании. 
Рассматривается как крупный ресурс в данной об 
ласти знаний. 

Является эталоном работ в данной области и имеет 
богатый опыт участия во многих проектах. Ведет за 
нятия и семинары, является автором брошюр или 
книг, которые расширяют объем знаний в данной 
области. Является лидером на уровне отрасли, при 
знан как эксперт в данной области. 

Было установлено, что способности зависят от сочетания опыта и зна# 
ний. Невозможно достигнуть ведущего уровня знаний инженерной дисци# 
плины, если последние не базируются на опыте. Но опыт такого же уровня 
невозможен без владения самыми передовыми знаниями. Поэтому при 
расхождении между опытом и знаниями сотрудника общий уровень спо# 
собностей обычно ближе к более низкому. Эта мысль проиллюстрирована 
на рис. 16.1. 

Опыт 

Знания 

Вводный Продвинутый Ведущий Мастерский 
Вводный Вводный Продвинутый Продвинутый – 
Продвинутый Продвинутый Продвинутый Продвинутый – 
Ведущий Продвинутый Продвинутый Ведущий Мастерский 
Мастерский – – Мастерский Мастерский 

Рис. 16.1. Общие способности как функциональное проявление знаний и опыта 


Программа профессионального развития фирмы Construx 

Ступени лестницы профессионального развития 

очетание областей знаний и уровня способностей позволяет сформи Сровать ступени «лестницы» профессионального роста. Ступени обес 
печивают повышение профессионализма и продвижение по службе. Вос 
хождение по лестнице требует от инженера как расширения знаний (охват 
большего числа областей знаний), так и их глубины (повышение уровня 
знаний в данных областях). Нужно приобретать и знания, и опыт. 

По причинам исторического характера ступени лестницы имеют но 
мера от 9 до 15. Выпускники колледжей обычно начинают со ступени 9, 
а опытные инженеры могут начать с 10 #й или 11 #й. Двенадцатая ступень 
считается в Construx полноценным профессиональным статусом. Многие 
инженеры решают не двигаться выше двенадцатой ступени, поскольку сту# 
пени с 13 й по 15 ю можно достичь, только сделав существенный иннова# 
ционный вклад как в Construx, так и в инженерию ПО. 

В табл. 16.3 перечислены все ступени лестницы и описаны требования 
для достижения каждой из них. 

Таблица 16.3. Требования к освоению каждой ступени лестницы 
профессионального развития 

Ступень 
лестницы 
Описание Охваченные облас. 
ти знаний (СКА) 
9 Инженер ступени 9, как правило, только за 
кончил образование и начинает осваивать 
принципы инженерии ПО. Работает под 
постоянным контролем. 
Нет 
10 Инженер 10 #й ступени имеет базовое пред# 
ставление об инженерии ПО. Как правило, 
недавно получил образование или имеет 
1–2 года опыта работы. Может выполнять 
работы при ограниченном контроле. 
Вводный во всех 
областях. 
Продвинутый 
в3 областях. 
11 Твердые знания в инженерии ПО, может ра 
ботать самостоятельно. Работал в несколь 
ких завершенных проектах и имеет опыт 
участия в каждом этапе цикла разработки 
ПО, необходимого для выпуска продукта. 
Вводный во всех 
областях. 
Продвинутый 
в6 областях. 
Ведущий в одной 
области. 


150 
ГЛАВА 16 

Таблица 16.3 (продолжение) 


Ступень 

Описание 

Охваченные облас. 
лестницы 

ти знаний (СКА) 

12 

Вводный во всех об 
всех аспектах небольших и крупных проек# 

Инженер 12#й ступени успешно участвует во 

ластях. 
тов, делая весомый вклад в их эффектив 

Продвинутый 
ность. Зарекомендовал себя грамотными 

в8 областях. 
техническими решениями и компетентно# 

Ведущий 
стью в вопросах проекта. Вносит инновации, 

в3 областях. 
обеспечивает устойчивый уровень работ, 
превышая объем поставленных задач. Обыч 
но осуществляет техническое руководство 
других сотрудников или надзор за ними. 

13 

Инженер на ступени 13 – настоящий руково# 

Вводный во всех 
дитель, способный анализировать внешние 

областях. 
и внутренние стороны проекта и обеспечи 

Продвинутый 
вать грамотные и правильные решения. Пол# 

в8 областях. 
ностью владеет всеми аспектами своего про# 

Ведущий 
екта и делает уникальный вклад.в работу. Ре 

в5 областях. 
шения этого инженера приносят существен# 

Мастерский 

ную прибыль компании и обеспечивают 

в1 области. 

общее устойчивое положение. 
14 

Инженер ступени 14 – это крупный инже# 

Намеренно 
нерный ресурс для компании. Справляется с 

не определены. 
серьезными проблемами, принимает реше 
ния по ключевым задачам и структуре компа# 
нии. Известен многим инженерам ПО внутри 
и вне компании по конкретным достижени# 
ям, которые реально способствовали разви 
тию инженерии ПО. Объем знаний охватыва 
ет всю отрасль. Достижение этой ступени 
требует посвятить свою деятельность инже# 
нерии ПО, в том числе за пределами Construx. 

15 

Незаменим для успеха компании. Постоянно 

Намеренно 
разрабатывает и выдает прорывные продук 

не определены. 
ты мирового класса. Практикующими инже 
нерами внутри и вне компании признан ве# 
дущим экспертом в инженерии ПО. На него 
возлагается основная ответственность за раз# 


Программа профессионального развития фирмы Construx 

Ступень 
лестницы 
Описание Охваченные облас. 
ти знаний (СКА) 
работку методик компании. Вносит постоян# 
ный и разнообразный вклад в работу всей 
отрасли. 
Работа на этой ступени требует посвятить 
всю деятельность инженерии ПО (и не толь 
ко в Construx) и обуславливает признание 
достижений, которые выходят за пределы 
освоенной области. 

Развитие карьеры на основе продвижения по лестнице 

П
П
осмотрим на примере продвижения технически «подкованного» ин 
женера со ступени 10 на ступень 12, каким образом лестница профес# 
сионального развития в Construx обеспечивает карьерный рост. Пусть це 
левыми областями знаний для него будут инструменты и методики инже 
нерии, проектирование и создание ПО. 

На рис. 16.2 показаны требования к инженеру для достижения ступе# 
ни 10. Черные квадратики показывают достигнутый уровень способнос# 
тей в каждой области знаний. 

Как видно из рис. 16.3, для достижения ступени 11 инженер растет 
«вглубь», выходя на уровень ведущего в области создания ПО, и «в ширину», 
достигая продвинутого уровня в нескольких других областях. 

На рис. 16.4 показано, что для выхода на ступень 12 инженер достигает 
ведущего уровня в области проектирования и инструментария и методик 
инженерии и продвинутого уровня дополнительно в двух СКА. 

Области знаний 

Управлениеконфигурацией

Создание

Проектирование

Управлениеинженерией

Инженерныйпроцессразработки

Обслуживание

Качество

Требования к ПО

Тестирование

Инструментарий 
и методики 
инженерии 

Вводный ...• 
• 
....• 
Продвинутый • 
.• 
Ведущий 

Рис. 16.2. Пример требований лестницы профессионального развития 
для выхода на ступень 10 


152 
ГЛАВА 16 

Управление

конфигурацией

Создание

Проектирование

Управление

инженерией

Инженерный

процесс

разработки

Обслуживание

Качество

Требования к ПО

Тестирование

Инструментарий 

и методики

Вводный ...• 
• 
....• 
Продвинутый ..• 
..• 
Ведущий • 


Рис. 16.3. Пример требований лестницы профессионального развития 
для выхода на ступень 11 

Области знаний 

Управление

конфигурацией

Создание

Проектирование

Управление

инженерией

Инженерный

процесс

разработки

Обслуживание

Качество

Требования к ПО

Тестирование

Инструментарий

и методики 

инженерии 

инженерии 

Области знаний 

Вводный ...• 
• 
....• 
Продвинутый ..• 
• 
...• 
Ведущий .• 
• 


Рис. 16.4. Пример требований лестницы профессионального развития 
для выхода на ступень 12 

Лестница профессионального развития предоставляет несколько путей 
карьерного роста, давая возможность сотрудникам выбрать области зна# 
ний, на которых они намерены сконцентрироваться. Этим обеспечивается 
гибкость и структура, поскольку сотрудник выбирает свой карьерный путь, 
руководствуясь требованиями уровня областей знаний. Из рис. 16.2–16.4 
можно увидеть, что разработчик сосредоточился на знаниях инструмента 
рия и методики инженерии, проектирования и создания ПО. В другом слу# 
чае можно говорить о совершенствовании в управлении инженерией, про 
цессе разработки и требованиях ПО. Нацеленный на качество инженер 
мог бы выбрать для совершенствования аналогичную область, процесс 
разработки и тестирование. Лестница профессионального развития Con 
strux является универсальным средством определения карьерного продви 
жения независимо от узкой специализации и ориентации инженера. 


Программа профессионального развития фирмы Construx 

Требования СКА для различных уровней способностей 

естница развития содержит четыре уровня способностей, но мастер# Лский уровень по определению не может быть сформулирован, поэтому 
обычно лестница описывается матрицей 10.3: десять столбцов – области 
знаний и три строки – уровни способностей. В каждой области матрицы 
определены элементы, которые должны соответствовать ее требованиям, 
такие как чтение, семинары и опыт работы. Всего лестница профессио# 
нального развития на данный момент содержит около тысячи конкрет# 
ных требований. 

Области управления инженерией в Construx является хорошим приме# 
ром широты и глубины требований ко всем уровням способностей – ввод# 
ному, продвинутому и ведущему. В табл. 16.4 показано, что следует прочи# 
тать и какой практический опыт накопить, чтобы выйти на вводный уро 
вень знаний по управлению инженерией ПО. 

Как видно из табл. 16.5, для достижения продвинутого уровня в этой об 
ласти необходимы намного более интенсивные усилия. 

Таблица 16.4. Требования к вводному уровню знаний по управлению 
инженерией ПО 

Действия 

Чтение 

Требования 

Необходимо проанализироватьa работы: 

• Чарльза Фишмана [44] 
• Стива Макконнелла [84] 
• «Software Engineering Code of Ethics and Professionalism» 
(Кодекс профессиональной этики инженерии ПО), 
ACM/IEEE CSb 
Следующие материалы необходимо изучить информаF 
тивно: 

• Работу Алана Дейвиса [34] 
• Книгу Иана Соммервилля [127], часть 1 и главы 22–23 
• Книгу Роджера Прессмана [111], часть 4 
a В рамках лестницы профессионального развития различаются аналитическое 
и информативное чтение. Подробно это различие разъясняется в работе Стива 
Макконнелла [85]. 

b См. www.construx.com/profession. 


154 
ГЛАВА 16 

Действия 

Опыт работы 

Семинары 
Сертификация 
Участие в отрасле# 

вой деятельности 

Таблица 16.4 (продолжение) 

Требования 

• Разобрать план проекта 
• Знать методики оценки 
• Планировать и отслеживать работу сотрудников 
Нет 
Нет 
Нет 
Таблица 16.5. Требования к продвинутому уровню знаний 
по управлению инженерией ПО 

Действия 

Чтение 

Опыт работы 

Семинары 

Требования 

Необходимо проанализировать следующие работы: 

• Книгу Фредерика Брукса [20] 
• Работу Демарко и Листера [36] 
•Работу [94] 
• Книгу Стива Макконелла [83] 
Следующие материалы необходимо изучитьтивно: 

• Работу Уейта Гиббса [48] 
•Работу [94] 
информаF 

• Участвовать в качестве эксперта артефактов управления 
проектом 
• Участвовать в создании устава проекта 
• Участвовать в разработке плана проекта 
• Участвовать в разработке оценки проекта; владеть мето# 
дами индивидуальной оценки снизу вверх; возглавить 
оценочную работу 
• Владеть методами индивидуальной отчетности по со# 
стоянию дел проекта; формировать еженедельный отчет 
состояния проекта 
• Владеть планированием работ (включая способы разде# 
ления работы на участки, оценку и управление нарабо 
танной стоимостью) 
• Справочник по управлению выживанием проектов 
(2 дня) 

Программа профессионального развития фирмы Construx 

Действия 

Сертификация 
Участие в отрасле 
вой деятельности 

Требования 

• Быстрая разработка ПО (2 дня) 
• Оценка ПО (2 дня) 
Нет 
Нет 
Переход с продвинутого на ведущий уровень области знаний не столь 
жестко прописан, как переход с вводного на продвинутый уровень. Под# 
робные требования вырабатываются совместно сотрудником, его курато 
ром и руководителем (менеджером). На ведущем уровне помимо чтения, 
семинаров и опыта работы от сотрудника может потребоваться получение 
признанного отраслевого квалификационного сертификата и участие 
в отраслевой работе в качестве преподавателя на семинарах, докладчика 
на конференциях и т. д. 

В табл. 16.6 подробно описаны действия и масштаб работы, необходи 
мые для такого перехода. 

Таблица 16.6. Требования к продвинутому уровню знаний 
по управлению инженерией ПО 

Действия 

Чтение 

Опыт 
работы 

Требования 

Материалы для чтения подбираются индивидуально. Целевая об 
ласть и выбор конкретных материалов определяются совместно 
с куратором и указываются в плане профессионального развития. 
Для перехода с продвинутого на ведущий уровень в каждой СКА 
ориентировочно требуется прочитать около тысячи страниц. 

• Возглавлять планирование, оценку и отслеживание работы 
по значительному проекту; выработать устав проекта с ТЭО; 
выработать план проекта для крупного и небольшого проекта; 
создать рабочий план значимого проекта; определять цикл су 
ществования проекта, набор характеристик и планирование; 
владеть формальными методами управления рисками проекта; 
владеть формальными методами управления проблемами про# 
екта; владеть методами сбора ретроспективных данных. 
• Владеть групповыми методами оценок (например, расширен# 
ным методом дельфийского оракула), методами оценки анало# 
гии и параметрической оценки; создать оценку проекта сверху 
вниз на стадии формулировки проекта. 

156 
ГЛАВА 16 

Действия 

Семинары 

Сертифика# 
ция 

Участие в от 
раслевой дея 
тельности 

Таблица 16.6 (продолжение) 

Требования 

• Создать план# график работ (или этапов) значимого проекта; 
создать подробный план график этапа; владеть методами 
критического пути и критической цепочки для создания 
расписаний (Ганнт и PERT); владеть методами отчетности 
осостоянии проекта. 
Участвовать в консультационной работе/инструктировании 
по управлению инженерией ПО. 

• Эффективное управление проектами ПО (3 дня) 
• Управление рисками (2 дня) 
• Подряд сторонних организаций для проекта (2 дня) 
• Получить свидетельство сертифицированного профессио# 
нального разработчика ПО компьютерного общества IEEEa 
• Получить сертификат профессионала управления проекта# 
ми PMIb 
На ведущем уровне ожидается существенный вклад сотрудни 
ков в работу Construx и потенциально в отрасль в целом. При 
меры участия в работе отрасли: 

• Разработать вечерний, воскресный или институтский курс 
в этой области; вести вечерние, воскресные или институт 
ские семинары 
• Преподавать на семинарах в Construx или университете 
• Участвовать в отраслевом комитете, дискуссионной группе, 
совете по стандартам и т. п. 
• Сделать доклад на конференции 
• Опубликовать статью в ведущем издании или обозрении 
• Опубликовать статью в издании второго эшелона 
• Отрецензировать рукопись книги 
• Рецензировать статьи для IEEE Software или аналогичного 
издания 
• Активно участвовать в инструктаже и кураторстве других со# 
трудников Construx по избранной ведущей области 
a См. www.computer.org/certification. 
b См. www.pmi.org. 


Программа профессионального развития фирмы Construx 

Выводы, сделанные по результатам лестницы 
профессионального развития 

В
В
ерсия 1.0 лестницы профессионального развития была внедрена 
в Construx в 1998 г. и сразу после этого опубликована. Ее эволюция на 
шла отражение в версии 2.0, вышедшей в начале 2002 г. для внутреннего ис 
пользования. За это время нами сделан ряд важных выводов о внедрении 
и поддержке функционирования лестницы профессионального развития. 

Структурные и культурные усиления 

Чтобы обеспечить успешное профессиональное развитие в организа 
ции, программа лестницы должна быть встроена в ее организационную 
культуру. Мы определили разнообразные меры, чтобы гарантировать при# 
нятие программы сотрудниками и достижение желаемых результатов. 

Включение конкретных мер усиления, внедренных в Construx, не обя 
зательно для успешной реализации лестницы профессионального разви# 
тия, но важно определить структурные и культурные стимулирующие эле# 
менты, которые сработают в данной организации. 

Конкретные меры стимулирования, внедренные в Construx, включают: 

План профессионального роста (Professional Development Plan, 
PDP). Это механизм планирования, отслеживания и документирова 
ния продвижения сотрудника по лестнице профессионального разви 
тия. Каждый PDP включает кратко и долгосрочные цели сотрудника и 
конкретные действия и факторы (чтение, семинарские занятия, опыт 
работы и другую профессиональную деятельность), которые выполня# 
ются (формируются) в промежутках между отчетными датами. 

В цели PDP практически всегда входит повышение категории персона 
ла на период от одного до пяти лет. План определяет работу, которую 
должен выполнить сотрудник, чтобы добиться повышения. На период 
более года эта работа не формулируется в окончательном виде, но со 
ставляется общий план. Когда до повышения остается меньше года, ра 
бота расписывается подробно на каждый месяц для куратора, сотруд 
ника и его менеджера. План дает объективные и согласованные крите# 
рии повышения по службе для всей компании. 

Программа кураторов. Задача куратора – руководство и поддержка 
продвижения инженера по лестнице. Весь инженерный состав Con# 


158 
ГЛАВА 16 

strux разрабатывает и обсуждает свои планы с кураторами. Институт ку# 
раторов позволяет сформировать лестницу профессионального разви# 
тия для каждого отдельного сотрудника с ориентацией на него планов 
профессионального роста. Чтобы выполнить требования, предъявляе 
мые к знаниям сотрудника, куратор и сотрудник встречаются 6–8 раз 
в год и чаще, когда до повышения сотрудника остается менее полугода. 

Активное взаимодействие менеджера и куратора абсолютно необходи# 
мо для выполнения всех действий, предусмотренных планом роста. 
С целью поддержки этого процесса руководитель подразделения и ку# 
ратор должны подписать план профессионального роста сотрудника. 
На встречах с куратором отслеживается выполнение этого плана и, ес 
ли необходимо, корректируется срок повышения. 

Одной из целей института кураторов является выработка у инженеров 
вкуса к самостоятельности в дальнейшем профессиональном развитии. 
Инженеры на 12# й ступени и выше должны проявлять самостоятель 
ность, и кураторы им не нужны, если только они специально не просят 
об их назначении или собираются добиваться нового повышения кате# 
гории. 

Свидетельства профессионального развития. Construx отмечает 
разнообразные этапы и события в процессе профессионального раз 
вития сотрудников: повышение категории, получение профессиональ 
ных сертификатов, первый проект в роли ведущего, первые проведен 
ные занятия, первые опубликованные работы и другие значительные 
события. Каждый разработчик получает памятную пластинку с выгра# 
вированной надписью, обозначающей этапные достижения. Этим от# 
мечаются существенные события и подчеркивается важное место, ко 
торое Construx отводит профессиональному развитию. 

Программа обучения. Помимо обычного, текущего обучения, кото 
рое незримо идет при разработке ПО, Construx выделяет 10–12 дней 
в год для целенаправленных занятий. Для специалистов с небольшим 
опытом они обычно проводятся в форме семинаров и конференций. 
На ступени 12 и выше обучение может заключаться в подготовке вы# 
ступлений на конференциях, участии в комитетах по стандартам, орга 
низации специальных групп по отдельным вопросам и другой профес 
сиональной деятельности. 


Программа профессионального развития фирмы Construx 

Структура заработной платы. Было установлено, что традиционная 
система вознаграждений за труд должна быть перестроена, чтобы со 
действовать целям профессионального развития; в противном случае 
задачи проекта превалировали бы над задачами развития. Повышения 
в должности, зарплата и трудовые показатели, основанные на механиз# 
ме лестницы развития, дают возможность прочно закрепить за ним 
особое место в структуре организации. 

Каждой ступени лестницы профессионального развития соответствует 
в точности один уровень оплаты труда, при этом в Construx ступень 
каждого сотрудника и зарплата на каждой ступени являются открытой 
информацией. Поэтому у сотрудников есть очевидный стимул перейти 
на более высокую ступень, поскольку такой переход означает новый 
уровень зарплаты. 

Группы по инженерии ПО. Эти группы (Software Engineering Discus 
sion Groups, SEDG) представляют собой место для обсуждения и обмена 
опытом по инженерии ПО. В них под руководством ведущего группы 
обсуждаются и анализируются книги, входящие в перечень для чтения 
в рамках лестницы профессионального развития. Такие группы есть на 
ступенях 9, 10 и 11. Инженерам на ступени 12 рекомендуется участво 
вать в работе групп с целью поделиться опытом и знаниями с коллега# 
ми, находящимися на более низких ступенях. 

Признание ступени 12. Достижение ступени 12 – полного профес 
сионального статуса в Construx – является значительной вехой карье# 
ры инженера ПО в компании. В ознаменование этого достижения Con# 
strux премирует добившихся этого сотрудников в сумме разницы годо 
вой зарплаты на ступенях 11 и 12, устраивает прием в их честь, публи# 
кует информацию в местной газете деловых кругов и вывешивает порт 
рет в фойе здания компании. Этим подчеркивается важность, которую 
компания придает профессиональному развитию. 

Как встроить опытных инженеров в лестницу 
профессионального развития 

Оказалось, что и новых сотрудников, практиковавших в других компа# 

ниях, также нужно как# то поместить на лестницу развития. Многие из пре# 

тендентов на должности имеют значительный опыт работы в отрасли, 

но не отвечают другим требованиям нашей лестницы развития. Если при# 


160 
ГЛАВА 16 

нимать их на зарплату ступени 10 или 11, то мы не сможем конкурировать 
с другими работодателями. В практическом плане нам бы не удалось при 
влечь старший персонал. Поэтому важно было разработать механизм пе# 
ревода нового сотрудника на ступень 12, не разрушая цельности лестницы 
развития и не преуменьшая достижения других сотрудников Construx, ко# 
торые прошли путь к ступени 12 в фирме. 

Чтобы решить эту задачу, была создана «переходная ступень 12». Посту# 
пающий на работу опытный инженер сразу находится на ступени 12, 
но в течение года или менее обязан восполнить недостающие элементы 
этой ступени лестницы – в основном интенсивным чтением. В течение 
данного года сотрудник ежемесячно встречается со своим куратором для 
обсуждения выполненных им работ и всех вопросов продвижения по ле# 
стнице. Когда недостающие элементы восполнены, сотрудник получает 
официальное признание как инженер ступени 12. 

Преимущества лестницы 
профессионального развития 

ять лет работы в рамках версии 1 и 2 лестницы профессионального Празвития позволили реализовать множество преимуществ. 

• Ускоренное профессиональное развитие. Мы достигли нашей глав 
ной цели – повышения профессионализма нашего инженерного 
персонала, и его развитие идет чрезвычайно быстро. Во время собе 
седований с претендентами на занятие вакантных должностей мы 
обычно видим, что внутренние стандарты в Construx для инженера 
с двух#трехлетним стажем сравнимы с требованиями, предъявляе 
мыми к самому опытному персоналу во многих других компаниях. 
• Командный потенциал. Стандартизировав наши области знаний, 
мы смогли получить общую основу практического опыта и знаний. 
Это улучшило взаимопонимание между сотрудниками и обеспечило 
высокую эффективность работы в проектах в особой роли лидеров. 
• Хорошо воспринимаемые критерии повышения в должности. Было 
установлено, что технический персонал компании высоко оценива 
ет открытость механизма повышения. Сотрудники видят, что могут 
контролировать свой карьерный рост и что перед ними действи 
тельно открывается перспектива, а не просто возможность получить 
рабочее место. 

Программа профессионального развития фирмы Construx 

• Привлечение персонала. Опыт работы с областями знаний внутри 
компании позволяет непосредственно оценивать кандидатов на ин 
женерные должности. Мы можем оценить способности кандидатов 
в каждой области знаний. Оценки кандидатов в проектах различны 
ми нашими сотрудниками оказываются весьма согласованными. 
• Отказ в приеме на работу. Разработанный нами механизм лестни 
цы развития требует определенной подотчетности, что не очень 
нравится некоторым кандидатам для приема на работу. Когда в про 
цессе поиска кандидатам прямо указывается на требования профес# 
сионального развития, это позволяет отсеять многих из них, чьи 
намерения в связи с инженерией ПО нельзя считать серьезными. 
• Управление квалификационными навыками. Матрица 10.3 областей 
знаний является естественным структурированным методом отсле# 
живания возможностей и способностей персонала нашей компании. 
• Моральное состояние и удержание сотрудников. Хотя лестница про# 
фессионального развития является лишь частью всей картины, мы 
убеждены, что она вносит огромный вклад в повышение морального 
духа и стабильности коллектива. На момент написания этой книги 
фирма Construx третий год подряд стала финалистом конкурса, про# 
водимого изданием Washington CEO Magazine, на звание «Малого 
предприятия, где лучше всего работать». В течение более трех лет ни 
один сотрудник не ушел из компании по собственному желанию. 
Использование лестницы профессионального 
развития в других компаниях 

естница профессионального развития используется в Construx как Лгибкий и структурированный механизм поддержки развития карьеры. 
Определяя и развивая способности в различных областях знаний, Con# 
strux обеспечивает широту и глубину квалификации персонала в соответ# 
ствии с инженерным подходом к разработке ПО. Гибкость механизма дает 
возможность нашему персоналу выбирать продвижение по лестнице, от# 
вечающее их собственным интересам. 

Construx предъявляет более жесткие требования к способностям, чем 
большинство компаний в соответствии с нашей корпоративной миссией – 
«развивать науку и искусство инженерии ПО». Большинство наших инже 
неров, находящихся на высоких должностях, занимаются консультирова# 
нием, преподаванием, возглавляют проекты, а это значит, что большее 


162 
ГЛАВА 16 

число наших сотрудников способны выйти на ведущий уровень по срав 
нению с другими компаниями. 

Мы пришли к выводу, что опора на области знаний, сформулированная 
в SWEBOK, дала нам существенные выгоды. Выстраивание областей знаний 
в виде матрицы 10.3 означает, что лестницу профессионального развития 
можно легко перестроить, добавляя или убирая уровни способностей, об 
ласти знаний и специальные требования для удовлетворения нужд кон 
кретной организации. Используя структуру матрицы 10.3, можно форми# 
ровать на основе лестницы особые пути карьерного роста, например, ме 
неджер проектов, бизнес#аналитик, разработчик, тестировщик ПО, обес 
печивая структуру и направление развития внутри организации, которая 
не склонна разъяснять персоналу внутренний механизм функционирова 
ния лестницы. 

Возможны некоторые отличия при внедрении лестницы в других ком 
паниях, но ее структура и основные понятия могут использоваться в лю 
бой организации. В каждом отдельном случае фундаментальная основа ле 
стницы обеспечивает высокую степень единства и целостности подхода. 


ЧАСТЬ ЧЕТВЕРТАЯ 

Индустриальный 
профессионализм 

ГЛАВА СЕМНАДЦАТАЯ

П

Построение 
профессии 

Инженерная работа может дать настоящее удовлетворение 
в разных сферах, но особенно – принося практическую пользу 
человечеству и служа его благосостоянию. 

ВАННЕВАР БУШ (VANNEVAR BUSH) 

В отношении инженеров сложился свой стереотип, очень похожий на сте# 
реотип программиста. Их считают скучными и нудными, однако именно 
эти нудные и скучные люди являются авторами некоторых самых впечат# 
ляющих творений нашего времени. Прогулка человека по Луне, взгляд 
на внутреннее строение космоса с помощью телескопа Хаббл, полеты на 
современных самолетах, поездки на автомобилях, работающих почти 
безупречно, подключение к интернет#сайтам по всему миру, удовольствие 
от просмотра фильмов в домашнем кинотеатре – все эти чудеса техноло# 
гии стали в основном результатом инженерных достижений, практиче# 
ского воплощения научных принципов. 

Необходимость инженерии 

сторически профессиональная инженерная наука сформировалась Ив ответ на угрозы общественной безопасности. Хотя безопасность со 
временных мостов воспринимается как данность, в 60 #х годах XIX века 
в Америке ежегодно рушилось более 25 мостов [45]. Рухнувшие мосты и их 
жертвы привели к формированию строгого инженерного подхода к про 
ектированию мостов и их строительству. В Канаде инженерный фольклор 
утверждает, что мост, рухнувший в Квебеке в 1907 г., стал катализатором 
установления более высоких стандартов во всех областях инженерной 


166 
ГЛАВА 17 

деятельности Канады, что символизирует сегодня церемония железного 
кольца.1 (Эта церемония подробно описана в главе 19.) Инженеры в Техасе 
стали получать лицензии только после взрыва в бойлерной начальной 
школы в 1937 г., унесшего жизни более 300 детей.2 Агрегат, ставший причи# 
ной взрыва, сегодня заменен программным обеспечением. 

Инженерная профессия отличается от других тем, что, например, вра 
чи, зубные техники, бухгалтеры и адвокаты в основном предоставляют 
свои услуги конкретным физическим лицам или в некоторых случаях 
юридическим лицам. Инженеры же создают предметы, а не предоставля 
ют услуги частным лицам. Они несут ответственность перед обществом 
в целом, а не перед отдельными гражданами. В этом смысле разработчики 
ПО сегодня больше похожи на инженеров, чем на представителей других 
профессий. В мире ПО пока не случилось своего обрушения моста, как 
в Квебеке, или взрыва бойлерной, как в техасской школе. Но потенциаль 
ная возможность сохраняется; это известно любому посетителю форума, 
посвященного риску при использовании компьютеров и связанных с ни 
ми систем.3 ПО уже стало виной многомиллионных убытков в ряде случа 
ев, начиная со смешных до закончившихся смертельным исходом. Цутому 
Шимомура оставил свой автомобиль на парковке аэропорта в Сан# Диего 
29 февраля 1992 г. Когда он вернулся через 6 дней, счет за стоянку составил 
более 3 тысяч долларов. ПО парковки не распознало дату 29 февраля как 
правильную.4 В январе 1990 г. из за ошибки ПО за 9 часов было блокирова 
но примерно пять миллионов телефонных звонков. Первый полет кораб# 
ля многоразового использования был отложен на два дня из #за трудноуло 
вимой ошибки программиста. Космический зонд «Маринер 1» был поте# 
рян на пути к Венере из# за ошибки в программировании управления нави# 
гацией. В Лондоне автоматизированная система отправки бригад скорой 

1 Я называю эти истории фольклором, т. к. несколько канадских инженеров рас# 

сказывали мне, что стальное кольцо традиционно считается сделанным из ос 

татков того самого моста, рухнувшего в Квебеке в 1907 г. Опубликованные сведе# 

ния о церемонии стального кольца в Канаде не содержат упоминаний о квебек# 

ском мосте. В самой церемонии мост, возможно, и упоминается, но это тайная 

церемония. 

2 

The New York Times, 3 мая 1999 г. 

3 

Подписку на доступ к этому форуму можно оформить по электронной почте: 
risksFrequest@csl.sri.com или через Usenet на comp.risks. 

4 

Все примеры в данном пункте взяты из книги Ньюмана Питера Дж. (Neumann 
Peter G.) «Computer# Related Risks» (Риски, связанные с компьютерами), Reading, 
МA: Addison#Wesley, 1995. 


Построение профессии 

помощи по вызовам была введена в действие раньше, чем была готова, 
и полностью рухнула, что вызвало задержки до 11 часов. Новая система от 
правки бригад стала причиной 20 смертных случаев. Самолет, выполняв 
ший рейс № 655 иранских авиалиний, был сбит системой «Эгида» (щит 
Зевса) американского авианосца «Винсенн» в 1988 г. Погибло 290 человек. 
Поначалу ошибку записали на счет оператора, но позднее некоторые спе# 
циалисты посчитали причиной происшествия плохой дизайн пользова 
тельского интерфейса системы «Эгида». 

Искусство и инженерия 

рименение математики и научных принципов в инженерной практи Пке делает ее открытой для обвинений в сухости, в том, что они выхо 
лащивают инженерное дело. Та же самая критика звучит и в отношении 
инженерии ПО. Насколько справедливы эти утверждения? Инженерия свя# 
зана со всеми аспектами конструирования и проектирования, в том числе 
и с эстетическими. Инженерный дизайн не ограничивается формой и цве# 
том. Инженеры проектируют все – от электронных плат и несущих пере 
крытий до аппаратов для посадки на Луне. Как замечает Сэмюэль Флорман 
(Samuel C. Florman) в книге «Existential Pleasures of Engineering» (Экзистен 
циальные удовольствия инженерии), «творческое проектирование – вот 
главная миссия профессионального инженера». Сравним два хорошо изве# 
стных архитектурных творения: кафедральный собор в Реймсе, закончен 
ный примерно в 1290 г. (рис. 17.1), и здание Сиднейской оперы (рис. 17.2), 
построенное в 1973 г. При проектировании собора рассчитывали на мате 
риалы, свойства которых были более или менее известны в то время. 

Здание оперы было построено на 700 лет позже собора. Как видно из 
рис. 17.2, стилистически оно кардинально отличается от собора в Реймсе. 
Архитекторы взяли современные материалы (сталь, железобетон) и при# 
менили инженерные методы, в том числе и компьютерное моделирова 
ние, чтобы определить минимальное количество материалов, которое 
можно использовать, не подвергая здание риску разрушения. 

Предпочесть то или иное здание – дело вкуса. Но какое здание можно 
было построить – это инженерный вопрос. Современные архитекторы 
могли бы выстроить еще один Реймский собор, но строители XIII века не 
смогли бы построить Сиднейскую оперу. Причина невозможности по 
стройки этого здания в XIII веке – не отсутствие искусства архитектуры, 
а нехватка инженерных возможностей. Каждый может припомнить ужас# 


168 
ГЛАВА 17 


Рис. 17.1. Реймский кафедральный собор, г. Реймс, Франция. Пример искусства 
во времена неразвитой инженерии 


Рис. 17.2. Сиднейская опера, г. Сидней, Австралия. Пример зависимости 
искусства от инженерных решений1 

1 

Рисунки 17.1 и 17.2 взяты из сборника фотографий IMSI’s MasterClips©/Master 
Photos©, 1895 Francisco Blvd. East, San Rafael, CA 94901# 5506, USA. 


Построение профессии 

ные сооружения, где искусство проиграло инженерной экономии или, на 
оборот, где не принималась во внимание эстетика. Инженерия, лишенная 
искусства, может быть ужасной, но искусство без инженерии может ока 
заться невозможным. Не инженерия, а ее нехватка ограничивает художест# 
венные изыски. 

То же самое справедливо и для современных систем ПО. Уровень инже# 
нерного мастерства определяет объем систем ПО, которые могут быть 
созданы, насколько легко ими можно будет пользоваться, их быстродейст# 
вие, количество возможных ошибок в них, а также то, насколько свободно 
они будут взаимодействовать с другими системами. В ПО содержится мно 
жество эстетических элементов, а разработчики ПО отсутствием стремле# 
ния к артистизму не страдают. Чего иногда не хватает при разработке ПО, 
так это инженерных методик, которые позволяют реализовать наши са# 
мые грандиозные эстетические устремления. 

Инженерные дисциплины достигают зрелости 

атастрофы в давно сложившихся областях инженерии ускорили про# К фессионализацию инженерных работ. Разумеется, полноценная ин# 
женерная дисциплина не может быть внедрена в практику простым воле 
вым усилием. Мэри Шоу (Mary Shaw) из Университета Карнеги Меллона 
описала поэтапный процесс, который проходит инженерная область, по 
ка не достигнет профессионального уровня (рис. 17.3). 

На стадии ремесла достойная работа выполняется талантливыми само# 
учками# любителями. На вооружении ремесленников интуиция и простая 
сила, с помощью которых они создают свои творения, будь то мосты, элек 
троприборы или компьютерные программы. Некоторые изделия предна 
значены для продажи, но большинство создается исключительно для лич# 
ного пользования. У ремесленников есть лишь слабое представление о мас# 

Производство 

Наука 


Ремесло Коммерческая Инженерная 
практика практика 

Рис. 17.3. Развитие дисциплины от ремесла к профессиональной инженерной 
практике. Источник: «Prospects for an Engineering Discipline of Software» 
(Перспективы превращения ПО в инженерную дисциплину» [124] 


170 
ГЛАВА 17 

совом производстве для продажи, а иногда оно и вовсе отсутствует. В боль 
шинстве случаев они находят имеющимся в их распоряжении материалам 
нестандартное применение. Практическая сфера развивается хаотично, 
нет систематического образования, и никто не обучает ремесленников 
применению самых эффективных методов. 

Гражданское строительство (возведение мостов, акведуков) в Древнем 
Риме было на стадии ремесла, как и применение компьютеров в вычисле# 
ниях в начале 50 #х и 60 #х годов XX века. Многие проекты ПО сегодня все 
еще самым причудливым образом расходуют наличный ресурс (рабочее 
время персонала) и функционируют на уровне ремесла. В какой то мо 
мент спрос на изделия начинает превышать возможности самого ремес 
ленника одиночки и диктует расширение производства, что начинает 
влиять на формирование дисциплины. По мере усложнения рецептов из# 
готовления начинают складываться письменные своды эвристических 
и процедурных правил. 

На коммерческой стадии работники тщательнее подходят к ресурсам, 
необходимым для обеспечения производства. Эта стадия отмечена более 
выраженной экономической направленностью, и стоимость изделий мо# 
жет стать источником затруднений. 

Практики обучаются с целью обеспечить постоянство качества произ# 
водимых ими изделий. Они варьируют параметры и проверяют, что рабо 
тает, а что нет, и благодаря этому производственные методы систематиче# 
ски совершенствуются. 

Реймский собор был построен в то время, когда гражданское строитель 
ство находилось на коммерческой стадии развития. В области ПО многие 
организации, находящиеся на коммерческой стадии, вышли на достойный 
уровень качества продукции и производительности, привлекая тщательно 
отобранный и обученный персонал. Эти организации опираются на осво 
енные методики и модифицируют их крайне незначительно, преследуя 
цель выдавать продукт лучшего качества и поднять выполнение проектов 
на более высокий уровень. 

Некоторые проблемы на коммерческой стадии невозможно решить 
методом проб и ошибок. Поэтому, если экономические ставки достаточно 
высоки, начинает складываться соответствующая наука. По мере форми 
рования науки в ней разрабатываются теории, которые обеспечивают 
коммерческую практику, и именно на этом этапе сфера деятельности дос 
тигает стадии профессиональной инженерии. В этот момент прогресс на 
ступает как в результате применения научных принципов, так и вследст# 


Построение профессии 

вие практических экспериментов. Занятые в данной сфере люди на этой 
стадии должны быть хорошо подготовлены в своей профессии как теоре# 
тически, так и практически. 

Наука для разработки ПО 

Н
Н
аука ПО годами отставала от развития коммерческого ПО. В 1950– 
1960 гг. разрабатывались грандиозные системы ПО, такие как проти 
воракетная система Sage, система бронирования билетов на авиалиниях 
Sabre, операционная система IBM ОС/360. Коммерческая разработка этих 
систем продвигалась значительно быстрее, чем соответствующая научная 
основа, но в инженерных дисциплинах практические приложения обычно 
развиваются быстрее науки. Аэродинамический профиль крыла, который 
позволяет летать самолетам, был создан сразу же после того, как было «до# 
казано», что никакой аппарат тяжелее воздуха летать не может.1 Развитие 
термодинамики последовало за изобретением паровой машины. Во вре# 
мена Джона Реблинга (John Roebling) прочность стальных тросов еще не 
была изучена, поэтому различные секции моста были спроектированы 
с запасом прочности от 6 до 1. Этот запас был порожден инженерным 
чутьем, заменявшим теоретическое знание. 

Наука, обеспечивающая разработку ПО, еще не столь хорошо сформу 
лирована, как физика, на которую опирается гражданское строительство. 
На самом деле она даже не считается «естественной». Герберт Саймон (Her 
bert Simon) называл ее «наукой об искусственном» [125] – это области зна 
ний компьютерной науки, математики, психологии, социологии и науки 
управления. Несколько организаций, связанных с производством ПО, ре 
гулярно применяют теории этих наук в своих проектах, но до их всеобще# 
го применения к проектам ПО еще далеко. 

Но требуем ли мы от науки ПО действительно нужных результатов? 
Во многих программах – системах управления складскими запасами, рас 
чета зарплаты и учета персонала, формирования главной бухгалтерской 
книги, проектирования операционных систем, управления базами дан 
ных, трансляторах языков программирования (перечень почти бесконе# 
чен) – одни и те же базовые приложения были написаны столько раз, что 
такие системы не должны требовать сильного напряжения уникальной 

Кристофер Александер (Christopher Alexander), цитируется по книге Роберта Л. 
Гласса [52]. 


172 
ГЛАВА 17 

изобретательской мысли, как это может показаться. Мэри Шоу указывает, 
что в сложившихся инженерных областях обычное проектирование вклю 
чает решение стандартных задач и повторное применение готовых реше# 
ний. Очень часто такие «решения» сформулированы в виде равенств, ана# 
литических моделей или готовых блоков# компонент. Время от времени 
возникают неординарные задачи проектирования, но главная работа ин 
женеров состоит в применении стандартных методик к знакомым задачам. 

Мир ПО еще только на пути формирования своих «стандартных реше# 
ний», предназначенных для среднестатистического пользователя. Многие 
наработки проектов ПО потенциально могут быть применены многократ# 
но, огромное их количество имеет больший потенциал повышения каче 
ства и производительности, чем его наиболее часто применяемый искус 
ственный объект (артефакт) – исходный код. Вот краткий перечень таких 
искусственных объектов, ориентированных на многократное использова 
ние [64]: 

• Архитектура сама по себе и процедуры проектирования ПО 
• Схемы проектирования 
• Технические требования сами по себе и процедуры их разработки 
• Элементы интерфейса пользователя и процедуры его проектирова 
ния 
• Сметные стоимости и процедуры их формирования 
• Данные планирования, планы проектов и процедуры планирования 
• Планы испытаний, схемы тестов, данные тестов и процедуры тести 
рования 
• Процедуры технических экспертиз 
• Исходный код, процедуры компоновки и интеграция 
• Процедуры управления конфигурацией ПО 
• Отчеты после завершения и экспертиз проектов 
• Организационные структуры, состав групп разработчиков и проце# 
дуры управления 
На сегодня совсем мало проектных наработок собрано в форме, легко 
применимой любой организацией. Наука еще не обеспечила разработку 
ПО набором формул, описывающих успешное управление проектом, или 
методикой создания удачного продукта ПО. Возможно, этих описаний ни 
когда и не будет. Но наука вовсе не должна состоять из формул и математи# 
ческих выражений. В своей работе [76] Томас Кун (Thomas Kuhn) указывает, 
что научная парадигма может состоять из набора решенных задач. Много# 


Построение профессии 

кратно используемые артефакты проектов образуют набор решенных про# 
блем – требований, проектирования, планирования, управления и т. д. 

Зов инженерии 

ртур Чарльз Кларк говорил, что «любая достаточно развитая техноло А гия неотличима от магии». Технология ПО достаточно развита, и об 
щество уже заворожено ею. Люди не осознают, с какими рисками связаны 
программные продукты, или финансовые риски, с которыми связаны про 
екты разработки ПО. Как жрецы этой могущественной магии разработчи 
ки ПО несут профессиональную ответственность за ее мудрое использова# 
ние. 

Инженерный подход к проектированию и реализации зарекомендовал 
себя за долгие годы как устраняющий (почти) риски общественной без# 
опасности, одновременно воплощая самые дерзкие устремления челове# 
ческого духа. Какими бы ни были цели – безопасность, эстетика или эко 
номика, – подход к ПО как к инженерной дисциплине – это эффективный 
способ поднять его разработку до уровня настоящей профессии. 


ГЛАВА ВОСЕМНАДЦАТАЯ

Ш

Школа жизни 

Природные способности как растения: им нужен уход в виде обучения, 
но само учение дает слишком много простора (зато часто рождает 
самомнение (амбиции), если не ограничено опытом). 

ФРЕНСИС БЭКОН 

Выше уже говорилось, что большинство разработчиков ПО осваивали 
профессию в школе жизни. Опыт, может быть, и хороший учитель, но уж 
очень медленный и дорогостоящий. 

Опытные разработчики сетуют, что в колледжах не прививают навы# 
ков, необходимых для эффективной работы по профессии. Это подтвер 
ждается анализом демографической структуры и системы обучения разра 
ботчиков ПО. В главе 4 утверждается, что в североамериканских универси 
тетах преподается скорее компьютерная наука, а не инженерия ПО. Мно 
гие следствия этого вывода пока оставались в стороне, но теперь настало 
время поговорить и о них. 

Отрасль все меньше и меньше удовлетворяют выпуски специалистов 
из университетов. Кейперс Джоунз указывал, что с середины 80 #х годов 
прошлого века в крупных корпорациях в США было больше своих препо 
давателей по разделам инженерии ПО, чем во всех университетах вместе 
взятых [65]. Многие из этих корпораций предлагали более полные про# 
граммы курсов по инженерии ПО, чем практически любой университет. 

В компании «Боинг» изучили программы курсов инженерии ПО более 
чем 200 университетов США [46] с целью выявить те из них, которые могут 
обеспечить навыки и образование, необходимые для успешной работы 
в «Боинге». Оказалось, что лишь около половины программ были аттесто 
ваны Советом по аккредитации в области компьютерных наук (CSAB),1 


Школа жизни 175 


и лишь половина из них готовила выпускников, отвечающих требованиям 
«Боинга». Некоторые программы были больше ориентированы на практи 
ческую работу, но студентов обучали инженерии ПО под видом компью# 
терной науки, что размывало реальное представление о ней. 

В то же время на инженерные специальности «Боинг» принимал заяв 
ления о приеме на работу от выпускников, прошедших обучение по любой 
программе, аттестованной Советом по аттестации инженерии и техноло# 
гии (ABET), и не принимал заявления от выпускников по аттестованным 
программам. Это приводит к выводу, что программы обучения по компью 
терным наукам и стандарты аттестации имеют для отрасли сомнительную 
ценность. Значительная доля программ не отвечает запросам отрасли. 
В противоположность этому ценность программ инженерного обучения 
и аттестации настолько упрочилась, что такие компании, как «Боинг», мо 
гут смело принимать на работу выпускников инженерных отделений, не 
проводя самостоятельный отбор университетов. 

Сомнительная согласованность образования в области компьютерной 
науки и нужд отрасли дает одно возможное объяснение упадку и застою, 
который наблюдается в количестве выпускников по специальности «ком 
пьютерная наука» с 1985 по 1997 гг. Как видно из рис. 18.1, оно упало с выс# 
шей отметки примерно в 42 тысячи выпускников ежегодно в 1985 г. до низ# 
шего уровня примерно в 24 тысячи с 1990 по 1997 гг. 

В последние годы (1998–2000 гг.) наблюдается резкий скачок количе 
ства студентов, получающих образование в этой области. Мне кажется, что 
и падение, и скачок заслуживают объяснения. 

Расхожее мнение состоит в том, что компьютерная наука переживала 
длительный упадок, потому что студенты считали ее скучной.1 Я ее таковой 
не считаю, и меня подобные мнения не убеждают. Правильное объяснение 
уже много лет у нас перед глазами: количество студентов, получающих 
специальность по компьютерной науке, снижалось, потому что это обра 
зование все меньше увязывалось с требованиями рынка труда. Студенты 
знали, что можно получить работу и не имея диплома по компьютерной 
науке, а многие работодатели не ценили дипломы по этой специальности. 

1 На момент этого наблюдения программы по компьютерным наукам аккредито# 
вались в CSAB. Теперь эти программы аккредитуются в ABET/CAC. 

1 USA Today, February 16, 1998, pp. 1B–2B. «Software Jobs Go Begging», The New York 
Times, January 13, 1998, p.A1. 


176 
ГЛАВА 18 

Дипломы по специальности Всего дипломов 
компьютерная наука бакалавра 
Всего дипломов 

0 
5,000 
10,000 
15,000 
20,000 
25,000 
30,000 
35,000 
40,000 
45,000 
0 
200,000 
400,000 
600,000 
800,000 
1,000,000 
1,200,000 
1,400,000 
Компьютерные науки 
и информатика 
со степенью бакалавра 
‘70–71‘75–76‘80–81‘81–82‘82–83‘83–84‘84–85‘85–86‘86–87‘87–88‘88–89‘89–90‘90–91‘91–92‘92–93‘93–94‘94–95‘95–96'96–97'97–98'98–99'99–00 

Рис. 18.1. Количество студентов, получивших дипломы по компьютерной науке, меF 
нялось в последние годы. Источник: Национальный центр статистики образования1 

Старая система образования перестала срабатывать, поэтому ее надо было 
изменить. 

В период с 1998 по 2000 гг. начались изменения по двум направлениям. 
Во первых, Интернет вызвал бурю энтузиазма среди студентов выпускни 
ков. Началась «золотая лихорадка», и все больше студентов стало готовить 
ся к карьере в отрасли ПО. Во# вторых, спрос интернет#компаний с назва 
ниями на «.com» в конце 1990#х годов докатился до университетской сис 
темы, и университеты снова стали увязывать программы курсов по компь 
ютерной науке с требованиями отрасли после нескольких лет падения их 
популярности среди студентов. 

Подготовка профессиональных инженеров 

Т 
Т 
езис, который я отстаиваю в этой книге, состоит в том, что инженер 
ные профессии являются отличной моделью для формирования про 
фессии разработчика ПО, и лестница профессиональной подготовки ин 
женеров тоже. 

1 

Данные для построения диаграммы взяты из таблицы 255 «Bachelor’s degrees 
conferred by degree# granting institutions, by discipline division: с 1970–1971 по 
1999–2000 гг.» [97]. 


Школа жизни 177 


Диплом 
бакалавра 
по аттестованной 
инженерной 
программе 
Несколько лет 
практической 
работы 
инженером 
Экзамен 
на получение 
лицензии 
профессиональ 
ного инженера 
Заявление 
на выдачу 
лицензии 
Экзамен 
по основам 
инженерных 
знаний 
Начальный экзамен: 

Химия, этика, 
математика, 
компьютеры, 
статика, 
динамика, 
электрические цепи, 
термодинамика 
и т. п. 

Последующий экзамен: 

Гражданские 
сооружения, 
химическая, 
электротехническая, 
промышленная, 
механическая 
или общая 
инженерия 

Экзамен на получение 
лицензии профессионального 
инженера по специальности: 

сельское хозяйство, 
химия, гражданские 
сооружения, 
управление, 
электротехника, 
пожаробезопасность, 
производственные 
отрасли, механика, 
металлургия, 
горнодобывающая и 
г

ядерная промышленности, 
нефтехимия, 
конструирование 

Рис. 18.2. Профессиональная подготовка инженера включает образование, 
практическую стажировку и опыт работы. Это хорошая модель профессиоF 
нального развития в инженерии ПО. Источник: работа Дениса Фрейли1 

От профессионального инженера требуются глубокие теоретические 
и практические знания. Как показано на рис. 18.2, профессиональный ин 
женер сначала получает диплом бакалавра наук в аттестованном учебном 
заведении. Далее он сдает экзамен по основам инженерной науки (Funda 
mentals of Engineering – FE), который иногда называют «экзаменом инже 
нера #адъюнкта» (EIT). После сдачи этого экзамена в течение нескольких 
лет новоиспеченный специалист работает под руководством профессио 
нала. В конце этого периода инженер сдает экзамен по избранной инже# 
нерной специальности (инженер гражданских сооружений, инженер# 
электротехник или химик). После сдачи этого экзамена соответствующий 
территориальный орган выдает лицензию профессионального инженера, 
и появляется новоиспеченный Профессиональный Инженер. 

Необходимый баланс между теорией и практикой в образовании, кото 
рое получают специалисты по инженерии ПО, достигается, если между об 
разованием и обучением проводится четкое различие. Образование должно 

Деннис Фрейли (Dennis Frailey), частная беседа. 


178 
ГЛАВА 18 

привить студентам качества, которые позволят им быстро справляться с раз# 
нообразными интеллектуальными задачами. Оно ориентировано на общие 
знания и включает развитие важнейших навыков мышления. Обучение дает 
конкретные умения и знания, которые можно применять сразу и много 
кратно. Образование – это стратегическая часть; обучение – тактическая. 

Сегодня самый распространенный тип подготовки разработчиков ПО – 
обучение, которое, как правило, скорее является ответом на конъюнктуру 
и обеспечивается в нужный момент по технологиям, которые необходимы 
для конкретного проекта. Образование, дающее знание основополагаю# 
щих принципов инженерии ПО, почти отсутствует в этой схеме. Кое кто 
утверждает, что разработка ПО стала настолько специализированной 
и фрагментированной, что не поддается стандартизованному образова 
нию. Она действительно фрагментирована – для стандартизованного обу 
чения, но не для стандартизованного образования. 

Первые шаги 

П
П
рограммы образования для студентов#выпускников по специально 
сти «инженерия ПО» существуют уже около 20 лет, но программы для 
студентов младших курсов еще только зарождаются, особенно в Северной 
Америке. Университет Сиэттла присвоил первую в мире степень магистра 
по специальности «инженерия ПО» в 1982 г. Факультет компьютерной науки 
в Университете Шеффилда в Англии открыл курс по данной специально 
сти в 1988 г. Рочестерский технологический институт (R.I.T) открыл пер# 
вую программу по курсу инженерии ПО в США, принял студентов в 1996 г., 
и первый выпуск состоялся только в 2001 г. 

На сегодня в США предлагается 25 программ на получение степени ма 
гистра инженерии ПО. Несколько программ предлагается в Канаде, Вели# 
кобритании, Австралии и других странах.1 К лету 2003 г. два с половиной 
десятка университетов в США и Канаде предлагали дипломы низших сте# 
пеней по инженерии ПО. По крайней мере 13 университетов предлагают 
такие программы в Великобритании и еще не менее шести в Австралии. 

R.I.T. и другие университеты сотрудничают с IEEE, ACM и ABET/EAC 
(Аккредитационной комиссией в области техники) в разработке программ, 
которые могут быть аттестованы в США как инженерные программы. 
1 

Актуальная информация на сайте моей компании по адресу www.construx.com/ 
profession. 


Школа жизни 179 


На рис. 18.3 приведен примерный список дисциплин, предусмотренных 
программой Рочестерского технологического института. 

Программа по специальности инженерия ПО в R.I.T. 

Первый год Третий, четвертый и пятый годы 

Семинар для вновь поступивших (1)* Принципы архитектуры ПО (4) 
Компьютерная наука I, II, III (12) Формальные методы проектирования 

(основы компьютероведения) и конструирования (4) 
Вычисления I, II, III (12) Технические требования и спецификации ПО (4) 
Химия для колледжей I (4) Проект инженерии ПО I,II (8) 
Университетский курс физики I, II Программирование научных приложений (4) 

и лабораторные занятия (10) Концепции языков программирования (4) 
Общеобразовательные предметы (12) Компьютерные организации (4) 
Человеческие факторы (4) 

Второй год 

Теория вероятности и статистика (4) 

Инженерия подсистем ПО (4) Курс по выбору отрасли приложения** (12) 
Компьютерная наука IV (4) (структуры данных) Курс по выбору (4) 
Профессиональные взаимоотношения (4) Общеобразовательные предметы (18) 
Введение в инженерию ПО (4) Курс по выбору проектирования ПО (8) 

Программирование на языке Ассемблера (4) Курс по выбору проектирования ПО (8) 
Введение в цифровые системы (4) Курс по выбору инженерии ПО (4) 
Дифференциальные уравнения (4) Комбинированное образование 
Дискретная математика I, II (8) (требуется 4 квартала) 
Университетский курс физики (III) 

и лабораторные занятия (5) 
Общеобразовательные предметы (8) 

* В скобках указано количество 4 х часовых единиц (двойных «пар» академических часов). 
** Каждый студент обязан пройти три курса дисциплин в области приложений, связанных с инженерией 
ПО. Сегодня эти области включают: электротехнику, промышленные технологии, механику, связь и сете 
вые технологии, встроенные системы и коммерческие приложения. 

Рис. 18.3. Программа Рочестерского технологического института по специальF 
ности «инженерия ПО» предусматривает такие дисциплины, как компьютерная 
наука, связь, общеобразовательные предметы и инженерия ПО 

В программу R.I.T. входит несколько дисциплин факультета компьютер 
ной науки (например, компьютерная наука I, II, III и IV), а также несколько 
предметов, обычно не включаемых в программу по компьютерной науке, 
в том числе: инженерия подсистем ПО, требования к спецификации ПО, 
проект инженерии ПО I и II, а также человеческие факторы. Программа 
также предусматривает 4 четверти комбинированного образования (соче# 
тание теории и практики, стажировка) и значительный опыт работы в кол 
лективе разработчиков. Другими словами, студент должен накопить широ 
кий опыт отраслевой практики перед получением диплома со степенью. 
Это требование к накопленному опыту является отличительной чертой 
программы инженерного образования. Программы по компьютерной нау# 
ке могут предусматривать получение отраслевого опыта, но лишь за счет 
ослабления упора на чистую науку. 


180 
ГЛАВА 18 

Одна интересная особенность программы R.I.T. состоит в ее продолжи# 
тельности (5 лет). В середине 90# х годов XX века степень бакалавра в инже# 
нерной науке можно было получить, как правило, после пяти лет обучения 
[46]. Различные факторы вынудили университеты сократить продолжи# 
тельность обучения до четырех лет. Четырехгодичное обучение инжене 
рии по программе низшей степени, наверное, неразумно с практической 
точки зрения, особенно по модели R.I.T., где студенты целый год приобрета 
ют отраслевой опыт. Программы, рассчитанные на пять лет, могут стать 
нормой для получения первой степени по специальности «инженерия ПО». 

Аттестация 

ттестация университетских программ требуется для поддержания вы# А соких стандартов образования в инженерии ПО. Она призвана гаран 
тировать, что студенты, прошедшие обучение по аттестованной програм# 
ме, получат основные знания в выбранной области. Аттестация также 
обеспечивает общую рабочую терминологию и стандарты выполнения ра 
боты. В США программы инженерного образования аттестует ABET/EAC, 
которая не выдает сертификата, пока не сделан первый выпуск специали 
стов. Как только будет аттестована первая программа, многие другие уни 
верситеты, вероятно, почти сразу же станут предлагать свои программы 
по инженерии ПО на получение начальных степеней. 

Одно из различий компьютерной науки и инженерии ПО заключается 
в аттестационных требованиях к преподавателям по данным специаль 
ностям. 

Критерии аттестации программ по компьютерной науке в США требу# 
ют от профессорско #преподавательского состава вносить в нее «научно 
исследовательский вклад», но не требуют иметь отраслевой опыт [31]. В от# 
личие от этого, критерии ABET/EAC для аттестации программ инженерно# 
го образования в США устанавливают, что при оценке профессорско #пре 
подавательского состава необходимо учитывать «непреподавательский 
инженерный опыт», а регистрацию в качестве профессиональных инже 
неров [32]. CEAB (Канадский совет инженерной аттестации) применяет 
аналогичные критерии. В профессиональном образовании важно, чтобы 
многие преподаватели были квалифицированными действующими спе 
циалистами по профессии – врачи учат врачей, адвокаты – адвокатов и т. д. 

Эти различия между критериями аттестации программ по инженерии 
и компьютерной науке не означают, что один подход правильный, а дру 


Школа жизни 181 


гой нет. Просто у них разные цели. Научные программы готовят студентов 
к исследовательской работе, а инженерные – к работе в отрасли. Отрасль 
ПО остро нуждается в специалистах, хорошо подготовленных для работы 
именно в ней. Программы для получения первых степеней в инженерии 
ПО показывают свою популярность как среди студентов, так и среди ком# 
паний, которые их нанимают. 

Конструирующие программисты 
или программирующие инженеры? 

Е
Е
ще один вопрос, который требует ответа: на чем следует делать боль 
ший акцент – на применении общих инженерных подходов к разра# 
ботке ПО или на роли прикладной инженерной специфики в разработке 
программного обеспечения? 

Согласно одному из направлений, представленному программой на 
степень бакалавра в R.I.T., инженер ПО должен уметь разрабатывать ПО, 
применяя принципы и подходы, характерные для инженерных дисцип 
лин в целом, и знакомство с традиционно инженерными предметами для 
него не обязательно. В этом случае потенциальный инженер ПО будет изу 
чать университетские курсы математики, компьютерной науки, управле# 
ния и курсы по специальности ПО, но не будет проходить все предметы, 
традиционно связанные с инженерией. 

Согласно второму направлению инженер ПО – это инженер в традици 
онном понимании, получивший специальное образование в области раз# 
работки ПО. Дэвид Парнас из Университета Мак Мастера в провинции 
Онтарио (Канада) соглашается, что для получения профессионального 
мандата и уважения других инженеров инженеры ПО должны иметь такое 
же фундаментальное образование, что и другие профессиональные инже 
неры. Инженеры ПО часто занимаются авиационным ПО, контролем про# 
изводства, работают на атомных станциях и в других сферах, где знание 
инженерных основ полезно или необходимо. Студенты, получающие под# 
готовку в этих областях инженерии ПО, проходят университетские курсы 
общей химии, прикладной математики, инженерных материалов, термо# 
динамики и теплопроводности, а также курсы других дисциплин, являю 
щихся частью традиционного базового образования инженера. Дополни# 
тельно в их обучение включены курсы дисциплин, являющихся частью 
традиционного образования для получения диплома по компьютерной 
науке. 


182 
ГЛАВА 18 

В табл. 18.1 приведена сводка программ образования в Университете 
Мак Мастера и Рочестерском технологическом институте.1 

Таблица 18.1. Требования к курсам по основным дисциплинам для двух типов 
инженерии ПО 

РТИ 
(R.I.T.) 
Университет 
Мак.Мастера 
Математика и научные дисциплины 
Химия, анализ, теория матриц, комплексные числа, 
дифференциальные уравнения, дискретная математи 
ка, теория вероятности и статистика. 
Введение в инженерные дисциплины 
Структура и свойства инженерных материалов, дина 
мика и контроль физических систем, термодинамика 
и теплообмен, волны, электричество и магнитные поля. 
Компьютерная наука 
Введение в программирование, принципы цифровых 
систем, архитектура компьютеров, логическое проекти# 
рование, алгоритмы и структуры данных, программи 
рование на машинном языке, концепции языков про# 
граммирования, методы оптимизации, графические мо 
дели, алгоритмы поиска и отсечения тупиковых ветвей. 
Разработка программного обеспечения 
Архитектура и проектирование ПО, формулировка 
технических требований, навыки профессионального 
общения; проектирование ПО разделения времени 
и ПО реального времени, проектирование параллель 
ных и распределенных систем; вычислительные мето 
ды в науке и инженерии, проектирование интерфейса 
пользователя. 
Управление разработкой ПО 
Метрики процесса разработки ПО и программного 
продукта. 
Информационно.управляющие системы (MIS) 
Принципы проектирования информационных систем. 
• 
– 
• 
• 
• 
• 
• 
• 
• 
• 
– 
– 

1 

Программа обучения Университета Мак# Макстера имеется на сайте www.cas.mcF 
master.ca/cas/undergraduate. Программа института R.I.T. размещена по адресу 
www.se.rit.edu. 


Школа жизни 183 


Разница в программах Университета Мак Мастера и R.I.T. указывает 
на важные различия в философии понимания инженерии ПО. Программа 
Университета Мак Мастера считает специалистов ПО инженерами, разра# 
батывающими ПО. Программа R.I.T. рассматривает инженеров ПО как про# 
граммистов, создающих ПО на основе инженерного подхода. 

Инженеры ПО, получившие образование по программе, подобной при 
нятой в Университете Мак# Мастера, смогут сдать экзамен по основам ин 
женерии, который должны сдавать все профессиональные инженеры 
в США и Канаде, и получить в итоге лицензию профессионального инже 
нера (P.E.) в США или ее эквивалент (P.Eng.) в Канаде. Программы, подоб 
ные предлагаемой Рочестерским технологическим Институтом, не дадут 
инженерам ПО основ инженерии, необходимых для успешной сдачи экза 
мена по соответствующей дисциплине. 

Ценность каждой из программ несомненна. Более распространена в от 
расли ПО необходимость в «конструирующих программистах», которые 
создают практичные и экономичные бизнес# системы, однако уровень 
критичности некоторых систем (например, ПО ядерных электростанций 
и самолетов) в равной степени требует «программирующих инженеров». 
Некоторые эксперты считают, что есть только один настоящий тип инже 
нерии ПО, но мне представляется правильным называть оба типа про 
грамм образования «инженерия ПО», а выпускников, прошедших полный 
курс по соответствующим программам, именовать инженерами ПО. 

Дифференцированность этих подходов устанавливает различные свя# 
зи с существующими инженерными дисциплинами, лицензированием 
и сертификацией программ. Мы вернемся к этому вопросу в главе 19. 

Полировка жетона 

профессионалу, получившему базовое образование, некоторый опыт К и, возможно, лицензию, в большинстве профессий предъявляется 
требование непрерывного обучения. Конкретные требования в разных 
штатах разные. В штате Вашингтон от сертифицированных бухгалтеров 
требуется получить 80 зачетных единиц непрерывного профессиональ# 
ного образования (Continuous Professional Education, CPE) за два года, 
предшествующие продлению их квалификационных сертификатов.1 Ад 

Интернет# представительство вашингтонского общества сертифицированных 
бухгалтеров: www.wscpa.org. 


184 
ГЛАВА 18 

вокаты должны каждый год набирать 15 зачетных единиц непрерывного 
юридического образования (CLE). Врачи в штате Нью#Мексико должны 
получать 150 часов непрерывного образования каждые три года. К инже 
нерам в штате Вашингтон не предъявляется никаких требований по не# 
прерывному образованию, а в других штатах они существуют [29]. 

Непрерывное образование позволяет обеспечить актуальность знаний 
специалистов в соответствующих областях, что особенно важно, напри 
мер, для медицины или инженерии ПО, где знания постоянно обновляют# 
ся. Если специалист, получив базовое образование, прекращает учиться, 
его профессионализм со временем начинает снижаться. 

Непрерывность образования стимулируется требованием к специали# 
стам быть в курсе важных событий, новшеств в их области деятельности. 
Если в инженерии ПО когда либо сыщется новое универсальное средство 
типа «серебряной пули», то требование непрерывного образования обес 
печит знакомство с ним всех лицензированных или сертифицированных 
инженеров. 

Некоторые перспективы 

нженерии ПО всего каких то 50 лет. За это время компьютерные про Играммы изменили мир до такой степени, что нам трудно представить 
его без ПО. Как и в других инженерных дисциплинах, практика большей 
частью подстегивала теорию, и университетское образование не всегда 
за ними успевало. С другой стороны, некоторые теоретические разработки 
ставили практиков в положение догоняющих, потому что общий уровень 
образования в инженерии ПО был весьма недостаточен. Не имея универси 
тетской инфраструктуры, трудно воплощать в жизнь проверенные теории. 

Образовательные программы в области инженерии ПО, созданные 
по образу и подобию традиционных программ инженерного образования 
(создающие «программирующего инженера»), – это как раз то, что нужно. 
Они подготовят выпускников, которые принесут отрасли больше пользы, 
чем специалисты по компьютерной науке. Это позволит программам об 
разования по компьютерной науке избавиться от существующего раздвое# 
ния и больше сосредоточиться на науке. И гораздо легче будет получить 
образование в области инженерии ПО всем заинтересованным в нем, чем 
набивать шишки в школе жизни. 


ГЛАВА ДЕВЯТНАДЦАТАЯ

К

Кому нужны 
дипломы? 

Жетоны? Нет у нас никаких жетонов. Не нужны нам жетоны. 
Не должен я показывать какие1то вонючие жетоны. 

БАНДИТО ЗОЛОТАЯ КЕПКА «СОКРОВИЩА СЬЕРРА МАДРЕ» 

Не многие вопросы вызывают столь ожесточенные споры, как проблема 
сертификации и лицензирования. Но проку от этих споров намного мень 
ше, чем шума. Царит вопиющее непонимание разницы между лицензиро# 
ванием и сертификацией. Обязательна ли сертификация? Нужно ли полу 
чать лицензию? Как это затрагивает специалистов? Этим вопросам и по 
священа данная глава. 

Сертификация 

ертификация – это заявительная процедура, контролируемая про# Сфессиональным сообществом, цель которой – информировать обще# 
ство о том, что квалификация заявителя достаточна для выполнения опре# 
деленной работы (или о соответствии товара, услуги требуемым стандар 
там). Для сертификации обычно требуются и образование, и практический 
опыт. В большинстве случаев компетентность претендента на сертифика# 
цию определяется по результатам письменного экзамена. Действие серти# 
фикации, как правило, распространяется за пределы ограниченной гео 
графической зоны, захватывая национальный или международный уро 
вень. Самый известный пример сертификации в США – дипломирован 
ный бухгалтер (Certified Public Accountant, СРА). 

Некоторые организации уже много лет предлагают сертификацию спе# 
циалистов в области ПО. Институт сертификации профессионалов в облас 


186 
ГЛАВА 19 

ти использования компьютеров присваивает звания кандидата в профес 
сионалы и сертифицированного профессионала. Американское общество 
контроля качества присваивает звание инженера по качеству ПО (хотя 
употребление термина «инженер» подвергает это общество юридическим 
рискам, поскольку его применение регулируется в большинстве штатов 
США [69] и в Канаде). 

Многие компании имеют программы сертификации по собственным 
конкретным технологиям. Microsoft предлагает диплом сертифицирован 
ного специалиста Microsoft; Novell выдает диплом сертифицированного 
инженера сетей, у Oracle есть сертифицированные специалисты Oracle, 
а Apple Computers присваивает звание профессионального инженера сер 
веров Apple. Сфера такой сертификации ограничена продуктами одной 
компании, что делает ее скорее сертификацией в технологии, чем в инже# 
нерии ПО. 

Сертификация дает возможность работодателям и клиентам получить 
информацию о специалистах в сфере ПО, имеющих по крайней мере ка 
кую# то минимальную квалификацию. И рынок уже отреагировал на этот 
запрос. Во время написания этой книги на сайте Amazon.com размещалось 
25 категорий книг по различным сертификационным экзаменам в облас 
ти ПО и связанных с компьютерами дисциплин. Почти все эти экзамены 
относились к конкретным технологиям. 

В 2002 г. компьютерное общество IEEE стало проводить сертификацию 
по основам инженерии ПО на звание сертифицированного специалиста 
разработки ПО1. Это первая общая сертификация в области инженерии 
ПО, предлагаемая крупной профессиональной организацией, и это суще 
ственный шаг к признаваемой отраслью системе аттестации профессио# 
налов разработки ПО. 

Лицензирование 

ицензирование – это обязательная разрешительная юридическая Лпроцедура, призванная защитить интересы общества и обычно осу# 
ществляемая территориальными органами юрисдикции (штатов, провин 
ций и т. д.). Во многих профессиях национальные организации оказывают 
территориальным органам помощь в разработке лицензионных требова 
ний и формировании программ экзаменов. 

1 

Подробности см. на сайте www.computer.org/certification. 


Кому нужны дипломы? 

Большинство профессий лицензируется (например, врачи, архитекто 
ры, юристы и инженеры). Ни одна из профессий, столь же сильно влияю# 
щих на жизнь общества, как ПО, не осталась нелицензируемой. В табл. 19.1 
приведен перечень некоторых профессий, лицензируемых в штате Кали 
форния. 

Таблица 19.1. Примеры родов деятельности, требующих получения лицензии 

в Калифорнии [46] 

• Иглотерапевт • Продавец слуховых аппаратов 
• Оператор охранной компании • Жокей 
• Боксер#любитель • Слесарь по замкам 
• Архитектор • Мастер маникюра 
• Адвокат • Наездник на мулах 
• Парикмахер • Няня 
• Дипломированный бухгалтер • Оператор контроля за насекомыми 
• Строитель# подрядчик • Врач 
• Косметолог • Ассистент врача 
• Обивщик мебели • Частный сыщик 
• Дантист • Профессиональный инженер 
• Семейный консультант • Оценщик недвижимости 
• Похоронный распорядитель • Розничный торговец мебелью 
• Геолог • Ветеринар 
• Инструктор собак# поводырей 

В инженерной сфере США большинству специалистов не требуется по 
лучать лицензию. Инженерные фирмы должны иметь некоторое количе# 
ство лицензированных инженеров, но не все инженеры обязаны иметь ли 
цензии. Так, лицензируется половина инженеров# строителей, а среди ин 
женеров# химиков – лишь 8%. Различие заключается в степени повторяе 
мости проектируемого объекта и его влиянии на безопасность общества. 
Предметы, воспроизводимые в больших количествах, могут испытываться 
до их запуска в производство для продажи населению, что минимизирует 
риск для общества и позволяет уменьшить количество лицензированных 
инженеров, требуемых для выполнения такой работы. Инженеры #электро 
техники разрабатывают продукты, воспроизводимые в огромных коли 
чествах: тостеры, телевизоры, телефоны и т. д. Поэтому лишь небольшая 
их часть должна иметь лицензию, что видно из табл. 19.2. 


188 
ГЛАВА 19 

Таблица 19.2. Процент лицензированных выпускников инженерных 
специальностей в США в 1996 г. [46] 

Дисциплина 

Гражданское строительство 44 
Механика 23 
Электротехника 9 
Химия 8 
Все инженерные специальности 2 

Лицензировано (%) 

Инженеры по гражданским сооружениям проектируют множество 
уникальных объектов, безопасность которых критически важна: шоссе, 
мосты, стадионы, взлетно посадочные полосы и т. д. Поэтому, как показа 
но в табл. 19.2, инженеров гражданского строительства лицензировано 
значительно больше, чем инженеров#электротехников. 

В какую строку этой таблицы попала отрасль ПО? Разработчики ПО 
создают много уникальных продуктов, но также и множество продуктов 
широкого пользования: операционные системы, ПО заполнения налого 
вых деклараций, текстовые процессоры и другие программы, которые вос 
производятся в миллионах копий. Критически важные для безопасности 
общества системы также разрабатываются, но значительно больше сис 
тем, меньше влияющих на нее, создается для бизнеса. 

Перестраивая здание, строитель может самостоятельно принимать 
многие проектные решения. Если решение может повлиять на прочность 
здания, то для оценки такого решения строителю требуется помощь инже 
нера. В отрасли ПО даже приложения, требующие инженерного подхода, 
могут большей частью создаваться «строителями» – нелицензированными 
инженерами ПО и специалистами по технологиям. Поэтому большинство 
приложений ПО не обеспечено инженерией вовсе, а там, где требуется ка 
кая то часть инженерии, приложения могут создаваться персоналом, лишь 
малая доля которого является лицензированными инженерами ПО. 

Когда ситуация стабилизируется, по моим подсчетам, менее чем 5% 
практикующих сегодня программистов в конечном итоге потребуется по 
лучить лицензию инженера ПО, и эта доля может легко приблизиться к од 
ному проценту.1 

1 

Форд и Гиббс делают аналогичное замечание – по их оценкам, менее 10% разра# 
ботчиков ПО захотят получить лицензии [46]. 


Кому нужны дипломы? 

Возможно ли лицензирование инженеров ПО 

Н
Н
екоторые эксперты компьютерной науки утверждают, что лицензи# 
рование будет неэффективным или даже контрпродуктивным [38], 
[70], [71], [82], [141]. Эти заявления делаются слишком часто, чтобы оста 
вить их без рассмотрения. 

Суть некоторых из них сводится к тому, что лицензирование в инжене 
рии ПО невозможно или практически неразумно, а других – к тому, что 
идея лицензирования плоха сама по себе. 

Вот краткий перечень аргументов в пользу непрактичности или невоз 
можности лицензирования в ПО: 

• Для инженерии ПО не определен общепринятый объем знаний [71]. 
• Знания в инженерии ПО меняются так быстро, что экзаменацион 
ные материалы устареют к моменту экзамена [71], [82]. 
• Трудно втиснуть сколько#нибудь осмысленный тест по инженерии 
ПО в формат выбора ответа из нескольких вариантов. Фактически 
никакая методика, основанная на экзаменах, не сможет адекватно 
удостоверить компетентность инженера ПО [71]. 
• Спектр поддисциплин, вовлекаемых в разработку ПО, настолько 
широк, что попытки лицензировать их все не имеют практического 
смысла [71], [82]. 
• Экзамен по основам инженерии для лицензирования работающих 
инженеров не годится для тех, кто получил образование по специ 
альности «компьютерная наука» [71], [141]. 
Рассмотрим каждый из этих аргументов. 

Для инженерии ПО не определен общепринятый объем знаний. 

Если лет тридцать назад это утверждение, возможно, и было похоже 
на правду, то сегодня оно неверно. Как говорилось в главе 5, предметный 
объем знаний инженерии ПО хорошо определен и достаточно стабилен. 

Знания в инженерии ПО меняются так быстро, что экзаменационные 
материалы устареют к моменту экзамена. 

Это утверждение также основано на устаревшем понимании предмет# 
ной области знаний инженерии ПО, описанной в главе 5. 

Знания в некоторых других сферах (особенно в медицине) меняются, 
по крайней мере, так же быстро, как и в ПО. Если возможно лицензировать 
врачей, можно лицензировать и инженеров ПО. 


190 
ГЛАВА 19 

Трудно втиснуть сколькоFнибудь осмысленный тест по инженерии 
ПО в формат выбора ответа из нескольких вариантов. Фактически ниF 
какая методика, основанная на экзаменах, не сможет адекватно удоF 
стоверить компетентность инженера ПО. 

Формирование экзамена профессионального уровня действительно 
серьезная проблема. Однако наука и методика разработки экзаменов 
на профессиональную пригодность достаточно хорошо развиты. На экза 
менах основано лицензирование во многих профессиях: от медицины 
и права до теории страхования и других дисциплин. Разработка экзамена 
требует много времени, сил, а также привлечения настоящих знатоков 
своего дела. Разработка экзамена для сертифицированного специалиста 
по разработке ПО, как я испытал на собственном опыте,1 – это серьезная 
задача, но не более, чем в любой другой профессии. 

Спектр поддисциплин, вовлекаемых в разработку ПО, настолько шиF 
рок, что попытки лицензировать их все не имеют практического смысла. 

Разнообразие стилей разработки ПО действительно представляет со# 
бой серьезную трудность для лицензирования инженеров ПО. К счастью, 
дело упрощается, поскольку, как и в других дисциплинах, большинству ин 
женеров нет нужды получать лицензию. Лицензировать надо лишь тех, кто 
разрабатывает ПО, представляющее риск для здоровья или благосостоя# 
ния населения. 

Вопрос о «широте поддисциплин» не уникален. Врачи сдают отдельные 
экзамены по кардиологии, радиологии, онкологии и другим специально 
стям. Инженеры сдают специализированные экзамены по гражданскому 
строительству, электротехнике, химии и т. д. Если в других сферах это пре# 
пятствие смогли преодолеть, то оно будет преодолено и в ПО. 

Взвесив все эти соображения, я считаю, этот аргумент скорее говорит 
не против лицензирования, а в пользу реалистичных ожиданий результа 
тов, которых можно достичь лицензированием. В других инженерных 
дисциплинах действует кодекс поведения, согласно которому специали 
сты не должны практиковать вне сферы своей компетенции. Инженерия 
ПО нуждается в аналогичном стандарте. 

Экзамен по основам инженерии для лицензирования работающих инF 
женеров не годится для тех, кто получил образование по специальности 
«компьютерная наука». 

1 

См. www.computer.org/certification. 


Кому нужны дипломы? 

Экзамен по инженерным основам сегодня сосредоточен на основных 
положениях инженерии, включая структуру и свойства инженерных мате# 
риалов, динамику и управление физическими системами, термодинамику 
и теплопроводность, магнетизм и т. д. Как говорилось в главе 17, некото 
рые формирующиеся учебные программы инженерии ПО действительно 
требуют от студентов изучения этих традиционных инженерных предме 
тов. Другие программы больше сконцентрированы на ПО и меньше на тра# 
диционных дисциплинах, поэтому студенты, выпущенные по таким про 
граммам, не подготовлены для экзамена по инженерным основам. 

Не вызывает сомнений, что предстоит выполнить огромную работу, 
прежде чем лицензирование в инженерии ПО станет реальностью. Но сей# 
час эта работа во многом выполнена, поскольку она проводится уже не# 
сколько лет. С моей точки зрения, все споры о практической пользе лицен# 
зирования имеют лишь косвенное значение; суть вопроса в том, правиль 
на ли сама идея лицензирования. 

Правильна ли сама идея лицензирования? 

от список аргументов в пользу того, что лицензирование – это плохая Видея: 

• Лицензии искусственно сократят количество работников, которые 
могли бы заниматься инженерией ПО, когда спрос на инженеров 
ПО растет [70]. 
• Инженер получает бессрочную лицензию, что неразумно в условиях 
быстро меняющегося объема знаний инженерии ПО [82]. 
• Лицензирование не сможет гарантировать компетентность каждого 
обладателя лицензии. Лицензирование даст обществу ложное ощу 
щение защищенности [71]. 
Разберем теперь каждый из этих аргументов. 

Лицензии искусственно сократят количество работников, которые 
могли бы заниматься инженерией ПО, когда спрос на инженеров ПО 
растет. 

Это утверждение основано на предположении, что после внедрения 
лицензирования лишь имеющие лицензию инженеры ПО смогут его соз# 
давать. Как уже отмечалось в данной главе, в других сферах лицензирова 
ние работает не так, не по этому правилу оно будет работать и в ПО. Боль 
шинство работников, пишущих программы, будут специалистами по тех 


192 
ГЛАВА 19 

нологиям или нелицензированными инженерами ПО, а не профессио# 
нальными инженерами. Большинство типов ПО не несет в себе риска 
и может быть написано непрофессиональными инженерами ПО. 

Лишь немногим инженерам ПО, создающим определенные типы сис 
тем ПО, критически важных для безопасности людей, вообще потребуется 
иметь лицензию. 

Инженер получает бессрочную лицензию, что неразумно в условиях 
быстро меняющегося объема знаний инженерии ПО. 

Это утверждение основано на неправильном понимании двух аспектов 
лицензирования в инженерии ПО: во первых, быстроты изменений пред 
метной области знаний (глава 5) и, во вторых, предположения, что лицен 
зия выдается бессрочно. Одно из условий лицензирования вообще состо 
ит в непрерывности профессионального образования, дающего возмож 
ность оставаться в курсе всех изменений (в том числе и чтобы сохранить 
лицензию). Лицензирование стимулирует актуальность знаний профес 
сионалов. 

Лицензирование не сможет гарантировать компетентность каждоF 
го обладателя лицензии. Лицензирование даст обществу ложное ощущеF 
ние защищенности. 

Утверждение о том, что кто# то из неквалифицированных претендентов 
может заполучить лицензию, тогда как в ней будет отказано более квалифи# 
цированным, отчасти справедливо. Лицензирование действует как фильтр, 
отсеивающий худшее и повышающий уровень квалификации работников, 
однако этот механизм не абсолютно безупречен. На рис. 19.1 показан кон 
тингент работающих в отсутствие лицензирования. 

Без профессионального лицензирования дорога будет открыта не толь 
ко надежным методикам разработки ПО, но и негодным, и даже потенци# 
ально опасным. Чтобы защитить интересы общества, механизм лицензи# 
рования должен работать как фильтр, отсеивая худших и выдавая лицен 
зии только лучшим разработчикам ПО (рис. 19.2). 

Будет правильно предположить, что лицензирование не станет идеаль 
ным фильтром. Все мы слышали про хороших и плохих врачей, адвокатов 
и представителей других профессий. Даже в сочетании с университетским 
дипломом, экзаменами и практическим опытом лицензирование в ПО не 
будет лучше, чем в существующих профессиях. Поначалу оно скорее будет 
даже хуже, потому что в других профессиях экзамены и другие требования 
лицензирования корректировались и уточнялись. Как показано на рис. 19.3, 


Кому нужны дипломы? 193 
даже лучшие современные подходы к лицензированию в ПО могут оставить 
лазейку для неквалифицированных работников, позволяя им проникать 
в отрасль, и отсечь тех, кому действительно надо было выдать лицензию. 
Идеальное лицензирование, наверное, недостижимо, но лицензирова# 
ние реальное все же имеет свою ценность. Большинство работодателей 
Разработчики ПО 
Лучше 
Хуже 
Рис.19.1. Контингент всех разработчиков ПО до применения лицензионного 
фильтра 
Разработчики ПО 
Лучше 
Хуже 
Рис. 19.2. Контингент разработчиков ПО после применения лицензионного 
фильтра (идеальная фильтрация)

194 
ГЛАВА 19 

Разработчики ПО 
Лучше 
Хуже 
Рис. 19.3. Контингент разработчиков ПО после применения лицензионного 
фильтра (реальная фильтрация) 

в индустрии ПО скорее выберут себе работников из контингента на 
рис. 19.3, и не прельстятся вариантом, показанным на рис. 19.1. Большин 
ство населения предпочтет, чтобы критически важное для безопасности 
ПО разрабатывалось и проверялось специалистами из контингента на 
рис. 19.3. Гарантии хороши тогда, когда они есть. Когда их нет, то лучше 
большая уверенность, чем меньшая. 

Раскрутка лицензирования 

Д 
Д 
вижение за лицензирование разработчиков ПО по #настоящему нача 
лось в 1998 г., когда Совет профессиональных инженеров Техаса при 
нял инженерию ПО как отдельно лицензируемую дисциплину с присвое# 
нием звания профессионального инженера (или P.E.) специалистам в об 
ласти ПО.1 

Вместо общеиспользуемого экзамена в Техасе начали лицензировать 
инженеров#разработчиков ПО согласно «правилу допуска к экзамену». 
Чтобы получить лицензию P.E., прежде чем приступить к экзамену, претен 
дент должен был предъявить: 

• 16 лет практического инженерного опыта или 
1 

www.tbpe.state.tx.us. 


Кому нужны дипломы? 

• 12 лет инженерной практики и диплом бакалавра по аттестованной 
университетской программе. 
• Помимо этого каждый претендент должен был представить по край 
ней мере 9 рекомендаций, не менее пяти из которых должны были 
дать лицензированные инженеры (необязательно в области разра 
ботки ПО). 
Те же самые критерии допуска к экзамену применяются в Техасе и к дру# 
гим инженерным специальностям. 

Сколько практикующих разработчиков ПО смогли получить лицензию 
профессионального инженера ПО согласно установленной процедуре ли 
цензирования? Около 50 было лицензировано в середине 2003 г., что не 
слишком много; и это одна из самых разумных вещей, сделанных в Техасе. 
Естественным было бы желание ослабить строгость отбора на начальном 
этапе лицензирования, чтобы большинство действующих инженеров ав 
томатически подпадали под требования. Итогом этого стала бы девальва# 
ция звания «профессиональный инженер ПО» до уровня, соответствующе# 
го обычному (начинающему) программисту. Ужесточив правила, в Техасе 
максимально увеличили вероятность того, что инженеры ПО в штате бу 
дут принадлежать к когорте лучших разработчиков ПО, и защитили их ре# 
путацию. 

Аналогичные события имели место и в Канаде. Провинции Британская 
Колумбия и Онтарио начали выдавать лицензии профессиональной ин 
женерии ПО в 1999 г., и в Онтарио лицензии получили около 300 профес 
сионалов [109]. Как и в Техасе, программы лицензирования в обеих про# 
винциях предусматривали дополнительные условия, действующие на на 
чальном этапе, позволяющие разработчикам ПО, имеющим соответствую 
щее образование и практический опыт, получить лицензии инженеров 
ПО, пока подготавливались экзамены.1 

Ваша ставка 

дно из следствий обладания лицензией профессионального инжене Ора состоит в личной ответственности за работы, выполняемые для 

То есть во всех описываемых случаях действует принцип: для получения лицен# 
зии надо успешно пройти некоторую систему тестов, но для допуска к процеду# 
ре прохождения требуется предварительно предоставить свидетельства своего 
практического опыта и профессионализма. – Примеч. науч. ред. 


196 
ГЛАВА 19 

компании, то есть за авторство. Суды в США постановили, что только чле# 
ны профессиональных сообществ могут признаваться виновными в пре# 
ступной халатности [69]. Врачи, адвокаты и архитекторы1 могут быть при# 
знаны виновными. Водители мусоросборщиков, повара и компьютерные 
программисты не могут, потому что юридически не считаются профес 
сионалами. Закрепив за инженерией ПО статус профессии, мы откроем 
дорогу для судебного преследования инженеров ПО, обвиняемых в пре# 
ступной халатности так же, как других профессионалов. 

Отдельный инженер не обязан получать лицензию, но от некоторых 
компаний потребуется иметь в штате лицензированных инженеров. Веро 
ятнее всего, что это будут компании: 

• поставляющие услуги инженерии ПО населению; 
• выполняющие работы ПО для государственных агентств; 
• производящие ПО, критически важное для безопасности людей. 
Другие компании могут по собственному желанию привлекать профес 
сиональных инженеров, чтобы воспользоваться преимуществом «блестя# 
щей упаковки», которое обеспечивается репутацией лучших специалистов 
отрасли, или потому что видят в этом средство укрепления своего инже# 
нерного персонала. Наличие в штате разработчиков ПО, которые получи# 
ли сертификаты, но не профессиональный статус в инженерии, может 
служить интересам компаний столь же хорошо. 

Профессиональные инженеры в таких компаниях будут производить 
ревизию разработки и ставить «знак качества» на выпускаемое ПО. При# 
влечение лицензированных инженеров станет жизненно необходимым 
для компаний. Как и в других инженерных отраслях, компания, нанимаю# 
щая профессионального инженера, оплачивает страховку его личной от 
ветственности, что сводит к минимуму издержки процесса получения тре# 
буемой лицензии. 

Профессиональные инженеры получат другие преимущества. Те из них, 
кто ставит свою подпись и репутацию под угрозу риска ради своей компа# 
нии, получат от нее в конечном итоге право выбора методик, подходов 
к проектированию и решений, влияющих на качество ПО, за которые им 
придется отвечать. Не имея статуса профессионала, инженеру ПО трудно 
будет противостоять руководству, которое может настоять на принятии не 
реальных обязательств по срокам, потребовать закрыть глаза на изъяны 
проекта или пожертвовать качеством ради скорейшего выпуска ПО. Если 

1 

Лицензированные. – Примеч. науч. ред. 


Кому нужны дипломы? 

профессия сформируется со всеми своими атрибутами – образованием, 
кодексом профессиональной этики и лицензированием, то появится воз# 
можность сказать: «Стандарты профессии не позволяют в данной ситуа# 
ции пренебречь качеством. Можно потерять лицензию или быть привле# 
ченным к судебной ответственности». Создаются юридическая и профес 
сиональная основа для сопротивления недальновидным менеджерам, мар# 
кетологам и клиентам, которая начисто отсутствует сегодня. 

На организационном уровне можно будет наблюдать взаимную корре# 
ляцию между рейтингом (компании) по SW #CMM (который обсуждается 
в главе 14) и лицензированием инженерии ПО. Профессиональные инже 
неры потенциально могут быть привлечены к судебной ответственности 
за ПО, написанное под их руководством. Они не могут лично проверить 
каждую строку программы в больших проектах. Даже если организации 
оплачивают полис страхования личной ответственности профессиональ# 
ных инженеров, я думаю, что профессиональные инженеры предпочтут 
работать в тех организациях, где им будет обеспечена техническая и мето 
дическая поддержка, то есть где имеется наиболее развитая организацион 
ная инфраструктура разработки ПО. Профессиональные инженеры скорее 
всего сосредоточатся в организациях с высшими рейтингами по SW CMM. 
Это укрепит тенденцию, подмеченную Харланом Миллсом 20 лет назад: 
разработчики выше среднего уровня собираются в эффективных органи 
зациях, разработчики уровня ниже среднего – в неэффективных [91]. 

Как заслужить диплом 

лючевым элементом любого зрелого плана лицензирования является К экзамен на профессиональную пригодность, проводимый уполномо 
ченным органом; однако его форма для инженера ПО пока не определена. 
В других инженерных областях специалисты обычно сдают восьмичасо 
вой экзамен, включающий решение восьми задач, четыре из которых тре# 
буют ответа в описательной форме, а в четырех надо выбрать правильный 
ответ из примерно десяти вариантов. Конкретные особенности могут ме# 
няться в различных территориальных образованиях. 

Сами по себе экзамены не дают стопроцентной гарантии, поэтому ус 
пешная сдача экзамена инженера ПО недостаточна для получения лицен# 
зии. Лицензия профессионального инженера традиционно требует как 
опыта работы, так и диплома со степенью аттестованного учебного заве# 
дения для инженеров. В инженерии ПО степень проблематична, посколь 


198 
ГЛАВА 19 

ку ни одна из программ обучения инженерии ПО, предлагаемых пример# 
но десятью университетами, не аттестована в США, а в Канаде аттестованы 
три программы [109]. Аттестация первой программы обучения в США ожи# 
дается в 2003 г. сразу после выхода из печати этой книги. Можно ожидать 
наступления переходного периода (примерно от 10 до 15 лет) в лицензи 
ровании, когда степень не будет обязательным требованием, пока не сфор 
мируется инфраструктура университетов, обеспечивающая выпуск доста 
точного количества инженеров ПО. 

Три пути 

ак уже говорилось в главе 18, сообщество разработчиков ПО пока К не пришло к единому мнению о том, кем считать специалиста ПО – 
инженером, разрабатывающим ПО, или программистом, который создает 
ПО, применяя инженерные подходы. Различие между этими двумя направ 
лениями в понимании инженерии ПО заставляет предположить, что ли# 
цензирование в конечном итоге будет развиваться по одному из трех путей. 

Первый путь подразумевает разработку специального экзамена по ПО 
в рамках традиционного лицензирования инженерии. Инженеры, сдавшие 
экзамен по основам инженерии и обладающие требуемым практическим 
опытом, могут получить лицензию P.E./P.Eng. в ПО, сдав экзамен по специ# 
альности «программное обеспечение». Этот путь потребует от инженеров 
ПО получения образования по программам типа существующей в Универ 
ситете Мак# Мастера и описанной в главе 18. 

Второй путь тоже предполагает разработку экзамена по специальности 
ПО, но требует еще и модификации экзаменов по основам инженерии, ко# 
торые сдают все инженеры (конкретное содержание экзаменов меняется 
в зависимости от территориальной юрисдикции). Сегодня большинство 
инженеров активно пользуются компьютерами, а многие и создают про 
граммы для себя или для своих коллег. Эти программы применяются для 
формирования данных, необходимых при проектировании мостов, зда 
ний, нефтеперерабатывающих заводов и многих сооружений, которые 
потенциально воздействуют на общественное благосостояние. Инженеры, 
пишущие такие программы, должны знать эффективные методики инже 
нерии ПО. Возможно, потребуется просто пересмотреть содержание экза 
менов по основам инженерии, увеличив в них долю вопросов по инжене 
рии ПО. Экзамены охватывают довольно широкий круг проблем, и для их 
сдачи, как правило, достаточно набрать около 70% возможных баллов, 


Кому нужны дипломы? 

хотя высота барьера зависит от территориальной юрисдикции. Инжене 
ры, прошедшие подготовку по другим дисциплинам, дадут больше невер 
ных ответов на вопросы по инженерии ПО, но правильно ответят на боль 
шее количество вопросов по традиционной инженерии. Инженеры ПО 
правильно ответят на большее число вопросов по ПО, но дадут больше не# 
верных ответов на традиционные вопросы по инженерии. Этот путь вы# 
брали бы инженеры, прошедшие подготовку по программе типа предлага# 
емой в R.I.T., которая тоже описана в главе 18. 

Третий путь предполагает создание профессионального статуса, кото 
рый более тесно увязан с ПО, чем статус профессионального инженера, 
например «профессиональный инженер ПО – P.S.E.» или что#нибудь в этом 
роде. Получение этого звания было бы ориентировано исключительно на 
ПО и не требовало бы образования в сфере термодинамики или теплопро 
водности, знания материаловедения или других предметов традиционной 
инженерии. Один из аргументов в пользу такого подхода состоит в том, 
что специалистам, проектирующим бизнес системы, финансовые прило# 
жения, образовательные программы и другое ПО, не используемое в инже# 
нерных целях, не нужно знание традиционных инженерных дисциплин, 
но полезно владеть инженерным подходом к созданию ПО. 

Из этих трех возможных путей я считаю наилучшим второй. Инженеры 
ПО должны изучить достаточный спектр чисто инженерных предметов, 
чтобы понять образ мысли инженеров в традиционных отраслях при про# 
ектировании и решении задач, а третий путь этого вообще не требует. 
Но инженерам не надо изучать все инженерные дисциплины, чтобы по 
стичь инженерный склад ума, как этого требует первый путь. Более того, 
в таком случае совсем мало инженеров ПО вообще получат лицензии, 
а программа обучения инженерии ПО должна учитывать реалии: боль 
шинству дипломированных инженеров ПО не надо готовиться к экзамену 
по основам инженерии. Тех же инженеров ПО, которые решат получить 
лицензию, второй путь подготовил бы к сдаче пересмотренного экзамена 
по основам инженерии, не разбавляя сверх меры специфическую для ин 
женерии ПО сумму знаний. 

Будет ли полезным пересмотр экзамена по основам инженерии для 
других инженерных отраслей? Думается, да. Изменение экзаменов по ос 
новам инженерии не снизит статус инженеров, которые в итоге получат 
лицензии. Они по прежнему должны будут сдавать экзамены по избран 
ной инженерной специальности по окончании своего практического обу# 
чения: по гражданскому строительству, аэрокосмической, химической ин 


200 
ГЛАВА 19 

женерии и т. д. Этический кодекс запрещает им практиковать в других ин 
женерных отраслях, где они не являются специалистами. Помимо этого 
ПО настолько глубоко проникло в современную инженерию, что знаком# 
ство всех инженеров с инженерией ПО может стать существенным пре# 
имуществом: это позволит им понимать проблемы, связанные с созданием 
сложных систем ПО, и осознавать, когда необходимо прибегнуть к экс 
пертной помощи в проектах, выходящих за пределы их образования 
иобучения. 

Вонючие дипломы или стальное колечко? 

Канаде инженеры, получающие дипломы по окончании обучения по Ваттестованным инженерным программам, при выпуске получают 
стальное кольцо. С 1923 г. это кольцо вручается на закрытой церемонии, 
которую разработал Редьярд Киплинг. Традиция гласит, что эти колечки 
делаются из стали моста, который рухнул, и инженеры носят их на рабо 
чей руке как напоминание о своей ответственности перед обществом. 
Были попытки пересадить эту традицию на американскую почву, но пока 
без особого успеха. 

Стальное кольцо важно, потому что, не обозначая полного профессио# 
нального звания, оно реально символизирует принадлежность к инжене 
рии как профессиональному цеху. Сертификация может сыграть похожую 
роль в ПО, символизируя приверженность к высшим стандартам инжене 
рии ПО. 

Если вы подумаете: «Не нужны нам никакие дипломы или стальные 
кольца», то будете, наверное, правы. Большинство инженеров ПО не станут 
получать профессиональные лицензии инженеров – свои дипломы – даже 
после широкого распространения лицензирования. Скорее всего, боль 
шинство не станет и сертифицироваться. Но по мере «взросления» инже# 
нерии ПО лицензированию и сертификации будет придаваться все более 
важное значение. Инженер ПО, который хочет продемонстрировать свою 
приверженность профессии ПО, будет иметь возможность получить ли 
цензию или сертификат, или же и то и другое. 


ГЛАВА ДВАДЦАТАЯ

К

Кодекс 
профессионала 

В каждом из нас есть что1то от Питера Пена, но по мере 
взросления растет желание сделать что1нибудь на благо 
общества. Повторю, что реализация этого стремления 
дает инженеру главное ощущение удовлетворения жизнью. 

СЭМЮЭЛЬ С. ФЛОРМАН 

Одним из признаков зрелой профессии является наличие кодекса этики 
или стандартов профессионального поведения. С юридической точки зре# 
ния от профессионалов требуются более высокие стандарты их работы, 
чем от непрофессионалов, занятых в той же отрасли. Если знакомый сан# 
техник посоветует вам принять таблетку от боли в желудке, а у вас окажет# 
ся аппендицит, то ничего неэтичного сантехник не совершит. Но если 
этот же совет вы получите от врача, не осмотревшего вас, то его поведение 
будет неэтичным. 

Кодекс этики устанавливает стандарты поведения в каждой профес# 
сии.1 Дипломированные бухгалтеры должны сдавать трехчасовой экзамен 
по кодексу этики в своей сфере деятельности. Адвокаты должны сдавать 

Например, «Кодекс этики и профессионального поведения» Американского Ин 
ститута Архитекторов на сайте www.aiaonline.com; «Кодекс профессионального 
поведения» Американского Института Дипломированных Бухгалтеров на сайте 
www.aicpa.org; «Кодекс этики инженеров» Национального Общества Профес 
сиональных Инженеров на сайте www.nspe.org; «Кодекс этики инженеров» Аме 
риканского Общества Инженеров Механиков на сайте www.asme.org; а также 
«Кодекс этики» Института Инженеров Электроники и Электротехники на сайте 
www.ieee.org. Действующие ссылки на все эти кодексы этики имеются на сайте 
моей компании www.construx.com/profession. 


202 
ГЛАВА 20 

экзамен по этике продолжительностью полдня. В сформировавшихся про# 
фессиях можно лишиться профессионального статуса или лицензии в слу# 
чае серьезных нарушений кодекса этики. 

Кодекс для кодировщиков 

Р
Р
азработка ПО продолжается уже много лет, обходясь без общепри 
знанного кодекса этики. В конце 90 х годов XX века совместный коми# 
тет организаций АСМ и компьютерного общества IEEE начал разработку 
кодекса этики в инженерии ПО. Кодекс претерпел несколько редакций 
и рассматривался практикующими разработчиками ПО во всем мире. 
В 1998 г. Кодекс этики и профессиональной практики был принят как ас 
социацией АСМ, так и компьютерным обществом IEEE. Он воспроизведен 
ниже на рис. 20.1. Более детальный вариант кодекса имеется на сайте ком 
пьютерного общества www.computer.org. 

В преамбуле кодекса сформулированы его цели, а далее в 8 пунктах из# 
ложены принципы. 

Первая основополагающая цель – «инженеры ПО должны служить то# 
му, чтобы анализ, спецификация, проектирование, разработка, тестирова 
ние и обслуживание ПО стали выгодной и уважаемой профессией». Други# 
ми словами, одна из задач кодекса – способствовать развитию самой про# 

Кодекс этики и профессиональной практики инженерии ПО 

Инженеры ПО должны служить тому, чтобы анализ, спецификация, проектирование, разработка, тестирова 
ние и обслуживание ПО стали выгодной и уважаемой профессией. Верные целям здоровья, безопасности 
и блага общества, инженеры ПО соблюдают следующие восемь принципов: 

1. Общество. Инженеры ПО должны действовать в соответствии с интересами общества. 
2. Клиент и работодатель. Инженеры ПО должны действовать в интересах своего клиента и работодателя 
согласно интересам общества. 
3. Продукт. Инженеры ПО должны обеспечить соответствие своих программных продуктов и их последую 
щих модификаций наивысшим профессиональным стандартам. 
4. Решения. Инженеры ПО должны сохранять непредвзятость и независимость в своих профессиональных 
суждениях. 
5. Управление. Менеджеры и руководители инженеров ПО должны придерживаться и содействовать про 
движению этического подхода к управлению разработками и обслуживанием ПО. 
6. Профессия. Инженеры ПО должны поддерживать мораль и репутацию профессии в соответствии с инте 
ресами общества. 
7. Коллеги. Инженеры ПО должны быть справедливыми и поддерживать своих коллег. 
8. Инженеры ПО. Сами инженеры ПО должны постоянно осваивать свою профессию и способствовать эти 
ческому подходу в практической профессиональной деятельности. 
Рис. 20.1. Кодекс этики и профессиональной практики инженерии ПО. 
Принят ассоциацией ACM и компьютерным обществом IEEE. Является 
руководством по этике и профессиональному поведению для инженеров ПО 

© 1998 г. Исполнительный комитет SEPPP. Печатается с разрешения. 


Кодекс профессионала 

фессии инженера ПО. Формулировка этой цели неявно предполагает, что 
инженерия ПО еще не стала «выгодной и уважаемой профессией». По мере 
ее становления как зрелой профессии формулировка может измениться, 
и вместо «стали» появится, например, «чтобы анализ… были символом вы 
годной и уважаемой профессии». 

Вторая основополагающая цель состоит в том, что инженеры ПО долж 
ны быть «верными целям здоровья, безопасности и блага общества». Это 
вполне соответствует представлению о том, что инженеры несут скорее 
ответственность перед обществом в целом, чем перед отдельными его 
представителями. Кодексы поведения других инженеров аналогичным об 
разом подчеркивают важность защиты благосостояния общества.1 Две 
этих цели являются основными, а восемь принципов направлены на их 
реализацию. Рассмотрим их подробнее. 

1. Общество. Инженеры ПО должны нести полную ответственность 
за свою работу и утверждать ПО к выпуску только в том случае, если 
они твердо уверены в его безопасности и соответствии техническим 
условиям, если ПО прошло соответствующее тестирование и 
в конечном итоге будет служить на благо общества. Специалисты ПО 
должны информировать о любой существующей или потенциаль# 
ной опасности для отдельных лиц, общества или окружающей среды. 
2. Клиент и работодатель. Результаты деятельности инженеров ПО 
непосредственно затрагивают клиентов и работодателей, поэтому 
разработчики ПО должны защищать их интересы, исключая ситуа 
ции, когда эти интересы вступают в конфликт с интересами всего 
общества. Инженеры обязаны действовать только в рамках своей 
профессиональной квалификации, хранить конфиденциальную 
информацию, в своей работе не выходить за пределы области своих 
знаний и не способствовать интересам, наносящим ущерб их заказ# 
чикам или работодателям. Они не должны использовать ПО, полу 
ченное незаконным или неэтичным образом. Если инженеры счита 
ют, что проект может закончиться неудачей, они должны аргумен 
тировать клиенту или работодателю свое мнение. 
3. Продукт. В своей работе инженеры ПО должны стремиться к высо 
кому качеству, низкой стоимости и разумным срокам исполнения 
заказа. Они должны показать своим работодателям и заказчикам 
Например, «Кодекс этики инженеров» Национального Общества Профессио 
нальных Инженеров на сайте www.nspe.org. 


204 
ГЛАВА 20 

возможность компромиссов для достижения баланса между этими 
тремя показателями. Необходимо дать оценку неопределенности 
в заложенных показателях качества, смете расходов и сроках испол 
нения. Инженеры ПО при этом должны следовать соответствующим 
профессиональным стандартам. Они должны обеспечить надлежа 
щие экспертизу и тестирование ПО перед выпуском в обращение. 

4. Решения. У настоящих специалистов есть и право, и обязанность, 
принимая решения, сохранять приверженность высшим профес 
сиональным стандартам, даже когда это противоречит их собствен 
ным интересам или интересам их клиентов или работодателей. 
Утверждать к использованию можно только те продукты, которые 
адекватно проанализированы и с принципами которых инженеры 
ПО объективно согласны. Они не будут замешаны в незаконной или 
бесчестной деятельности: взяточничестве, двойном выставлении 
счетов или заключении двойных контрактов при наличии конфлик# 
та интересов, остающегося нераскрытым полностью. 
5. Управление. Менеджеры в инженерии ПО должны соблюдать те же 
профессиональные стандарты, что и другие специалисты ПО, вклю# 
чая положения кодекса этики. Менеджеры должны честно и справед# 
ливо относиться к своим сотрудникам. Они должны давать задания 
инженерам, способным их квалифицированно выполнить, при этом 
содействуя повышению образования и расширению опыта каждого 
сотрудника. Они обязаны обеспечить реалистичные количествен 
ные оценки расходов, сроков, кадрового обеспечения, качества и 
других показателей проектов. 
6. Профессия. Специалисты ПО должны способствовать развитию 
инженерии ПО как профессии, расширять ее общественное призна 
ние. Они должны создавать атмосферу следования кодексу и отказы# 
ваться от работы в организациях, нарушающих его. Также инженеры 
должны сообщать о серьезных нарушениях кодекса коллегам, ме 
неджерам или в компетентные организации. 
7. Коллеги. Инженеры ПО должны помогать своим коллегам следо 
вать кодексу этики. Они должны относиться к ним честно и справед 
ливо, помогать в профессиональном развитии. В ситуациях, выходя 
щих за пределы их компетентности, они должны привлекать других 
профессионалов, обладающих требуемой квалификацией. 
8. Сами инженеры ПО. Специалисты ПО должны рассматривать са 
мообразование как приоритет в своей деятельности. Они должны 

Кодекс профессионала 

поддерживать актуальный уровень осведомленности о достижениях 
в формулировке технических условий, проектировании, написании, 
обслуживании, тестировании и управлении ПО. Они должны знать 
действующие стандарты и законодательство, относящиеся к их сфе# 
ре деятельности. 

Преимущества этического кодекса поведения 

тический кодекс обеспечивает широкую поддержку профессиональ# Эной инженерии ПО. Он дает работодателям и заказчикам уверенность 
в профессиональных стандартах и личности инженеров, которые его со 
блюдают. 

Кодекс обеспечивает организациям возможность выразить свою под# 
держку инженерии ПО. Если компания готова соблюдать кодекс, то обяза 
на обеспечить рабочую среду, в которой этика поведения является при# 
оритетом и инженеры ПО могут следовать ей, не подвергая риску свою 
карьеру. Это выгодно как самой компании, так и инженерам ПО, которые 
в ней работают: компания привлекает инженеров с высокими профессио# 
нальными стандартами, а они получают возможность реализации в обста# 
новке, где подобные стандарты должным образом оцениваются. 

Одним из самых больших преимуществ кодекса является общее на 
правление, которое он задает в смысле этического и профессионального 
поведения инженеров ПО, что до сих пор отсутствовало начисто. Рассмот# 
рим несколько ситуаций: 

• Проекты, ведущие в тупик. Не имея этического кодекса, инженеры 
ПО, считающие, что сроки реализации проекта нереальны, испыты 
вают сомнения, прежде чем сообщать об этом заказчику или своему 
руководителю. Опираясь на кодекс, в подобной ситуации инженеры 
обязаны собрать доказательства и документально подтвердить свои 
опасения. Кодекс гласит, что профессиональным долгом является 
незамедлительное сообщение руководству или заказчику о своих 
опасениях. 
• Занижение стоимости разработки с целью получения контракта 
любой ценой. В отрасли ПО распространена практика коммерче 
ских предложений заказчикам с нереалистично низкими расценка 
ми. Разработчикам ПО, возможно, не слишком нравится такое пове# 
дение, но многие не готовы пойти наперекор своим боссам и отка 
заться занизить стоимость разработки в заявке. Согласно кодексу 

206 
ГЛАВА 20 

инженеры ПО должны обеспечить реалистичность смет расходов 
и одобрять документы, только если они с ними согласны. Кодекс 
также призывает инженеров ПО сделать свою профессию достой 
ной уважения, например не участвовать в сделках с заниженной 
стоимостью. Соблюдающий этические принципы инженер ПО дол# 
жен отказаться утверждать такие коммерческие предложения. 

• Разработка ПО по принципу «напишем и исправим». Недостаточно 
информированные заказчики и руководители часто настаивают 
на применении разработчиками подхода «напишем и исправим». 
Последние сознают неэффективность этого подхода, но после спо 
ров с заказчиками и руководством многие капитулируют: «Пусть 
эта контора пожнет то, что заслужила». Однако следование данному 
принципу противоречит этическому долгу инженера ПО создавать 
высококачественные продукты по приемлемым ценам и в разумные 
сроки. Продолжающееся использование названного метода также 
компрометирует инженерию ПО как профессию, поэтому следую# 
щие этическим принципам разработчики ПО должны отказаться 
от него. 
• Застой знаний. Для того чтобы оставаться в курсе всего нового 
в разработке ПО, требуется много времени, и многие разработчики 
даже не пытаются делать это. Один из издателей утверждал, что 
средний разработчик ПО читает в год меньше одной книги по своей 
профессии и не выписывает ни одного профессионального журна# 
ла [37]1. Возможно, проблема не связана с этикой, но уж наверняка 
связана с профессиональным поведением. Невозможно работать на 
уровне профессионала, не интересуясь последними достижениями 
в своей отрасли. Не занимаясь непрерывным самообразованием, 
можно продолжать работать в отрасли ПО на каком# то уровне, од 
нако согласно кодексу этики и профессионального поведения нель 
зя при этом быть специалистом ПО. 
Вне действия кодекса инженерам ПО приходится полагаться на собст# 
венные суждения и оценки, сталкиваясь с этическими дилеммами. Инже# 
неры, придерживающиеся кодекса, будут знать, что им не придется в оди 
ночку отстаивать свои позиции. 

1 

Том Демарко и Тимоти Листер «Человеческий фактор: успешные проекты и ко 
манды», 2 е издание. – Пер. с англ. – СПб.: Символ Плюс, 2005. 


Кодекс профессионала 

В некоторых случаях ситуация не столь однозначна, как в вышеприве# 
денных примерах. Интересы клиента заказчика будут противоречить ин 
тересам общественного блага. Или интересы работодателя могут противо 
речить интересам коллег по цеху разработчиков ПО. Кодекс не может пре 
дусмотреть все этические дилеммы, но призывает инженеров ПО прини# 
мать решения, исходя из высших нравственных критериев, соблюдая при 
этом дух кодекса. 

Достижение совершеннолетия 

одекс информирует общество, включая клиентов и руководящее зве# К но, о том, чего следует ожидать от специалистов ПО. Разумеется, его 
существование имеет смысл, только если работодатели и заказчики смогут 
рассчитывать на соблюдение кодекса профессионалами инженерии ПО. 
В каждой профессии нужно иметь дисциплинарные средства, чтобы при 
звать к порядку работников, не соблюдающих профессиональные стан# 
дарты. Не имея подобных средств, можно подорвать доверие к профессии 
в результате постепенного ее разрушения работниками, не придерживаю# 
щимися профессиональных принципов. Сегодня ни компьютерное обще# 
ство IEEE, ни АСМ, ни любая другая организация не пользуются полным ав# 
торитетом, чтобы принудить своих работников следовать кодексу. Соблю# 
дение его добровольно. В долгосрочном плане, однако, инженерия ПО по 
следует по тому же пути, что и другие профессии: полноценный 
профессиональный статус и соблюдение кодекса станут ее неотъемлемы 
ми частями. Кодекс будет обязательным для исполнения, и это будет вы# 
годно и специалистам ПО, и их работодателям и заказчикам, и обществу 
вцелом. 

Сэмюэль Флорман сказал, что «по мере взросления у нас растет жела 
ние сделать что то на благо общества». Он говорил о личностях, но его 
слова можно отнести и к нашей теме. Кодекс этики и профессионального 
поведения, который обращает особое внимание на ответственность по от 
ношению к профессии и вклад в общественное благо в целом, является од 
ним из главных признаков начала взросления инженерии ПО. 


ГЛАВА ДВАДЦАТЬ ПЕРВАЯ

А

Алхимия 

Вопрос: Назовите, пожалуйста, самые перспективные идеи 
и методики инженерии ПО, появляющиеся на горизонте? 

Ответ: Думаю, что они не на горизонте. Они здесь, с нами, 
уже много лет. Просто никто не извлекает из них всей пользы. 

ДЭВИД Л. ПАРНАС [2] 

Как превратить железо в золото? Последователи царя Мидаса во всех об 
ластях не устают задавать этот вопрос. Инженерия ПО уникальна в своем 
роде, поскольку может реализовать эту мечту алхимиков, ускорив внедре 
ние давно уже понятых и прекрасно зарекомендовавших себя методик, ко 
торые все еще не получили должного распространения. Мы можем пре# 
вратить второсортный свинец в золото высшей пробы. 

Зачем передавать технологии практикам 

трасль инженерии ПО располагает надежными методиками плани Орования и управления проектами, выработки технических требова 
ний, проектирования, создания, обеспечения качества и совершенствова 
ния процесса. Проблема лишь в том, что лишь немногие практики о них 
знают, а применяют их и еще меньше. В табл. 21.1 приведены некоторые 
примеры успешных методик, в применении которых ведущие организа 
ции ПО накопили значительный опыт, но которые, насколько я могу су 
дить по собственному опыту консультирования и по различным отрасле# 
вым обзорам, используются лишь очень тонкой прослойкой организаций# 
разработчиков ПО. 


Алхимия 209 


Аналитики обнаружили, что обычно инновации – новые методики – 
проходят путь от освоения технологии до применения за 10–15 лет [113], 
[124]. Если это так, то процесс освоения новых технологий в отрасли раз 
работки ПО существенно нарушен. Большинство методик, перечисленных 
в табл. 21.1, были изложены на бумаге 15 лет назад и даже больше. Почему 
же их не используют? 

Таблица 21.1. Результативные, но редко применяемые методики ПО [83] 

Методика 

Планирование и управление проектом 

• Средства автоматического оценивания 
• Эволюционная наработка и сдача продукта 
• Замеры 
• Производительная среда 
• Планирование управления рисками 
Разработка технических требований 

• Совет по изменениям 
• Опережающее прототипирование пользователь 
ских интерфейсов 
• Привлечение заказчика к участию в разработке 
через совместные рабочие семинары (сеансы 
совместной разработки приложений) 
Методики проектирования 

• Сокрытие информации 
• Встраивание процесса изменений 
Год первой публикации 
или коммерческого 
предложения 

1973 [64] 
1988 [51] 
1977 [50] 
1984 [12], [36] 
1981a 

1978b 

1975 [19] 

1985c 

1972 [104] 
1979 [105] 

a Управление рисками значительно старше, чем сама отрасль ПО, но работы по 
управлению рисками, связанные конкретно с ПО, стали появляться после выхо 
да труда Ф. У. Макфарлана (F. W. McFarlan) [88]. 

b Советы по управлению изменениями значительно старше, чем отрасль ПО, од 
нако книги, связанные конкретно с ПО, и работы о советах по изменениям в ПО 
(или по управлению конфигурацией ПО) стали появляться после работы Эдвар 
да Х. Берсоффа (Edward H. Bersoff) [9]. 

Семинары по совместной разработке ПО с привлечением заказчика (JAD) прак 
тиковались в IBM еще в 1977 г., но впервые сообщения о них появились в печати 
в работе Гэри Раша (Rush, Gary) [120]. 


210 
ГЛАВА 21 

Таблица 21.1 (продолжение) 

Методика 

Методики написания ПО 

• Контроль исходного кода 
• Пошаговая интеграция 
Методики обеспечения качества 

• Тестирование с проходом всех ветвей участков 
программы 
• Экспертизы 
Совершенствование процесса разработки 

• Модель зрелости разработки ПО Института 
инженерии ПО 
• Группы по процессам разработки ПО 
Год первой публикации 
или коммерческого 
предложения 

1980a 
1979 [93] 

1979 [93] 
1976 [42] 

1987 [58] 
1989 [59] 

a Различный инструментарий контроля исходной программы существовал и до 
1980 г., но одно из первых упоминаний в печати появилось в работе [10]. 

Распространение инноваций 

О
О
твет на этот вопрос одновременно и легок, и труден. Процесс про# 
никновения инноваций в повседневную практику изучался довольно 
широко. Основополагающий труд в этой области принадлежит Эверрету 
М. Роджерсу и называется «Diffusion of Innovations» (Распространение ин 
новаций). Впервые работа увидела свет в 1962 г. [119], а в четвертом изда 
нии, опубликованном в 1995 г., автор отметил, что свыше 3,5 тысяч статей 
и книг, посвященных проблеме распространения инноваций, было опуб 
ликовано между первым и четвертым изданиями книги. 

Э. М. Роджерс описал процесс принятия инноваций, исходя из типиза 
ции людей, воспринимающих их. Он разделил их на пять категорий: инно 
ваторы #энтузиасты; распространители технологий; группы принятия ин 
новаций; эксперты; раннее большинство; позднее большинство и медля# 
щие. На рис. 21.1 показаны как относительные размеры каждой из катего 
рий, так и последовательность восприятия ими инноваций. 

Инноваторы – это энтузиасты со склонностью к экспериментам. Они 
любят испытывать новые технологии независимо от степени их готовно# 
сти и сопутствующего им риска. Их не волнует значительная степень неоп 


Алхимия 211 


Инноваторы 
Эксперты 
Раннее 
большинство 
Позднее 
большинство 
Медлящие 
2.5% 13.5% 34% 34% 16% 

Последовательность принятия инноваций
Рис. 21.1. Инновации распространяются постепенно. У различных групп, 
принимающих инновацию, различные потребности и разные критерии ее оценки. 
Источник: работа [119] 

ределенности при использовании еще не сложившихся новых технологий 
и методик. Поскольку они рискуют, их часто преследуют неудачи. Поэтому 
люди, принадлежащие к другим категориям, могут не уважать инноваторов. 

Эксперты – это лидеры в своей организации, их мнение уважают. Они 
опережают остальных в принятии инноваций, но ровно настолько, чтобы 
служить примером и увлекать других. 

Люди из категории раннего большинства более рассудительны и вни# 
мательны в принятии инноваций, чем эксперты, и относятся к одной из 
двух крупнейших групп. Чтобы решиться на использование инноваций, 
им нужно больше времени, чем экспертам. Они обычно следуют по стопам 
категории экспертов. 

Позднее большинство настроено по отношению к инновациям скепти# 
чески. Оно ведет себя очень осторожно и принимает инновации только 
после того, как они многими опробованы. Эти люди не убеждены, что ин 
новации приводят к улучшениям или что они применимы в их случае. При# 
нятие ими инноваций может зависеть от желания не отставать от коллег. 

Медлящие – последние в принятии инноваций; они скорее смотрят 
в прошлое, чем в будущее. Люди этой категории чрезвычайно осторожны, 
принимая новое. 

Пропасть 

Р
Р
аботы Э. М. Роджерса были продолжены в середине девяностых годов 

XX века Джеффри Муром (Geoffrey Moore) в книге [92]. Мур заметил, что 


212 
ГЛАВА 21 

«Пропасть» 
Инноваторы 
Эксперты 
Раннее 
большинство 
Позднее 
большинство 
Медлящие 
Последовательность принятия инноваций
Рис. 21.2. Одна из трудностей распространения технологии – необходимость 
преодолеть пропасть, разделяющую запросы экспертов и раннего большинства. 
Источник: работа [92] 

различия в стилях принятия решений создают водоразделы между катего 
риями. Аргументы в пользу принятия инновации, которые весьма убеди# 
тельны для инноваторов энтузиастов, не обязательно убеждают экспертов. 

Но самое важное наблюдение, сделанное Муром, заключается в неодно 
родности водоразделов. По его мнению (рис. 21.2), разрыв между экспер# 
тами и ранним большинством значительно шире, чем между остальными, 
и его с полным основанием можно назвать пропастью. 

Несколько жестких вопросов 

дна из причин медленного внедрения инноваций состоит в том, что Оне все они эффективны на практике! Не все инновации полезны, по 
этому у раннего большинства, позднего большинства и медлящих доста 
точно оснований для осторожности. Думая о внедрении инновации, они 
задаются серьезными вопросами, например [126]: 

• Дают ли результаты экспериментов основания для окончательного 
вывода, что инновация будет работать на практике? 
• Являются ли достигнутые успехи результатом инновации, или они 
связаны с практической работой конкретных людей? 
• Является ли инновация полной или требует доработки/расширения 
перед внедрением? 
• Сопутствуют ли инновации дополнительные издержки (расходы на 
обучение, документацию), нивелирующие выигрыш от ее внедрения 
в долгосрочном плане? 

Алхимия 213 


• Если инновация создавалась в исследовательской среде, применима 
ли она в обычных практических условиях? 
• Замедляет ли инновация в целом работу программистов? 
• Возможно ли некорректное применение инновации? 
• Имеются ли данные о рисках, связанных с использованием данной 
инновации? 
• Известно ли, как интегрировать инновацию в существующие мето 
дики? 
• Надо ли внедрять инновацию полностью, чтобы получить от этого 
ощутимую выгоду? 
Лишь по очень немногим методикам инженерии ПО собраны и доста 
точно широко распространены все данные, необходимые для того, чтобы 
практики ПО могли дать ответы на эти вопросы. В результате практические 
методики разработки ПО, указанные в табл. 21.1, застряли по левую сторо 
ну от «пропасти». Эксперты применяют эти методики уже больше 15 лет, 
а группы раннего большинства в основном остаются в неведении. Количе# 
ственные данные по категориям принятия инноваций близки к данным 
о количестве проектов ПО, в которых процветает методика «напишем и ис# 
правим», – примерно в 75% проектов по #прежнему применяется этот под 
ход или его ближайшие собратья, и примерно такой же процент людей от 
носится к категориям справа от «пропасти». 

В чем причина такой ситуации? В парадигме Э. М. Роджерса одна из при# 
чин того, что инновации быстрее доходят до инноваторов и экспертов, за 
ключается в том, что эксперты обычно располагают большими ресурсами – 
они чаще других могут позволить себе дорогостоящие ошибки. Остальные 
категории более осторожны, в частности из# за ограниченности ресурсов. 
Однако, как говорилось в главе 12, в данном случае ограничен не денеж# 
ный ресурс, а время. Типичным методикам типа «напишем и исправим» со 
путствуют существенные нарушения сроков, а связанные с этим сверхуроч 
ные не оставляют никакого времени для изучения и взятия на вооружение 
более эффективных инновационных методик. 

В чем риск? 

дравый смысл подсказывает, что если вы готовы рисковать, то находи Зтесь слева от пропасти, а если нет – то справа. Однако такие умозаклю 

чения плохо укладываются в существующую картину инженерии ПО. 


214 
ГЛАВА 21 

Модель SWBСММ 


Модель «водопада» жизненного 
цикла процесса разработки ПО 
Большинство 
методик из табл. 21.1 

Новейшие методики 
(в этой книге 


Разработка по принципу 
не упоминаются) 

«напишем и исправим» 


Последовательность принятия инноваций
Рис. 21.3. Различные методики разработки ПО находятся на разных стадиях 
принятия новых технологий. Методики, названные в табл. 21.1, готовы к преодоF 
лению пропасти. Методика СММ в разработке ПО получила широкое распростраF 
нение в одних отраслях, но почти неизвестна в других (т. е. в какихFто отраслях 
водораздел пройден, а в какихFто нет). Устаревшие методики (аналогичные принF 
ципу «напишем и исправим») постепенно исчезают (или, по крайней мере, должны) 

Как показано на рис. 21.3, методики из табл. 21.1 сегодня применяются 
инноваторами и экспертами. На этом рисунке также указаны некоторые 
конкретные методики, играющие роль точек отсчета. Модель СММ Инсти# 
тута инженерии ПО, по видимому, как раз преодолевает пропасть. Хорошо 
известная модель «водопада» жизненного цикла процесса разработки по 
падает в зону позднего большинства, а разработка по принципу «напишем 
и исправим» прочно увязла в зоне медлящих. 

Следует признать, что после конференции НАТО по инженерии ПО 
в 1968 г. передовые технологии сделали огромный скачок. Но существует 
все еще очень много организаций, применяющих методики десяти двадца 
тилетней давности и даже более отсталые, которые вполне могут быть за# 
менены современными. Отрасль столкнулась с проблемой медленного 
принятия инноваций. Уже говорилось, что организации, использующие ус 
тарелые методики, сильно рискуют превысить бюджет, затянуть сроки 
и просто оказаться у разбитого корыта в связи с отменой проектов. Этот 
факт отмечен здесь повторно, чтобы подчеркнуть, что организации, зани 
мающие в области ПО позицию в одной из категорий справа от пропасти, 
в данный момент не минимизируют риски. На бесконечные ремонты ста# 
рого автомобиля можно потратить больше, чем на покупку нового. Точно 


Алхимия 215 


Последовательность принятия инновацийУмеренный риск/ 
высокий выигрыш 
Высокий риск/ 
низкий выигрыш 
Высокий риск/ 
высокий выигрыш 
Низкий риск/ 
высокий выигрыш 
Умеренный риск/ 
умеренный выигрыш 
Рис. 21.4. С учетом скорости совершенствования методик разработки ПО 
традиционное соотношение риска и выигрышей сместилось. Риски высоки 
на обоих краях кривой принятия инноваций 

так же и риски при использовании устаревших методик разработки ПО мо# 
гут быть выше, чем при переходе к новым более совершенным методикам. 

В какой точке цикла принятия технологии лучше всего находиться? 
Как видно из рис. 21.4, на левом краю риск принятия перспективной, но 
еще не зарекомендовавшей себя методики оправдан, поскольку обещает 
громадный выигрыш в случае успеха. На правом краю риск от применения 
устаревших методик столь же высок, но не сулит никакого выигрыша и по 
этому не оправдан. 

Ситуация с распространением технологий в отрасли разработки ПО 
необычна. Многие новейшие методики, подтвердившие свою ценность, 
такие как указанные в табл. 21.1, «скопились» на левом краю пропасти, раз# 
деляющей экспертов и категории справа от пропасти, и готовы преодо 
леть ее в организациях, решивших отказаться от пристрастия к разработке 
по принципу «напишем и исправим» и ему подобным ложно выигрышным 
методикам. Данная ситуация необычна тем, что в привычных обстоятель 
ствах риски для экспертов были бы выше, например, как если бы передо 
вые врачи, испытав пенициллин, доказали его эффективность и внедрили 
в свою практику, а 75% врачей по #прежнему прописывали бы пиявки и гор# 
чичники. Если эти средства применяются в начале двадцать первого века, 
то риск непринятия инноваций выше, чем при их использовании. 

Если ваша организация входит в группу раннего или позднего боль 
шинства или медлящих, то риск можно снизить, приняв некоторые из со 
временных методик, указанных в табл. 21.1. Подход по принципу «напи 


216 
ГЛАВА 21 

шем и исправим» рискован. Использование модели «водопада» в разработ 
ке ПО тоже рискованно. Принятие модели СММ не лишено риска, но он не 
настолько высок, как у этих двух устаревших подходов. Отраслевой опыт, 
на который я постоянно здесь ссылаюсь, подтверждает справедливость 
этого утверждения. Трудность состоит в том, чтобы широко распростра 
нить этот вывод. 

Опыт работы представителей на местах 
по программе расширения консультационной 
деятельности в сельском хозяйстве США 

В
В
сфере распространения инноваций одной из самых успешных про 
грамм в мире считается программа службы расширения консультиро# 
вания по сельскому хозяйству в США. Как говорит автор одной из работ по 
этой теме, «невозможно сказать и десятка слов по распространению инно 
ваций, не упомянув консультационный сервис в сельском хозяйстве».1 
Этот сервис включает три части: 

• НаучноFисследовательская система – научные работники иссле 
дователи на экспериментальных участках во всех 50 штатах США 
разрабатывают инновации, которые затем распространяются по 
всеместно. 
• Консультанты в штатах – увязывают исследовательские работы 
с представителями на местах. 
• Консультационные представители на местах – работают с ферме# 
рами и другими производителями сельскохозяйственной продук# 
ции на местах, помогая им выбирать инновации, подходящие для их 
нужд. Именно они отвечают на вопросы практиков, например: «Яв# 
ляется ли инновация полной или требует доработки/расширения 
перед внедрением?» или «Являются ли достигнутые успехи результа 
том внедрения инновации, или же они связаны с практикой работы 
людей?» 
Эта программа в сельском хозяйстве придает особо важное значение 
кооперации трех составных частей. Ученые #исследователи получают воз# 
награждение за опубликование результатов исследований в нужном для 
фермеров направлении. Работа консультантов в штатах оценивается по 

1 

Ивланд Дж. Д. (Eveland J. D.), цит. по: [119]. Информация о распространении ин 
новаций в сельском хозяйстве почерпнута из этой же книги. 


Алхимия 217 


тому, насколько хорошо они увязывают свои исследования с проблемами 
фермеров. 

Ежегодные инвестиции в программу по распространению сельхозин 
новаций примерно равны ежегодным инвестициям в исследования. Ни од 
на федеральная целевая программа, кроме этой, не тратит больше не 
скольких процентов своего бюджета на распространение результатов, 
и ни одна не достигла таких успехов в изменении сложившейся практики. 

Опыт отрасли ПО также дает несколько аргументов в пользу распро 
странения инноваций. Одна из лучших организаций ПО – Лаборатория 
инженерии ПО NASA – установила, что представление результатов ее про# 
граммы измерений показателей и анализа в формате руководств и курсов 
обучения стало ключевым фактором успеха завоевавшей множество на# 
град программы совершенствования процесса разработки ПО [139]. 

Распространение инноваций в отрасли ПО необходимо, и в ней уже су 
ществует зародыш такой программы. При федеральном финансировании 
был создан Институт инженерии ПО (SEI), призванный «играть ведущую 
роль в развитии практического уровня инженерии ПО с целью повысить 
качество зависящих от ПО систем».1 Фактически Институт SEI выполняет 
ту же роль, что научно#исследовательская система в программе распро 
странения инноваций сельского хозяйства. Однако, имея лишь 300 со 
трудников на 2,9 миллиона занятых в отрасли ПО, программа этого инсти# 
тута находится на начальных стадиях по сравнению с программой в сель 
ском хозяйстве, в которой около 17 тысяч сотрудников обслуживают око# 
ло 3,8 миллионов занятых в АПК [129]. 

Э. Роджерс указывал, что многие правительственные агентства пыта# 
лись скопировать модель программы расширения консультаций в сель 
ском хозяйстве, но потерпели неудачу, поскольку, кроме всего прочего, 
они не сформировали институт представителей на местах, как это было 
сделано по программе в сельском хозяйстве для обеспечения внедрения 
на местном уровне. В анализе Роджерса много внимания уделено объясне# 
нию причин пока еще ограниченного влияния Института SEI на коммер# 
ческую практику. Институт был создан Министерством обороны США; 
и документация, и материалы, создаваемые в институте, имеют выражен 
ный военный оттенок. Неудивительно, что раньше всех выгоды распро 
странения институтом технологий получили военные подрядчики и пра 
вительственные агентства [54]. 

См. сайт Института инженерии ПО по адресу www.sei.cmu.edu. 


218 
ГЛАВА 21 

В отрасли ПО существует много подотраслей со своими нуждами и сво 
им сленгом. Среди них бизнес системы, веб разработки, игры, ПО для ме# 
дицинской аппаратуры, системное ПО, производство компьютеров, встро 
енные системы, аэрокосмические приложения и многие другие. Если сло# 
жить неспособность выразить инновации инженерии ПО в терминах, по 
нятных для каждой конкретной подотрасли, с общей нехваткой глубокого 
образования в этой сфере, то медленное продвижение инноваций станет 
понятным. 

Практики не примут инновации, пока не получат ответы на интересую# 
щие их вопросы в понятных для них терминах. Чтобы добиться эффектив# 
ности внедрения технологий в практику, надо чтобы либо государство, либо 
частный сектор финансировали выполнение функций, близких к функци# 
ям консультантов в штатах и представителей на местах в сельхозпрограм 
ме. Требования проектов ПО не будут так уж сильно меняться в зависимо 
сти от местности, как в случае сельского хозяйства. Но они будут меняться 
в зависимости от подотрасли, так что инженерия ПО вполне могла бы вы# 
играть от сотрудников по связям на местах, которые увязывали бы общие 
исследования в области инженерии ПО с запросами конкретных подот# 
раслей. 

Другие меры, которые могут способствовать ускорению внедрения тех# 
нологий в практику, включают элементы формирования профессии, кото 
рые являются темами данной книги: программы подготовки специалистов 
без степени по инженерии ПО, дипломы профессионалов, требования не 
прерывного профессионального образования, кодекс профессионально 
го поведения. 

Принижающая роль прогресса 

Н
Н
есколько лет назад мне случилось заехать в небольшой сельский го# 

родок не ради общения с местным представителем программы рас 
ширения сельского хозяйства, а чтобы увидеться с коллегой по инженерии 
ПО, с которым раньше лично не встречался. Сразу после нашего знакомст# 
ва он спросил меня: «Наверное, нужно быть очень храбрым человеком, 
чтобы в вашем возрасте написать столь объемную книгу, как «Code Com# 
plete»?1 

1 

Стив Макконнелл «Совершенный код». – Пер. с англ. – СПб.: Питер, 2006. 


Алхимия 219 


Как бы мне ни нравилось, что меня назвали храбрым, я не могу согла 
ситься с таким высказыванием. Моя книга «Code Complete» является при 
мером передачи научных и инженерных знаний от поколения к поколе# 
нию и того, как в конечном итоге идет развитие знаний. Пионеры в облас 
ти инженерии ПО – Виктор Бэсили, Барри Боем, Ларри Константин, Билл 
Кертис, Том Демарко, Том Гилб, Кейперс Джоунз, Харлан Миллз, Дэвид Пар 
нас и другие – прилагали массу усилий для выработки передовых концеп 
ций из крупиц несформированных знаний. Они трудились в окружении 
ошибочных теорий, противоречивых данных и разрозненных или просто 
несуществующих разработок прошлых лет. Их последователи воспользо 
вались работами пионеров и смогли избежать заблуждений и неверных 
предположений. «Новые люди», которым не пришлось блуждать в поисках 
краеугольных концепций, иногда могут проще и доступнее разъяснить но 
ваторские идеи основоположников, чем те могли бы сделать это сами. 
Ларри Константин проделал работу, из которой родилось структурное 
проектирование. Эд Йордон проанализировал работы Л. Константина по 
структурному проектированию, но результаты анализа так и не были по 
няты большинством читателей [144]. И только после того, как Мейир 
Пейдж# Джоунс [103] прокомментировал пояснения Э. Йордона к работе 
Л. Константина, эти идеи наконец# то стали доступны широкому кругу ря# 
довых практиков [27]. Затем идеи структурного проектирования были ин 
тегрированы в объектно #ориентированное проектирование. И цикл возоб 
новился. 

Проходит время, и знания, которыми первопроходцы овладевали в те# 
чение всей своей деятельности, студенты осваивают за пару семестров. 
Книгу «Code Complete» я писал три с половиной года. Когда нибудь разра 
ботчик ПО, возможно еще «храбрее» меня, напишет книгу значительно 
лучше моей всего за несколько месяцев. Именно так свинец медленно пре# 
вращается в золото в отраслях интенсивного использования знаний, та 
ких как инженерия ПО. Так и должно быть. 


Б

Библиография 

[1] Abran, Alain, et al., «Guide to the Software Engineering Body of Knowledge: Tri# 
al Version (Version 1.00)», IEEE Computer Society, 2001. 
[2] «ACM Fellow Profile: David Lorge Parnas», ACM Software Engineering Notes, May 
1999, pp. 10–14. 
[3] Anthes, Gary H., «IRS Project Failures Cost Taxpayers $50B Annually», CompuF 
terworld, October 14, 1996. 
[4] Bach, James, «Enough about Process: What We Need Are Heroes», IEEE SoftwaF 
re, March 1995, pp. 96–98. 
[5] Baines, Robin, «Across Disciplines: Risk, Design, Method, Process, and Tools», 
IEEE Software, July/August 1998, pp. 61–64. 
[6] Baker, F. Terry, «Chief Programmer Team Management of Production Program# 
ming», IBM Systems Journal, vol. 11, no. 1, 1972, pp. 56–73. 
[7] Baker, F. Terry, and Harlan D. Mills, «Chief Programmer Teams», Datamation, Vo 
lume 19, Number 12 (December 1973), pp. 58–61. 
[8] Beck, Kent, «Extreme Programming Explained: Embrace Change», Reading, MA: 
Addison Wesley, 1999. 
[9] Bersoff, Edward H., «Proceedings of the Software Quality and Assurance Work# 
shop», a joint Publication of ACM Performance Evaluation Review, vol. 7, nos. 3 
& 4, and ACM Software Engineering Notes, vol. 3, no. 5 (1978). 
[10] Bersoff, Edward H., et al., «Software Configuration Management», Englewood 
Cliffs, NJ: Prentice Hall, 1980. 
[11] Boehm, Barry W., «Software Engineering Economics», Englewood Cliffs, NJ: 
Prentice #Hall, Inc., 1981. 
[12] Boehm, Barry W., et al., «A Software Development Environment for Improving 
Productivity», IEEE Computer, June 1984, pp. 30–44. 

Библиография 221 


[13] Boehm, Barry W., «Improving Software Productivity», IEEE Computer, Septem 
ber 1987, pp. 43–57. 
[14] Boehm, Barry, et al., «Software Cost Estimation with Cocomo II», Boston, MA: 
Addison Wesley, 2000. 
..

[15] Bohm, C., and G. Jacopini «Flow Diagrams, Turing Machines, and Languages 
with Only Two Formation Rules», Communications of the ACM, May 1966, 
pp. 366–371. 
[16] Bostrom, R. P., and K. M. Kaiser, «Personality Differences within Systems Project 
Teams», Proceedings of the 18th Annual Computer Personnel Research ConferenF 
ce, ACM No. 443810, 1981. 
[17] Britcher, Robert N., «Why (Some) Large Computer Projects Fail» in Glass, Ro# 
bert L., «Software Runaways», Englewood Cliffs, NJ: Prentice Hall, 1998. 
[18] Bronson, Po, «Manager's Journal», Wall Street Journal, February 9, 1998. 
[19] Brooks, Frederick P., Jr., «The Mythical Man Month, Reading», MA: Addison 
Wesley, 1975. 
[20] Brooks, Frederick P., Jr., «No Silver Bullets – Essence and Accidents of Software 
Engineering», Computer, April 1987, pp. 10–19. 
[21] Brooks, Frederick P., Jr., «The Mythical Man Month», Anniversary Edition, Read 
ing, MA: Addison Wesley, 1995.1 Первое издание вышло в 1975. 
[22] Bylinsky, Gene, «Help Wanted: 50,000 Programmers», Fortune, March 1967, 
pp. 141ff. 
[23] Carnegie Mellon University/Software Engineering Institute, «The Capability 
Maturity Model: Guidelines for Improving the Software Process», Reading, MA: 
Addison Wesley, 1995. 
[24] Cole, Andy, «Runaway Projects – Cause and Effects», Software World, Vol. 26, 
no. 3, pp. 3–5. 
[25] Constantine Larry, Myers Glenford, and Stevens Wayne, «Structured Design», 
IBM Systems Journal, No. 2, 1974, pp. 115–139. 
[26] Constantine, Larry, «Under Pressure», Software Development, October 1995, 
pp. 111–112. 
[27] Constantine, Larry, «Constantine on Peopleware», Englewood Cliffs, NJ: Your# 
don Press, 1995. 
[28] Constantine, Larry, «Re: Architecture», Software Development, January 1996, 
pp. 87–88. 
Фредерик Брукс «Мифический человеко месяц или как создаются программные 
системы». – Пер. с англ. – СПб.: Символ Плюс, 2000. 


222 
Библиография 

[29] «Continuing Education Workshop», The Washington Board Journal, Board, 
Winter/Spring 1999, p. 10. 
[30] Conway, M. E., «How Do Committees Invent?» Datamation, vol. 14, no. 4, 1968, 
pp. 28–31. 
[31] «Criteria for Accrediting Computing Programs: Effective for Evaluations During 
the 2003#2004 Accreditation Cycle», Computing Accreditation Commission 
(CAC) of the Accreditation Board for Engineering and Technology, Inc. (ABET), 
Baltimore, MD, November 2, 2002. 
[32] «Criteria for Accrediting Engineering Programs», Accreditation Board for Engi# 
neering and Technology, Inc., November 1, 1998. 
[33] Curtis, Bill, «Substantiating Programmer Variability», Proceedings of the IEEE, 
vol. 69, no. 7, 1981. 
[34] Davis, Alan M., «201 Principles of Software Development», New York: McGraw 
Hill, 1995. 
[35] DeMarco, Tom, «Structured Analysis and System Specification», NJ: Prentice 
Hall, 1979. 
[36] DeMarco, Tom, and Timothy Lister, «Programmer Performance and the Effects 
of the Workplace», in Proceedings of the 8th International Conference on SoftF 
ware Engineering, August 1985. 
[37] DeMarco, Tom, and Timothy Lister, «Peopleware: Productive Projects and 
Teams», 2d Ed., New York: Dorset House, 1999.1 
[38] DeMarco, Tom, «Certification or Decertification», Communications of the ACM, 
July 1999, p. 11. 
[39] Diaz, Michale, and Jeff King, «How CMM Impacts Quality, Productivity, Rework, 
and the Bottom Line», CrossTalk, vol. 15, no. 3 (March 2002), pp. 9–14. 
[40] Dijkstra, Edsger, «GoTo Statement Considered Harmful», Communications of the 
ACM, Vol. 11, 1968, pp. 148ff. См. также по адресу: www.cs.utexas.edu/users/ 
EWD/ewd02xx/EWD215.PDF. 
[41] Duncan, W. R., «A Guide to the Project Management Body of Knowledge», Up 
per Darby, PA: Project Management Institute, 1996. 
[42] Fagan, M. E., «Design and Code Inspections to Reduce Errors in Program Deve 
lopment», IBM Systems Journal, v. 15, no. 3, 1976, pp. 182–211. 
[43] Fetzer, Daniel T., «Making Investment Decisions for Software Process Improve# 
ment», DACS Software Tech News, November 2002, pp. 19–22. 
1 

Том Демарко и Тимоти Листер «Человеческий фактор: успешные проекты и ко 
манды», 2 е издание. – Пер. с англ. – СПб.: Символ Плюс, 2005. 


Библиография 223 


[44] Fishman, Charles, «They Write the Right Stuff», Fast Company, December 1996. 
[45] Florman, Samuel C., «The Existential Pleasures of Engineering», 2d Ed., NY: St. 
Martin's Griffin, 1994. 
[46] Ford, Gary and Gibbs, Norman E., «A Mature Profession of Software Engineer# 
ing», SEI, CMU, CMU/SEI#96 #TR#004, January 1996. 
[47] Frosch, Robert A., «A New Look at Systems Engineering», IEEE Spectrum, Sep# 
tember 1969. 
[48] Gibbs, W. Wayt, «Software's Chronic Crisis», Scientific American, September 
1994, pp. 86–95. 
[49] Gibbs, W. Wayt, «Command and Control: Inside a Hollowed# Out Mountain, 
Software Fiascoes – and a Signal Success», Scientific American, August 1997, 
pp. 33–34. 
[50] Gilb, Tom, «Software Metrics», Cambridge, MA: Winthrop Publishers, 1977. 
[51] Gilb, Tom, «Principles of Software Engineering Management», Wokingham, 
England: Addison# Wesley, 1988. 
[52] Glass, Robert L., «Software Creativity», Englewood Cliffs, NJ: Prentice Hall PTR, 
1994. 
[53] Glass, Robert L., «Software Runaways», Englewood Cliffs, NJ: Prentice Hall, 1998. 
[54] Hayes, Will, and Dave Zubrow, «Moving On Up: Data and Experience Doing 
CMM#Based Process Improvement», CM/SEI #95# TR 008, August 1995. 
[55] Hecker, Daniel E., «Occupational employment projections to 2010», Monthly 
Labor Review, November 2001, vol. 124, no. 11. 
[56] Herbsleb, James, et al., «Benefits of CMM Based Software Process Improvement: 
Initial Results», Pittsburgh: Software Engineering Institute, Document CMU/ 
SEI#94 #TR#13, August 1994. 
[57] Herbsleb, James, et al., «Software Quality and the Capability Maturity Model», 
Communications of the ACM, June 1997, pp. 30–40. 
[58] Humphrey, Watts S., and W. L. Sweet, «A Method for Assessing the Software En 
gineering Capability of Contractors», Report CMU/SEI 87 TR# 23, Pittsburgh: 
Software Engineering Institute, 1987. 
[59] Humphrey, Watts S., «Managing the Software Process», Reading, MA: Addison# 
Wesley, 1989. 
[60] Humphrey, Watts S., «Winning with Software: An Executive Strategy», Boston, 
MA: Addison Wesley, 2001. 
[61] Hutchings, Edward, «Surely You're Joking, Mr. Feynman!», New York: W. W. Nor 
ton & Company, Reprint Edition, 1997. 

224 
Библиография 

[62] Johnson, Jim, «Turning Chaos into Success», Software Magazine, December 
1999, pp. 30–39. 
[63] Jones, Capers, «Programming Productivity», New York: McGraw #Hill, 1986. 
[64] Jones, Capers, «Assessment and Control of Software Risks», Englewood Cliffs, 
NJ: Yourdon Press, 1994. 
[65] Jones, Capers, «Gaps in Programming Education», IEEE Computer, April 1995, 
pp. 70–71. 
[66] Jones, Capers, «Patterns of Software Systems Failure and Success», Boston, MA: 
International Thomson Computer Press, 1996. 
[67] Jones, Capers, «Applied Software Measurement: Assuring Productivity and Qua# 
lity», 2d Ed., New York: McGraw Hill, 1997. 
[68] Jones, Capers, «Software Assessments, Benchmarks, and Best Practices», Bos# 
ton, MA: Addison Wesley, 2000. 
[69] Kaner, Cem, «Computer Malpractice», Software QA, Volume 3, no. 4, 1997, p. 23. 
[70] Kennedy, Ken, and Moshe Y. Vardi, «A Rice University Perspective on Software 
Engineering Licensing», Communications of the ACM, November 2002, pp. 94–95. 
[71] Knight, John C., and Nancy Leveson, «Should Software Engineers Be Licensed?» 
Communications of the ACM, November 2002, pp. 87–90. 
[72] Knuth, Donald, «The Art of Computer Programming, Volume 3: Sorting and 
Searching», Reading, MA: Addison Wesley, 1973, p. 419. 
[73] Krantz, Les, «Jobs Rated Almanac», NY: St. Martin's Press, 1999. 
[74] Krasner, Herb, «Accumulating the Body of Evidence for the Pay off of Software 
Process Improvement – 1997», November 19, 1997 (unpublished paper). 
[75] Kruchten, Philippe, «The Rational Unified Process: An Introduction», 2d Ed., 
Boston, MA: Addison Wesley, 2000.1 
[76] Kuhn, Thomas S., «The Structure of Scientific Revolutions», 3d Ed., Chicago: The 
University of Chicago Press, 1996. 
[77] Lakhanpal, B., «Understanding the Factors Influencing the Performance of 
Software Development Groups: An Exploratory Group# Level Analysis», InforF 
mation and Software Technology, 35 (8), 1993, pp. 468–473. 
[78] Lawlis, Dr. Patricia K., Capt. Robert M. Flowe, and Capt. James B. Thordahl, 
«A Correlational Study of the CMM and Software Development Performance», 
Crosstalk, September 1995. 
[79] Lederer, Albert L., and Jayesh Prasad, «Nine Management Guidelines for Better 
Cost Estimating», Communications of the ACM, February 1992, pp. 51–59. 
1 

Ф. Кратчен «Введение в Rational Unified Process», 2# е издание, Вильямс, 2002. 


Библиография 225 


[80] Lowell, Bill, and Angela Burgess, «A Moving Target: Studies Try to Define the IT 
Workforce», IT Professional, May/June 1999. 
[81] Lyons, Michael L., «The DP Psyche», Datamation, August 15, 1985, pp. 103–109. 
[82] McCalla, Gord, «Software Engineering Requires Individual Professionalism», 
Communications of the ACM, November 2002, pp. 98–101. 
[83] McConnell, Steve, «Rapid Development», Redmond, WA: Microsoft Press, 1996. 
[84] McConnell, Steve, «Software Project Survival Guide», Redmond, WA: Microsoft 
Press, 1997.1 
[85] McConnell, Steve, «How to Read a Technical Article», IEEE Software, Nov./Dec. 
1998, pp. 128f. 
[86] McConnell, Steve, «After the Gold Rush», Redmond, WA: Microsoft Press, 1999. 
[87] McCue, Gerald M., «IBM's Santa Teresa Laboratory – Architectural Design for 
Program Development», IBM Systems Journal, vol. 17, no. 1, 1978, pp. 4–25. 
[88] McFarlan, F. W., «Portfolio Approach to Information Systems», Harvard BusiF 
ness Review, September#October 1981, pp. 142–150. 
[89] Metzger, Philip W., «Managing a Programming Project», 2d Ed., Englewood 
Cliffs, NJ: Prentice Hall, 1981. 
[90] Metzger, Philip W., and John Boddie, «Managing a Programming Project», 3d 
Ed., Upper Saddle River, NJ: Prentice Hall PTR, 1996. 
[91] Mills, Harlan D., «Software Productivity», Boston, MA: Little, Brown, 1983. 
[92] Moore, Geoffrey, «Crossing the Chasm», New York: Harper Business, 1991. 
[93] Myers, Glenford J., «The Art of Software Testing», New York: John Wiley & Sons, 
1979. 
[94] NASA, «Manager's Handbook for Software Development, Revision 1», Document 
number SEL 84# 101, Greenbelt, MD: Goddard Space Flight Center, NASA, 1990. 
[95] NASA, «Recommended Approach to Software Development, Revision 3», Docu 
ment number SEL 81# 305, Greenbelt, MD: Goddard Space Flight Center, NASA, 
1992. 
[96] NASA Software Engineering Laboratory, «Software Engineering Laboratory 
(SEL) Relationships, Models, and Management Rules», Document Number SEL 
91# 001, Greenbelt, MD: Goddard Space Flight Center, NASA, 1991. 
[97] National Center for Education Statistics, «2001 Digest of Educational Statistics», 
Document Number NCES 2002130, April 2002. 
[98] Neumann, Peter G., «Computer Related Risks», Reading, MA: Addison Wesley, 
1995. 
С. Макконнелл «Остаться в живых! Руководство для менеджера программных 
проектов». – Пер. с англ. – СПб.: Питер, 2006. 


226 
Библиография 

[99] Nuseibeh, Bashar, «Ariane 5: Who Dunnit?» IEEE Software, May/June 1997, 
pp. 15–16. 
[100] «Occupational Outlook Handbook 2002#03 Edition», Bureau of Labor Statis# 
tics, 2002. 
[101] Oldham, Leon G., et al., «Benefits Realized from Climbing the CMM Ladder», 
Crosstalk, May 1999. 
[102] Olsen, Neil C., «Survival of the Fastest: Improving Service Velocity», IEEE SoftF 
ware, September 1995, pp. 28–38. 
[103] Page#Jones, Meilir, «The Practical Guide to Structured Systems Design», Engle# 
wood Cliffs, NJ: Yourdon Press, 1988. 
[104] Parnas, David L., «On the Criteria to Be Used in Decomposing Systems into 
Modules», Communications of the ACM, vol. 5, no. 12, December 1972, 
pp. 1053–58. 
[105] Parnas, David L., «Designing Software for Ease of Extension and Contraction», 
IEEE Transactions on Software Engineering, v. SE #5, March 1979, pp. 128–138. 
[106] Parnas, David, «On ICSE's „Most Influential“ Papers», Software Engineering NoF 
tes, July 1995. 
[107] Parnas, David L., «Software Engineering: An Unconsummated Marriage», SoftF 
ware Engineering Notes, November 1997. 
[108] Parnas, David L., «Software Engineering Programmes Are Not Computer 
Science Programmes», IEEE Software, November/December 1999. 
[109] Parnas, David Lorge, «Licensing Software Engineers in Canada», CommunicaF 
tions of the ACM, November 2002, pp. 96–98. 
[110] Pitterman, Bill, «Telcordia Technologies: The Journey to High Maturity», IEEE 
Software, July 2000. 
[111] Pressman, Roger S., «Software Engineering: A Practitioner's Approach», 5th Ed., 
New York: McGraw #Hill, 2001. 
[112] «Process Maturity Profile of the Software Community 2001 Year End Update», 
Software Engineering Institute, March 2002. 
[113] Raghavan, Sridhar A., and Donald R. Chand, «Diffusing Software #Engineering 
Methods», IEEE Software, July 1989, pp. 81–90. 
[114] Randall, Richard L., et al., «Product #Line Reuse Delivers a System for One#Fifth 
the Cost in One#Half the Time», Crosstalk, August 1996. 
[115]Raymond, E.S., «Homesteading the Noosphere», 1998, www.catb.org/~esr/writF 
ings/homesteading. 
[116] Reich, Charles, «The Greening of America», New York: Random House, 1970. 

Библиография 227 


[117] Reifer, Donald J., «Making the Software Business Case: Improvement by the 
Numbers», Boston, MA: Addison Wesley, 2001. 
[118] Rich, Charles, and Richard C. Waters, «Automatic Programming: Myths and 
Prospects», IEEE Computer, August 1988. 
[119] Rogers, Everett M., «Diffusion of Innovations», 4th Ed., New York: The Free 
Press, 1995. 
[120] Rush, Gary, «The Fast Way to Define System Requirements», In Depth, ComF 
puterworld, October 7, 1985. 
[121] Sackman, H., W. J. Erikson, and E. E. Grant, «Exploratory Experimental Studies 
Comparing Online and Offline Programming Performance», Communications 
of the ACM, vol. 11, no. 1, January 1968, pp. 3–11. 
[122] «Scaling Up: A Research Agenda for Software Engineering», Communications 
of the ACM, March 1990. 
[123] «Selections from Ralph Waldo Emerson», Edited by Stephen E. Whicher. Bos# 
ton, MA: Houghton Mifflin Company, 1960. 
[124] Shaw, Mary, «Prospects for an Engineering Discipline of Software», IEEE SoftF 
ware, November 1990, pp. 15ff. 
[125] Simon, Herbert, «The Sciences of the Artificial», 3d Ed., Cambridge, MA: MIT 
Press, 1996. 
[126] «Software#Engineering Methods», IEEE Software, July 1989, pp. 81–90. 
[127] Sommerville, Ian, «Software Engineering», 6th Ed., Boston, MA: Addison Wes# 
ley, 2000. 
[128] Stallman, R.M., «The GNU Manifesto», 1985, www.fsf.org/gnu/manifesto.html. 
[129] «Table 2, Employment by occupation, 1996 and projected 2006», in «Occupa 
tional projections to 2006», Monthly Labor Review, November 1997. 
[130] «Table 255. – Bachelor's degrees conferred by degree granting institutions, by 
discipline division: 1970–71 to 1999–2000», National Center for Education 
Statistics, 2001 Digest of Educational Statistics, Document Number NCES 
2002130, April 2002. 
[131] Tackett, Buford D., III, and Buddy Van Doren, «Process Control for Error Free 
Software: A Software Success Story», IEEE Software, May 1999. 
[132] The Standish Group, «Charting the Seas of Information Technology», Dennis, 
MA: The Standish Group, 1994. 
[133] Thomsett, Rob, «Effective Project Teams: A Dilemma, a Model, a Solution», 
American Programmer, July–August 1990, pp. 25–35. 

228 
Библиография 

[134] Tripp, Leonard, «Professionalism of Software Engineering: Next Steps», Key# 
note Address at 12th Conference on Software Engineering Education and 
Training, March 22, 1999. 
[135] Twain, Mark, «Fenimore Cooper's Literary Offenses», 1895. 
[136] van Solingen, Rini, «The Cost and Benefits of Software Process Improvement», 
Proceedings of the Eighth European Conference on Information Technology 
Evaluation, September 17–18, 2001. 

[137] van Vliet, Hans, «Software Engineering Principles and Practice», West Sussex, 
England: John Wiley & Sons Ltd, 1993. 
[138] Vosburgh, J., B. Curtis, R. Wolverton, B. Albert, H. Malec, S. Hoben, and Y. Liu, 
«Productivity Factors and Programming Environments», Proceedings of the 
7th International Conference on Software Engineering, Los Alamitos, CA: IEEE 
Computer Society, 1984, pp. 143–152. 
[139] Waligora, Sharon R., Linda C. Landis, Jerry T. Doland, «Closing the Loop on Im 
provement: Packaging Experience in the Software Engineering Laboratory», 
Proceedings of the Nineteenth Annual Software Engineering Workshop, NovemF 
ber 30–December 1, 1994, NASA Goddard Space Flight Center, Greenbelt, 
MD, Document Number SEL 94 #006. 

[140] Wheeler, David, Bill Brykczynski, and Reginald Meeson, «Software Inspection: 
An Industry Best Practice», Los Alamitos, CA: IEEE Computer Society Press, 
1996. 
[141] White, John, and Barbara Simons, «ACM's Position on Licensing of Software 
Engineers», Communications of the ACM, November 2002, p. 91. 
[142] Wiener, Lauren Ruth, Digital Woes: Why We Should Not Depend on Software, 
Reading, MA: Addison Wesley, 1993. 
[143] Wirth, Niklaus, «Algorithms + Data Structures», Englewood Cliffs, NJ: Prentice# 
Hall, 1985.1 
[144] Yourdon, Edward and Larry L. Constantine, «Structured Design: Fundamentals 
of a Discipline of Computer Program and Systems Design», Englewood Cliffs, 
NJ: Yourdon Press, 1979. 
[145] Yourdon, Edward, «Rise and Resurrection of the American Programmer», En 
glewood Cliffs, NJ: Prentice Hall, 1996. 
[146] Zachary, Pascal, «Showstopper! The Breakneck Race to Create Windows NT 
and the Next Generation at Microsoft», New York: Free Press, 1994. 
1 

Н. Вирт «Алгоритмы и структуры данных», СПб.: Невский диалект, 2005. 


А

Алфавитный указатель 

IBM 
программисты примадонны 
и командные игроки, 87 
производительность и контроль 
дефектов, 35 
трудозатраты на разработку ОС/360, 
человеко #лет, 24 
управление процессом разработки 
ПО, 42 

M 

Microsoft 
бархатная потогонка, 143 
значение опытного персонала, 144 
моральный дух, 143 
неденежные вознаграждения, 143 
организация процесса, 43 
сертификация, 186 
система мотивации, 142 
приобретение фирмы Vermeer Tech 
nology, 116 

N 

Novell, сертификация, 186 

А 

аккредитация, 66 
зрелость профессии, 70 

Инженерный аккредитационный 
совет Канады (Canadian Engineering 
Accreditation Board, CEAB ), 66 
программ компьютерной науки, 175 
Александер, Кристофер (Alexander, 
Christopher), 171 
аналогии 
Pony Express, 75 
динозавры в смоляной яме, 23 
каменные глыбы, 27 
«культ карго» в разработке ПО, 43 
строительство пирамид, 27 
Антуан де Сент Экзюпери, 79 
Аккредитационная комиссия в области 
техники (Engineering Accreditation 
Commission, ЕАС), 178, 180 
аттестация, 180 
больницы, 136 
пример дисциплин, 179 
программы обучения 
по компьютерным наукам, 175 
Совет по аккредитации программ 
в области компьютерных наук 
(Computer Science Accreditation 
Board, CSAB), 175 
Совместная комиссия по аттестации 
организаций здравоохранения 
(Joint Commission on Accreditation 
of Healthcare Organizations, JCAO), 
136 


Алфавитный указатель 

Б 

базовые навыки инженера ПО, 60 
владение 
инструментарием 
и методами инженерии ПО, 61 
обслуживанием ПО, 61 
проектированием ПО, 60 
процессом разработки ПО, 61 
созданием ПО, 60 
управлением инженерией ПО, 61 
управлением конфигурацией ПО, 
61 
Бокс, Джордж (Box, George), 128 
Бом, К. (Bhm, C.), 56 
Боэм, Барри У. 
о повышении производительности 
разработки ПО, 139 
Бриггс, Кэтрин (Briggs, Katherine), 76 
Брукс, Фредерик (Brooks, Frederick) 
об ученых и инженерах, 46 
серебряная пуля, 54 
специализация, 100 
сущность и случайность, 54 
Буш, Ванневар (Bush, Vannevar), 165 
Бэкон, Френсис (Bacon, Francis) 
«Новый органон», 63 
о знании, 128 
о лишениях, 111 
о надежде, 27 
о научном методе, 63, 72 
о предрассудках, 111 
о преобразованиях, 23 
о сомнениях и определенности, 89 
о способностях и обучении, 174 
о чтении, 105 
об истине, 53 
об ошибках как основе прогресса, 62 
об умных вопросах, 63 
об ученом муже, 94 
бюрократия 
и производительность, 42 
против хаоса, 42 

В 

Вирт, Никлаус (Wirth, Niklaus), 95 
вознаграждения 
неденежные, Microsoft, 143 
свидетельства профессионального 
развития, 158 

возраст программистов 
возраст основной доли работников 
отрасли ПО, 83 
опытность персонала, 144 
старение программистов, 88 
время жизни продуктов, 53 

Г 

Гиббс, Норман Е. (Gibbs, Norman E), 66 
Гилб, Том (Gilb, Tom), 56 
Гласс, Роберт Л. (Glass, Robert L.), 36 
группы по инженерии ПО (SEDG), 159 
группы принятия инноваций 
инноваторы, 210 
медлящие, 211 
позднее большинство, 211 
раннее большинство, 211 
стили принятия решений, 212 
эксперты, 211 

Д 

Дейкстра, Эдсгер (Dijkstra, Edsger), 56 
Демарко, Том (DeMarco, Tom) 
о разнице в квалификации 
программистов, 139 
демография ПО, 82–83 
Джакопини, Дж. (Jacopini, G.), 56 
Джоунз, Кейперс (Jones, Capers) 
корпоративное обучение инженеров 
ПО, 174 
рентабельность инвестиций в 
совершенствование процессов, 118 
специализация, 101 
документация и производительность, 
42 
достижение зрелости инженерных 
дисциплин, 169 

З 

закон Конвея, 130 
заработная плата, 99 
размер для специалиста со степенью, 
99 
структура, 159 
знания, определяющие специалиста, 53 
золотая лихорадка в Калифорнии, 111 
золотая лихорадка в разработке ПО, 112 
перспективы успеха, 113, 117 


Алфавитный указатель 

разработка ПО в постлихорадочный 
период, 113– 114 
расширение и сжатие, 116 
характерные черты, 112 
экономические основы, 115 
золотая лихорадка и компания Xerox, 

И 

изменчивость ПО, 55 
иллюзия «мягкости» ПО, 38 
инженерия 
и искусство, здание Сиднейской 
оперы и Реймский собор, 167 
и наука, 47 
инженерные катастрофы, 165–166 
определение, 49 
инженерия ПО, 56 
и компьютерная наука, 46 
и компьютерное программирование, 
49 
источники знаний, 60 
как профессия, 65, 72 
наука или искусство, 46, 47 
проход через Геркулесовы столпы, 72 
составные элементы, 60 
инженерные профессии 
влияние на искусство, 167 
коммерческая стадия 
формирования, 170 
наука для разработки ПО, 171 
необходимость инженерии, 165 
отличие от магии, 173 
процесс достижения зрелости, 169 
стадия профессиональной 
инженерии, 170 
стадия ремесла, 169 
инноваторы #энтузиасты, 114, 210 
Институт инженерии ПО (Software 
Engineering Institute, SEI), 217 
модель SW CMM, 129, 132 
Институт инженеров электроники 
и электротехники (IEEE), 
сертификация инженеров ПО, 178 

Й 

Йордон, Эд (Yourdon, Ed), 219 

К 

Калифорнийская золотая лихорадка 
см. золотая лихорадка 
Кертис, Билл (Curtis, Bill), 140, 141, 219 
Кларк, Артур Чарльз (Clarke, Arthur 
Charles), 173 
классификация типов личности 
по Майерс Бриггс (MBTI), 76–77 
книги для разработчиков ПО, 105 
Кнут, Дональд (Knuth, Donald), 46 
коллективный труд 
правила, 89 
примадонны и командные игроки, 87 
принцип «хирургической бригады», 
100 
принципы, 89 
самодостаточность, 89 
специализация в коллективе, 103 
формирование сообщества, 94 
эффективность, 87 
Комиссия по аккредитациии в области 
компьютерных наук (Computing Ac 
creditation Commission, CAC), 175 
коммерческая стадия формирования 
инженерной профессии, 170 
компания «Боинг», 174 
компьютерное программирование 
см. программирование, 54 
Константин, Ларри Л. (Constantine, 
Larry L.) 
о «Вызове ПО» Австралийского 
компьютерного общества, 116 
о структурном проектировании, 56, 
95, 219 
контроль дефектов 
доля времени выполнения проекта, 
81 
и производительность, 35 
исследование IBM, 35 
стоимость исправления, 31 
успешные проекты, 35 
факторы неудач, 31 
контроль рисков 
в модели SW CMM, 133 
передача технологий, 214 
крупные провалы ПО, 15 


Алфавитный указатель 

Л 

лестница профессионального развития 
(Professional Development Ladder, 
PDL), 146, 149 

двенадцатая переходная ступень, 160 
для подготовленных инженеров, 159 
использование в других компаниях, 

161 
карьерный рост, 151 
общий обзор, 149 
преимущества, 160 
см. также профессиональное 

развитие, программа Construx, 146 
Листер, Тимоти (Lister, Timothy), 139, 
141 

лицензирование, 189 
аргументы против, 189 
влияние на общую массу 

разработчиков ПО, 192 
квалификационные требования, 197 
обвинение в небрежности, 196 
общий обзор, 186 
преимущества, 196 
профессий в целом, 68 
раскрутка на начальном этапе, 194 
связь с образованием, 19 
церемония вручения стального 

кольца, 200 
экзамены, 197 
личный энтузиазм в разработке ПО, 41 
или отлаженный процесс, 44 
ложное золото 
заявления о сногсшибательной 

производительности, 36 
иллюзия «мягкости» ПО, 38 
определение, 27 
принцип «напишем и исправим», 34 
слова заклинания, 37 
снижение сроков за счет качества, 35 

Лорд Кельвин, 118 

М 

Магиннис, Терри (Maginnis, Terry), 98 
Майерс, Гленфорд (Myers, Glenford), 56 
Майерc, Изабель Бриггс (Meyers, Isabel 

Briggs), 76 
Маршалл, Джеймс (Marshall, James), 111 
менеджеры проектов, контролируемые 

факторы, 126 

методы совершенствования процессов, 
распространение, 130 
Метцгер, Филипп У. (Metzger, Philip W.), 
95 
модель SW CMM, 133 
влияние на творчество и моральный 
дух, 134 
инструмент оценки организаций, 

136 
контроль рисков, 132 
общий обзор, 129 
организации, использующие, 133 
прогресс в отрасли ПО, 130 
проект ATAMS в Шайенских горах, 

133 

уровни зрелости организаций, 129 
уровень 1 начальный, 129 
уровень 2 # повторяемый, 129 
уровень 3 # сформированный, 129 
уровень 4 управляемый, 130 
уровень 5 # оптимизирующий, 130 

факторы успеха в совершенствова# 

нии, 136 
форма и содержание, 137 
Центр космических полетов НАСА 

имени Джонсона, 135 
модель оценки Cocomo II, 126 
модель уровня зрелости организаций 

ПО, см. SW CMM, 129 
мотивация, 142 
вознаграждения, влияние 

на производительность, 42 
подход Microsoft, 143 
фактор персонала, 142 

Мур, Джеффри (Moore Geoffrey), 211 
«мягкость» ПО, иллюзия, 38 

Н 

написание книг по инженерии ПО, 105 

НАСА 
Лаборатория инженерии ПО, 125 
Центр космических полетов имени 

Джонсона, 135 
наука и инженерия, 47 
наука разработки ПО, 171 
научный метод, 63, 72 
небрежность, 196 
неденежные вознаграждения, 143 


Алфавитный указатель 

непрерывное профессиональное 
образование (Continuous Professional 
Education, CPE), 183 
непроизводительные затраты, 32 
нераспознание даты 29 февраля, 166 
неудачные проекты, 33 
Ньюман, Питер Дж. (Neumann, Peter G.), 
166 

О 

области знаний, программа Construx 
см. также проект SWEBOK, 146 
образование 
в инженерии ПО, 70 
общая картина, 82 
программы для студентов, 178 
профессии в общем, 66 
связь с лицензированием, 19 
университетские программы курса 
компьютерной науки, 174 
обучение, 158 
в корпорациях, 174 
переходная ступень 12, 160 
программа Construx, 158 
см. также аккредитация; аттестация; 
лицензирование; образование; 
профессиональное развитие; 
развитие практических навыков; 
сертификация; степень по 
диплому, 158 
оптимизирующий уровень по модели 
SW CMM, 130 
опытность персонала, 144 
организации 
оценка по модели SW #CMM, 137 
распределение по эффективности, 
119 
сертификация, 69 
инженерии ПО, 71 
профессии в целом, 69 
стили разработки ПО, 
см. управление процессом, 44 
уровни модели SW CMM, 130 
ОС Windows NT 
самоотдача программистов 
разработчиков, 81 
трудозатраты на разработку, 24 
ОС/360, трудозатраты на разработку, 24 

отмена проектов 
доля сворачиваемых проектов, 32 
стоимость, 16 
факторы, 38 
отсутствие наглядности, проблемы 
требований к ПО, 55 
ошибка ПО оплаты парковки, 166 

П 

Парнас, Дэвид (Parnas, David), 49, 58, 181 
о самых перспективных идеях 
в инженерии ПО, 208 
о статусе профессии инженерии ПО, 
49, 181 
область знаний инженерии ПО 
(SWEBOK), 57 
Паскаль, Захарий (Pascal, Zachary), 81 
«период полураспада» ПО, 53, 56 
план профессионального роста (Profes# 
sional Development Plan, PDP), 157 
планирование, 
см. управление процессом, 32 
позднее большинство, 114, 210 
полупериод жизни знаний, 57 
правила работы в коллективе, 89–90 
признаки зрелости профессии 
в целом, 66 
инженерии ПО, 70 
принцип «напишем и исправим», 206 
история, 32 
«ложное золото», 34 
недостатки, 31 
определение, 31 
снижение производительности, 31 
управление процессом, 32 
проблемы соответствия 
неудачи проектов, 24 
проблемы требований 
изменчивость ПО, 55 
иллюзия гибкости ПО, 38 
причина превышения расходов 
и сроков, 38 
сложность ПО, 54 
существенные свойства систем, 54 
провал модернизации ПО таможенной 
службы США, 15 
программа кураторства, 158 


Алфавитный указатель 

программа службы расширения 
консультирования по сельскому 
хозяйству 
распространение технологий, 216 
программирование, 25 
автоматическое, 25 
и инженерия ПО, 49 
см. также разработка ПО; 
инженерия ПО, 25 
ФОРТРАН, 25 
языки, 25 
программист, см. разработчик ПО, 75 
программисты герои, 86 
программисты# примадонны, 87 
проект ATAMS в Шайенских горах, 133 
проект области знаний по инженерии 
ПО (SWEBOK) 
история развития науки, 58 
категории областей знаний, 60 
существенные трудности, 59 
проектировщики ПО, 50 
проекты ПО, 23 
документация 
и производительность, 42 
отличие разработки ПО 
от инженерных проектов, 51 
повторно используемые наработки 
(артефакты), 172 
разбазаривание средств 
из #за укрупнения, 124 
сметная стоимость, 123 
тупиковые, этический кодекс, 205 
производительность 
бюрократический стиль, 42 
главный фактор, 42, 87 
документация, 42 
и индивидуальная мотивация, 42 
и «серебряная пуля», 36 
и слаженность коллектива, 87 
и совещания, 42 
количество дефектов, исследование 
IBM, 35 
постепенное снижение, принцип 
«напишем и исправим», 31 
разница по отдельным 
программистам, 139 
слабосильные программисты, 141 
специализация в коллективе, 100 

профессии 
аккредитация (аттестация 
программ), 66 
зрелость, уровни и характеристики, 
66– 69 
начальное профессиональное 
образование, 66 
общие характеристики, 65 
определение, 65 
перспективы занятости, 85 
привлекательность, 76 
профессиональная подготовка, 177 
профессиональные сообщества, 68 
развитие практических навыков, 66 
сертификация индивидуальная, 67 
сертификация организаций, 69 
степени по диплому и спрос 
на выпускников, 85 
стратификация, 98 
этический кодекс, 68 
профессиональное развитие, 66 
вводный уровень способностей, 148 
ведущий уровень способностей, 148 
группы по инженерии ПО (SEDG), 
159 
инженерии ПО, 71 
мастерский уровень способностей, 
148 
основные этапы, 67 
профессиональное развитие, 
области знаний, 146–156 
программа Construx, 146 
программа кураторства, 158 
программа обучения, 158 
в профессиях в целом, 68 
путь профессиональной подготовки, 
177 
свидетельства профессионального 
развития, 158 
структура заработной платы, 159 
структурные и культурные усиления, 
157 
ступень 12, 159 
уровни способностей, 147, 153 
продвинутый уровень 
способностей, 148 
профессиональные сообщества, 68 
в инженерии ПО, 71 
в целом, 68 


Алфавитный указатель 

ценность и польза, 97 
профессия инженерии ПО 
аккредитация, 70 
где необходимо продвижение, 72 
лицензирование, 70 
начальное профессиональное 
образование, 70 
профессиональное развитие, 71 
профессиональные сообщества, 71 
развитие практических навыков, 70 
сертификация индивидуальная, 70 
сертификация организаций, 71 
уровни зрелости, 70 
характеристики зрелости, 70 
этический кодекс, 71 
процессы управления, 
см. управление процессом, 32 

Р 

рабочие условия 
влияние на производительность, 142 
сверхурочные переработки 
программистов, 23 
фирма Microsoft, 143 
развитие практических навыков 
инженерия ПО, 70 
профессии в целом, см. также 
профессиональное развитие, 66 
разработка ПО 
в эпоху Интернета, 25 
динозавры в смоляной яме, 23 
исторический взгляд, 23 
наука или искусство, 46 
стили, героический и 
ориентированный на процесс, 41 
устойчивое ядро знаний, 55 
разработчики ПО, 23 
возраст, 83, 88 
образование, 83 
основные области знаний, 60 
пол, 82 
различия в индивидуальной 
производительности, 139 
самоотдача, 81 
стереотип программиста, 75 
тип личности по тесту MBTI, 77 
энтузиасты герои и примадонны 
узурпаторы, 86– 87 
этический кодекс, 202 

разрушение моста в Квебеке, 165 
раннее большинство, 114, 211 
распространение инноваций, 
см. распространение технологий 
распространение технологий, 114 
группы восприятия инноваций 
инноваторы энтузиасты, 114, 210 
медлящие, 114, 211 
позднее большинство, 114, 211 
раннее большинство, 114, 210 
эксперты, 114, 210 
контроль рисков, 213 
последовательность принятия 
инноваций, 212, 214 
причины осторожности, 212 
программа расширения 
консультирования по сельскому 
хозяйству, 216 
расходы, 31 
исправление дефектов, 31 
отмененные проекты, 16 
превышение, меняющиеся 
требования, 38 
ухудшение качества при 
сокращении, 35 
цена гибкости, 39 
рейс № 655 иранских авиалиний, 167 
Рейч, Чарльз (Reich, Charles), 89 
рентабельность инвестиций (ROI) 
в совершенствование процессов, 118 
Роджерс, Эверетт М. (Rogers, Everett M.), 
114, 210, 211 
Рочестерский технологический 
институт (R.I.T), 178 

С 

Саймон, Герберт (Simon, Herbert), 171 
самодостаточность, 89 
сверхурочные, 23 
свидетельства профессионального 
развития, 158 
серебряные пули, 36 
сертификация 
в Apple Computers, 186 
в Microsoft, 186 
в Novell, 186 
в инженерии ПО, 70 
выгоды, 186 
добровольная основа, 185 


Алфавитный указатель 

сертификация 
индивидуальная, см. также 

аккредитация, лицензирование, 67 
общий обзор, 185 
организаций, 69 

в инженерии ПО, 71 
профессии в целом, 69 
см. также аккредитация, 

лицензирование, 69 

профессий в целом, 67 
синдром Фенимора Купера, 107 
слова# заклинания, 37 
сложность ПО, проблемы требований, 

54 

сметные расходы, 25 
перерасход средств, 123 
проигрыш на масштабах, 124 
стадия программирования, 33 

совершенствание методик ПО, 
см. совершенствование процессов, 40 
совершенствование методик см. 
совершенствование процессов, 117 

совершенствование организационных 
процессов, 
см. совершенствование процессов 

совершенствование процессов 
в небольших организациях, 117 
вопросы для самооценки, 127 
Институт SEI; SW CMM, 133 
Лаборатория инженерии ПО НАСА, 

125 

преимущества 
см. также Институт SEI, SW CMM, 
передача технологий, 120 

разбазаривание средств из за 

укрупнения проектов, 124 
сметная стоимость проектов, 122 
состояние на практике, 119 

Совет по аккредитации программ 
в области техники и технологии 
(Accreditation Board for Engineering 
and Technology, ABET), 175 

Совет по аккредитации программ 
в области компьютерных наук (Com# 
puter Science Accreditation Board, 
CSAB), 175 

совещания и производительность, 42 
Совместная комиссия по аттестации 
организаций здравоохранения (Joint 

Commission on Accreditation of Health 
care Organizations, JCAHO), 136 
сознание 
сознание 1 – пионер первопрохо# 

дец, 89 
сознание 2 – человек корпорации, 89 
сознание 3 – просвещенная 

независимость, 91 
Солинген, Рини ван (Solingen, Rini van), 
118 
сообщества, см. профессиональные 
сообщества, 68 

специализация 
в проектном коллективе, 103 
высокая производительность, 100 
две складывающиеся группы, 100 
компаний в зависимости от размера, 

102 
принцип «хирургической бригады», 

100 
способности, см. уровни способностей 
сроки 

сокращение, 35 
и неудачи проектов, 23 
превышение, проблемы требований, 

38 
соблазн «ложного золота», 36 
стадии зрелости инженерных 
профессий, 169– 170 

степень по диплому 
выпускники и спрос, 85 
инженерия ПО и компьютерная 

наука, 47 
непрерывное профессиональное 

образование, 182 
программы для выпускников, 178 
программы для студентов младших 

курсов, 178 
профессиональное развитие, 177 
процент дипломированных 

специалистов, 47 
размер заработка, 99 
распределение среди разработчиков 

ПО, 82 
Рочестерский технологический 
институт (R.I.T), 178 

см. также аккредитация; 
лицензирование; образование; 
обучение; профессиональное 
развитие, 84 


Алфавитный указатель 

тенденции изменения числа 
выпускников, 175 
требования к курсам по основным 
дисциплинам, 182 
Университета Мак# Мастера, 182 
формирование по модели 
традиционных инженерных 
программ, 184 
стереотип личности программиста, 75 
Стивенс, Уэйн (Stevens, Wayne), 56 
стоимость, см. сметные расходы 
стратификация профессии, 98 
суть и случайность, 54 
существенные системные свойства, 54 

Т 

Твен, Марк (Twain, Mark), 107 
творческий подход 
и SW#CMM, 134 
стили, героический 
и ориентированный на процесс, 44 
тестирование 
влияние на качество ПО, 35 
технические экспертизы, влияние 
на качество ПО, 35 
типы личности 
великие изобретатели, 78 
классификация по Майерс Бриггс 
(MTBI), 76 
разработчиков ПО, 77 
требования к курсам по основным 
дисциплинам, 182 

У 

Университет Мак# Мастер, 181 
управление процессом 
IBM, 42 
Microsoft, 42 
бюрократия и хаос, 43 
и героический стиль, 44 
и удачные и неудачные проекты, 33 
неправильное, 45 
принцип «напишем и исправим», 31 
уровни модели SW #CMM, 129 
уровни способностей, программа 
Construx, 147–148 
устойчивое ядро знаний инженерии 
ПО, 56 

Ф 

факторы неудачи проектов 
доля отменяемых проектов, 32 
связанные с общением, 140 
сроки выполнения, 23 
управление процессом, 33 
уровень опыта аналитиков, 140 
факторы отмены проектов, 38 
факторы персонала 
модель оценки Cocomo II, 140 
мотивация, 142 
неденежные вознаграждения, 143 
общение и связь, 140 
опытность персонала, 144 
преемственность, 140 
программисты с низкой 
производительностью, 141 
различия в индивидуальной 
производительности, 139 
способности аналитиков, 140 
физические условия работы, 142 
факторы успеха 
в модели SW CMM, 136 
контроль дефектов, 35 
организация процесса на ранней 
стадии, 33 
раннее устранение дефектов, 35 
уровень опыта аналитиков, 140 
Фейнман, Ричард (Feynmann, Richard), 
41 
Флорман, Сэмюэль С. (Florman, 
Samuel C.), 167, 207 
Форд, Гэри (Ford, Gary), 66 
формирование сообщества, 94 
Фредерик Брукс 
«Мифичекий человеко месяц», 100 
сжатые сроки, 24 
распространение передового опыта, 
105 
Фрейли, Деннис (Frailey, Dennis), 177 
Фрош, Роберт (Frosch, Robert), 24 

Х 

Хамфри, Уоттс (Humphrey, Watts), 118 
хаос против бюрократии, 42 
характеристики типа личности 
по Майерс Бриггс, 76 
Хербслеб, Джеймс (Herbsleb, James) 
внедрение модели SW#CMM, 135 


Алфавитный указатель 

рентабельность инвестиций в 
совершенствование процессов, 118 

Ц 

Центр космических полетов имени 
Джонсона, 135 
церемония вручения стального кольца, 
200 

Ч 

человеческий фактор, 102 
Черчилль, Уинстон (Churchill, Winston), 
5 

Ш 

Шоу, Мэри (Shaw, Mary), 169 

Э 

Эдисон, Томас (Edison, Thomas), 79 
Эмерсон, Ральф Уолдо (Emerson, Ralph 

Waldo), 105 
экзамен на получение лицензии, 197 
экономика разработки ПО по 

принципу «золотой лихорадки», 115 
эксперты (тип восприятия инноваций), 
114, 210 

этический кодекс 
в инженерии ПО, 71 
занижение стоимости разработки, 

205 
застой знаний, 206 
преимущества этического кодекса 

поведения, 205 
принцип «напишем и исправим», 206 
программисты, 202 
проекты, ведущие в тупик, 205 
профессии в целом, 68 
толкование, 203 


